// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr TestCallbackReturnFullNative();

	internal class TestCallbackReturnFullInvoker {

		TestCallbackReturnFullNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TestCallbackReturnFullInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TestCallbackReturnFullInvoker (TestCallbackReturnFullNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TestCallbackReturnFullInvoker (TestCallbackReturnFullNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TestCallbackReturnFullInvoker (TestCallbackReturnFullNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.TestCallbackReturnFull Handler {
			get {
				return new Regress.TestCallbackReturnFull(InvokeNative);
			}
		}

		Regress.TestObj InvokeNative ()
		{
			Regress.TestObj __result = GLib.Object.GetObject(native_cb (), true) as Regress.TestObj;
			return __result;
		}
	}

	internal class TestCallbackReturnFullWrapper {

		public IntPtr NativeCallback ()
		{
			try {
				Regress.TestObj __ret = managed ();
				if (release_on_call)
					gch.Free ();
				return __ret == null ? IntPtr.Zero : __ret.OwnedHandle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TestCallbackReturnFullNative NativeDelegate;
		Regress.TestCallbackReturnFull managed;

		public TestCallbackReturnFullWrapper (Regress.TestCallbackReturnFull managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TestCallbackReturnFullNative (NativeCallback);
		}

		public static Regress.TestCallbackReturnFull GetManagedDelegate (TestCallbackReturnFullNative native)
		{
			if (native == null)
				return null;
			TestCallbackReturnFullWrapper wrapper = (TestCallbackReturnFullWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
