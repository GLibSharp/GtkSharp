// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructB : IEquatable<TestStructB> {

		public sbyte SomeInt8;
		public Regress.TestStructA NestedA;

		public static Regress.TestStructB Zero = new Regress.TestStructB ();

		public static Regress.TestStructB New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructB.Zero;
			return (Regress.TestStructB) Marshal.PtrToStructure (raw, typeof (Regress.TestStructB));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_struct_b_clone(IntPtr raw, IntPtr b_out);

		public Regress.TestStructB Clone() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			Regress.TestStructB b_out;
			IntPtr native_b_out = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Regress.TestStructB)));
			regress_test_struct_b_clone(this_as_native, native_b_out);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			b_out = Regress.TestStructB.New (native_b_out);
			Marshal.FreeHGlobal (native_b_out);
			return b_out;
		}

		static void ReadNative (IntPtr native, ref Regress.TestStructB target)
		{
			target = New (native);
		}

		public bool Equals (TestStructB other)
		{
			return true && SomeInt8.Equals (other.SomeInt8) && NestedA.Equals (other.NestedA);
		}

		public override bool Equals (object other)
		{
			return other is TestStructB && Equals ((TestStructB) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ SomeInt8.GetHashCode () ^ NestedA.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
