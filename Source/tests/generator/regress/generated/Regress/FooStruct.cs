// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

	#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FooStruct : IEquatable<FooStruct> {

		private IntPtr _priv;
		public int Member;

		public static Regress.FooStruct Zero = new Regress.FooStruct();

		public static Regress.FooStruct New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.FooStruct.Zero;
			return (Regress.FooStruct)Marshal.PtrToStructure(raw, typeof(Regress.FooStruct));
		}

		public bool Equals(FooStruct other) {
			return true && _priv.Equals(other._priv) && Member.Equals(other.Member);
		}

		public override bool Equals(object other) {
			return other is FooStruct && Equals((FooStruct)other);
		}

		public override int GetHashCode() {
			return this.GetType().FullName.GetHashCode() ^ _priv.GetHashCode() ^ Member.GetHashCode();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
		#endregion
	}
}