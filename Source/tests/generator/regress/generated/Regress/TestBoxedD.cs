// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestBoxedD : IEquatable<TestBoxedD> {


		public static Regress.TestBoxedD Zero = new Regress.TestBoxedD ();

		public static Regress.TestBoxedD New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestBoxedD.Zero;
			return (Regress.TestBoxedD) Marshal.PtrToStructure (raw, typeof (Regress.TestBoxedD));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_d_new(IntPtr a_string, int a_int);

		public static TestBoxedD New(string a_string, int a_int)
		{
			IntPtr native_a_string = GLib.Marshaller.StringToPtrGStrdup (a_string);
			TestBoxedD result = TestBoxedD.New (regress_test_boxed_d_new(native_a_string, a_int));
			GLib.Marshaller.Free (native_a_string);
			return result;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_d_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_test_boxed_d_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_boxed_d_get_magic(IntPtr raw);

		public int Magic { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				int raw_ret = regress_test_boxed_d_get_magic(this_as_native);
				int ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		static void ReadNative (IntPtr native, ref Regress.TestBoxedD target)
		{
			target = New (native);
		}

		public bool Equals (TestBoxedD other)
		{
			return true;
		}

		public override bool Equals (object other)
		{
			return other is TestBoxedD && Equals ((TestBoxedD) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode ();
		}

		public static explicit operator GLib.Value (Regress.TestBoxedD boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Regress.TestBoxedD.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Regress.TestBoxedD (GLib.Value val)
		{
			return (Regress.TestBoxedD) val.Val;
		}
#endregion
	}
}
