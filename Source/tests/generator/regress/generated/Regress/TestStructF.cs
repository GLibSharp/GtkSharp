// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructF : IEquatable<TestStructF> {

		public int RefCount;
		public int Data1;
		public int Data2;
		public int Data3;
		public int Data4;
		public int Data5;
		public int Data6;
		public byte Data7;

		public static Regress.TestStructF Zero = new Regress.TestStructF ();

		public static Regress.TestStructF New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructF.Zero;
			return (Regress.TestStructF) Marshal.PtrToStructure (raw, typeof (Regress.TestStructF));
		}

		public bool Equals (TestStructF other)
		{
			return true && RefCount.Equals (other.RefCount) && Data1.Equals (other.Data1) && Data2.Equals (other.Data2) && Data3.Equals (other.Data3) && Data4.Equals (other.Data4) && Data5.Equals (other.Data5) && Data6.Equals (other.Data6) && Data7.Equals (other.Data7);
		}

		public override bool Equals (object other)
		{
			return other is TestStructF && Equals ((TestStructF) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ RefCount.GetHashCode () ^ Data1.GetHashCode () ^ Data2.GetHashCode () ^ Data3.GetHashCode () ^ Data4.GetHashCode () ^ Data5.GetHashCode () ^ Data6.GetHashCode () ^ Data7.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
