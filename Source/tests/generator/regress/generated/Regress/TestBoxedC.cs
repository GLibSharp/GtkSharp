// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestBoxedC : IEquatable<TestBoxedC> {

		public uint Refcount;
		public uint AnotherThing;

		public static Regress.TestBoxedC Zero = new Regress.TestBoxedC ();

		public static Regress.TestBoxedC New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestBoxedC.Zero;
			return (Regress.TestBoxedC) Marshal.PtrToStructure (raw, typeof (Regress.TestBoxedC));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_c_new();

		public static TestBoxedC New()
		{
			TestBoxedC result = TestBoxedC.New (regress_test_boxed_c_new());
			return result;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_c_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_test_boxed_c_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (TestBoxedC other)
		{
			return true && Refcount.Equals (other.Refcount) && AnotherThing.Equals (other.AnotherThing);
		}

		public override bool Equals (object other)
		{
			return other is TestBoxedC && Equals ((TestBoxedC) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Refcount.GetHashCode () ^ AnotherThing.GetHashCode ();
		}

		public static explicit operator GLib.Value (Regress.TestBoxedC boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Regress.TestBoxedC.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Regress.TestBoxedC (GLib.Value val)
		{
			return (Regress.TestBoxedC) val.Val;
		}
#endregion
	}
}
