// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructFixedArray : IEquatable<TestStructFixedArray> {

		public int JustInt;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
		public int[] Array;

		public static Regress.TestStructFixedArray Zero = new Regress.TestStructFixedArray ();

		public static Regress.TestStructFixedArray New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructFixedArray.Zero;
			return (Regress.TestStructFixedArray) Marshal.PtrToStructure (raw, typeof (Regress.TestStructFixedArray));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_struct_fixed_array_frob(IntPtr raw);

		public void Frob() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			regress_test_struct_fixed_array_frob(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		static void ReadNative (IntPtr native, ref Regress.TestStructFixedArray target)
		{
			target = New (native);
		}

		public bool Equals (TestStructFixedArray other)
		{
			return true && JustInt.Equals (other.JustInt) && Array.Equals (other.Array);
		}

		public override bool Equals (object other)
		{
			return other is TestStructFixedArray && Equals ((TestStructFixedArray) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ JustInt.GetHashCode () ^ Array.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
