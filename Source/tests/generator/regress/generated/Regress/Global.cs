// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Global {

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_aliased_caller_alloc(IntPtr boxed);

		public static Regress.TestBoxed AliasedCallerAlloc() {
			Regress.TestBoxed boxed;
			IntPtr native_boxed = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Regress.TestBoxed)));
			regress_aliased_caller_alloc(native_boxed);
			boxed = Regress.TestBoxed.New (native_boxed);
			Marshal.FreeHGlobal (native_boxed);
			return boxed;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_annotation_attribute_func(IntPtr _object, IntPtr data);

		public static int AnnotationAttributeFunc(Regress.AnnotationObject _object, string data) {
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			int raw_ret = regress_annotation_attribute_func(_object == null ? IntPtr.Zero : _object.Handle, native_data);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_data);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_custom_destroy(RegressSharp.AnnotationCallbackNative cb, RegressSharp.AnnotationNotifyFuncNative destroy, IntPtr data);

		public static void AnnotationCustomDestroy(Regress.AnnotationCallback cb) {
			RegressSharp.AnnotationCallbackWrapper cb_wrapper = new RegressSharp.AnnotationCallbackWrapper (cb);
			IntPtr data;
			Regress.AnnotationNotifyFunc destroy;
			if (cb == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			RegressSharp.AnnotationNotifyFuncWrapper destroy_wrapper = new RegressSharp.AnnotationNotifyFuncWrapper (destroy);
			IntPtr data;
			if (destroy == null) {
				data = IntPtr.Zero;
			} else {
				data = (IntPtr) GCHandle.Alloc (destroy_wrapper);
			}
			regress_annotation_custom_destroy(cb_wrapper.NativeDelegate, destroy_wrapper.NativeDelegate, data);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_annotation_get_source_file();

		public static string AnnotationGetSourceFile() {
			IntPtr raw_ret = regress_annotation_get_source_file();
			string ret = GLib.Marshaller.FilenamePtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_init(ref int argc, ref IntPtr[] argv);

		public static void AnnotationInit(ref int argc, ref string[] argv) {
			int cnt_argv = argv == null ? 0 : argv.Length;
			IntPtr[] native_argv = new IntPtr [cnt_argv];
			for (int i = 0; i < cnt_argv; i++)
				native_argv [i] = GLib.Marshaller.StringToPtrGStrdup(argv[i]);
			regress_annotation_init(ref argc, ref native_argv);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_invalid_regress_annotation(int foo);

		public static void AnnotationInvalidRegressAnnotation(int foo) {
			regress_annotation_invalid_regress_annotation(foo);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_ptr_array(IntPtr[] array);

		public static void AnnotationPtrArray(GLib.PtrArray[] array) {
			int cnt_array = array == null ? 0 : array.Length;
			IntPtr[] native_array = new IntPtr [cnt_array + 1];
			for (int i = 0; i < cnt_array; i++)
				native_array [i] = array[i] == null ? IntPtr.Zero : array[i].Handle;
			native_array [cnt_array] = IntPtr.Zero;
			regress_annotation_ptr_array(native_array);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_annotation_return_filename();

		public static string AnnotationReturnFilename() {
			IntPtr raw_ret = regress_annotation_return_filename();
			string ret = GLib.Marshaller.FilenamePtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_set_source_file(IntPtr fname);

		public static void AnnotationSetSourceFile(string fname) {
			IntPtr native_fname = GLib.Marshaller.StringToFilenamePtr (fname);
			regress_annotation_set_source_file(native_fname);
			GLib.Marshaller.Free (native_fname);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_space_after_comment_bug631690();

		public static void AnnotationSpaceAfterCommentBug631690() {
			regress_annotation_space_after_comment_bug631690();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_annotation_string_zero_terminated();

		public static string[] AnnotationStringZeroTerminated() {
			IntPtr raw_ret = regress_annotation_string_zero_terminated();
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_string_zero_terminated_out(ref IntPtr[] out_param);

		public static void AnnotationStringZeroTerminatedOut(ref string[] out_param) {
			int cnt_out_param = out_param == null ? 0 : out_param.Length;
			IntPtr[] native_out_param = new IntPtr [cnt_out_param + 1];
			for (int i = 0; i < cnt_out_param; i++)
				native_out_param [i] = GLib.Marshaller.StringToPtrGStrdup(out_param[i]);
			native_out_param [cnt_out_param] = IntPtr.Zero;
			regress_annotation_string_zero_terminated_out(ref native_out_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_annotation_test_parsing_bug630862();

		public static GLib.Object AnnotationTestParsingBug630862() {
			IntPtr raw_ret = regress_annotation_test_parsing_bug630862();
			GLib.Object ret = GLib.Object.GetObject (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_annotation_transfer_floating(IntPtr _object);

		public static GLib.Object AnnotationTransferFloating(GLib.Object _object) {
			IntPtr raw_ret = regress_annotation_transfer_floating(_object == null ? IntPtr.Zero : _object.Handle);
			GLib.Object ret = GLib.Object.GetObject (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_annotation_versioned();

		public static void AnnotationVersioned() {
			regress_annotation_versioned();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_atest_error_quark();

		public static int AtestErrorQuark() {
			int raw_ret = regress_atest_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_destroy_notify_callback(RegressSharp.FooCallbackNative cb, IntPtr data, GLib.DestroyNotify destroy);

		public static void FooDestroyNotifyCallback(Regress.FooCallback cb) {
			RegressSharp.FooCallbackWrapper cb_wrapper = new RegressSharp.FooCallbackWrapper (cb);
			IntPtr data;
			GLib.DestroyNotify destroy;
			if (cb == null) {
				data = IntPtr.Zero;
				destroy = null;
			} else {
				data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			regress_foo_destroy_notify_callback(cb_wrapper.NativeDelegate, data, destroy);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_foo_enum_type_method(int regress_foo_enum);

		public static int FooEnumTypeMethod(Regress.FooEnumType regress_foo_enum) {
			int raw_ret = regress_foo_enum_type_method((int) regress_foo_enum);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_foo_enum_type_returnv(int x);

		public static Regress.FooEnumType FooEnumTypeReturnv(int x) {
			int raw_ret = regress_foo_enum_type_returnv(x);
			Regress.FooEnumType ret = (Regress.FooEnumType) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_foo_error_quark();

		public static int FooErrorQuark() {
			int raw_ret = regress_foo_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_foo_init();

		public static int FooInit() {
			int raw_ret = regress_foo_init();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_interface_static_method(int x);

		public static void FooInterfaceStaticMethod(int x) {
			regress_foo_interface_static_method(x);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_not_a_constructor_new();

		public static Regress.FooObject FooNotAConstructorNew() {
			IntPtr raw_ret = regress_foo_not_a_constructor_new();
			Regress.FooObject ret = GLib.Object.GetObject(raw_ret) as Regress.FooObject;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_const_char_param(IntPtr param);

		public static void FooTestConstCharParam(string param) {
			IntPtr native_param = GLib.Marshaller.StringToPtrGStrdup (param);
			regress_foo_test_const_char_param(native_param);
			GLib.Marshaller.Free (native_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_test_const_char_retval();

		public static string FooTestConstCharRetval() {
			IntPtr raw_ret = regress_foo_test_const_char_retval();
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_const_struct_param(IntPtr param);

		public static void FooTestConstStructParam(Regress.FooStruct param) {
			IntPtr native_param = GLib.Marshaller.StructureToPtrAlloc (param);
			regress_foo_test_const_struct_param(native_param);
			Marshal.FreeHGlobal (native_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_test_const_struct_retval();

		public static Regress.FooStruct FooTestConstStructRetval() {
			IntPtr raw_ret = regress_foo_test_const_struct_retval();
			Regress.FooStruct ret = Regress.FooStruct.New (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_string_array(IntPtr[] array);

		public static void FooTestStringArray(string[] array) {
			int cnt_array = array == null ? 0 : array.Length;
			IntPtr[] native_array = new IntPtr [cnt_array + 1];
			for (int i = 0; i < cnt_array; i++)
				native_array [i] = GLib.Marshaller.StringToPtrGStrdup(array[i]);
			native_array [cnt_array] = IntPtr.Zero;
			regress_foo_test_string_array(native_array);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_string_array_with_g(IntPtr[] array);

		public static void FooTestStringArrayWithG(string[] array) {
			int cnt_array = array == null ? 0 : array.Length;
			IntPtr[] native_array = new IntPtr [cnt_array + 1];
			for (int i = 0; i < cnt_array; i++)
				native_array [i] = GLib.Marshaller.StringToPtrGStrdup (array[i]);
			native_array [cnt_array] = IntPtr.Zero;
			regress_foo_test_string_array_with_g(native_array);
			for (int i = 0; i < native_array.Length - 1; i++) {
				array [i] = GLib.Marshaller.Utf8PtrToString (native_array[i]);
				GLib.Marshaller.Free (native_array[i]);
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_unsigned_qualifier(uint unsigned_param);

		public static void FooTestUnsignedQualifier(uint unsigned_param) {
			regress_foo_test_unsigned_qualifier(unsigned_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_test_unsigned_type(uint unsigned_param);

		public static void FooTestUnsignedType(uint unsigned_param) {
			regress_foo_test_unsigned_type(unsigned_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_func_obj_null_in(IntPtr obj);

		public static void FuncObjNullIn(Regress.TestObj obj) {
			regress_func_obj_null_in(obj == null ? IntPtr.Zero : obj.Handle);
		}

		public static void FuncObjNullIn() {
			FuncObjNullIn (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_func_obj_nullable_in(IntPtr obj);

		public static void FuncObjNullableIn(Regress.TestObj obj) {
			regress_func_obj_nullable_in(obj == null ? IntPtr.Zero : obj.Handle);
		}

		public static void FuncObjNullableIn() {
			FuncObjNullableIn (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_get_variant();

		public static GLib.Variant Variant { 
			get {
				IntPtr raw_ret = regress_get_variant();
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_global_get_flags_out(out int v);

		public static Regress.TestFlags GetFlagsOut() {
			Regress.TestFlags v;
			int native_v;
			regress_global_get_flags_out(out native_v);
			v = (Regress.TestFlags) native_v;
			return v;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_has_parameter_named_attrs(int foo, IntPtr[] attributes);

		public static void HasParameterNamedAttrs(int foo, IntPtr[] attributes) {
			regress_has_parameter_named_attrs(foo, attributes);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_introspectable_via_alias(IntPtr data);

		public static void IntrospectableViaAlias(GLib.PtrArray data) {
			regress_introspectable_via_alias(data == null ? IntPtr.Zero : data.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_set_abort_on_error(bool abort_on_error);

		public static bool AbortOnError { 
			set {
				regress_set_abort_on_error(value);
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_abc_error_quark();

		public static int TestAbcErrorQuark() {
			int raw_ret = regress_test_abc_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_callback(RegressSharp.TestCallbackArrayNative cb);

		public static int TestArrayCallback(Regress.TestCallbackArray cb) {
			RegressSharp.TestCallbackArrayWrapper cb_wrapper = new RegressSharp.TestCallbackArrayWrapper (cb);
			int raw_ret = regress_test_array_callback(cb_wrapper.NativeDelegate);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_fixed_out_objects(out IntPtr[] objs);

		public static Regress.TestObj[] TestArrayFixedOutObjects() {
			Regress.TestObj[] objs;
			objs = new IntPtr[2];
			regress_test_array_fixed_out_objects(out native_objs);
			return objs;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_fixed_size_int_in(int[] ints);

		public static int TestArrayFixedSizeIntIn(int[] ints) {
			int raw_ret = regress_test_array_fixed_size_int_in(ints);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_fixed_size_int_out(out int[] ints);

		public static int[] TestArrayFixedSizeIntOut() {
			int[] ints;
			ints = new int[5];
			regress_test_array_fixed_size_int_out(out ints);
			return ints;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_gint16_in(int n_ints, short[] ints);

		public static int TestArrayGint16In(short[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			int raw_ret = regress_test_array_gint16_in(cnt_ints,  ints);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_gint32_in(int n_ints, int[] ints);

		public static int TestArrayGint32In(int[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			int raw_ret = regress_test_array_gint32_in(cnt_ints,  ints);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern long regress_test_array_gint64_in(int n_ints, long[] ints);

		public static long TestArrayGint64In(long[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			long raw_ret = regress_test_array_gint64_in(cnt_ints,  ints);
			long ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_gint8_in(int n_ints, sbyte[] ints);

		public static int TestArrayGint8In(sbyte[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			int raw_ret = regress_test_array_gint8_in(cnt_ints,  ints);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_array_gtype_in(int n_types, IntPtr[] types);

		public static string TestArrayGtypeIn(GLib.GType[] types) {
			int cnt_types = types == null ? 0 : types.Length;
			IntPtr[] native_types = new IntPtr [cnt_types];
			for (int i = 0; i < cnt_types; i++)
				native_types [i] = types[i].Val;
			IntPtr raw_ret = regress_test_array_gtype_in(cnt_types,  native_types);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_inout_callback(RegressSharp.TestCallbackArrayInOutNative cb);

		public static int TestArrayInoutCallback(Regress.TestCallbackArrayInOut cb) {
			RegressSharp.TestCallbackArrayInOutWrapper cb_wrapper = new RegressSharp.TestCallbackArrayInOutWrapper (cb);
			int raw_ret = regress_test_array_inout_callback(cb_wrapper.NativeDelegate);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_array_int_in(int n_ints, int[] ints);

		public static int TestArrayIntIn(int[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			int raw_ret = regress_test_array_int_in(cnt_ints,  ints);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_int_inout(ref int n_ints, ref int[] ints);

		public static void TestArrayIntInout(ref int[] ints) {
			int cnt_ints = (ints == null ? 0 : ints.Length);
			regress_test_array_int_inout(ref cnt_ints,  ref ints);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_int_null_in(int[] arr, int len);

		public static void TestArrayIntNullIn(int[] arr, int len) {
			regress_test_array_int_null_in(arr, len);
		}

		public static void TestArrayIntNullIn(int len) {
			TestArrayIntNullIn (null, len);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_int_null_out(out int[] arr, out int len);

		public static void TestArrayIntNullOut(out int[] arr, out int len) {
			regress_test_array_int_null_out(out arr, out len);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_int_out(out int n_ints, out int[] ints);

		public static int[] TestArrayIntOut() {
			int[] ints;
			int cnt_ints = (ints == null ? 0 : ints.Length);
			regress_test_array_int_out(out cnt_ints,  out ints);
			return ints;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_static_in_int(int[] x);

		public static void TestArrayStaticInInt(int[] x) {
			regress_test_array_static_in_int(x);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_in_full(Regress.TestStructA[] arr, UIntPtr len);

		public static void TestArrayStructInFull(Regress.TestStructA[] arr, ulong len) {
			regress_test_array_struct_in_full(arr, new UIntPtr (len));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_in_none(Regress.TestStructA[] arr, UIntPtr len);

		public static void TestArrayStructInNone(Regress.TestStructA[] arr, ulong len) {
			regress_test_array_struct_in_none(arr, new UIntPtr (len));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_out(out Regress.TestStructA[] arr, out int len);

		public static void TestArrayStructOut(out Regress.TestStructA[] arr, out int len) {
			regress_test_array_struct_out(out arr, out len);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_out_caller_alloc(out Regress.TestStructA[] arr, out UIntPtr len);

		public static void TestArrayStructOutCallerAlloc(out Regress.TestStructA[] arr, out ulong len) {
			UIntPtr native_len;
			regress_test_array_struct_out_caller_alloc(out arr, out native_len);
			len = (ulong) native_len;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_out_container(out Regress.TestStructA[] arr, out UIntPtr len);

		public static void TestArrayStructOutContainer(out Regress.TestStructA[] arr, out ulong len) {
			UIntPtr native_len;
			regress_test_array_struct_out_container(out arr, out native_len);
			len = (ulong) native_len;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_out_full_fixed(out Regress.TestStructA[] arr);

		public static Regress.TestStructA[] TestArrayStructOutFullFixed() {
			Regress.TestStructA[] arr;
			arr = new Regress.TestStructA[4];
			regress_test_array_struct_out_full_fixed(out arr);
			return arr;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_array_struct_out_none(out Regress.TestStructA[] arr, out UIntPtr len);

		public static void TestArrayStructOutNone(out Regress.TestStructA[] arr, out ulong len) {
			UIntPtr native_len;
			regress_test_array_struct_out_none(out arr, out native_len);
			len = (ulong) native_len;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool regress_test_boolean(bool in_param);

		public static bool TestBoolean(bool in_param) {
			bool raw_ret = regress_test_boolean(in_param);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool regress_test_boolean_false(bool in_param);

		public static bool TestBooleanFalse(bool in_param) {
			bool raw_ret = regress_test_boolean_false(in_param);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool regress_test_boolean_true(bool in_param);

		public static bool TestBooleanTrue(bool in_param) {
			bool raw_ret = regress_test_boolean_true(in_param);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_boxeds_not_a_method(IntPtr boxed);

		public static void TestBoxedsNotAMethod(Regress.TestBoxed boxed) {
			IntPtr native_boxed = GLib.Marshaller.StructureToPtrAlloc (boxed);
			regress_test_boxeds_not_a_method(native_boxed);
			Marshal.FreeHGlobal (native_boxed);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_boxeds_not_a_static();

		public static void TestBoxedsNotAStatic() {
			regress_test_boxeds_not_a_static();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback(RegressSharp.TestCallbackNative cb);

		public static int TestCallback(Regress.TestCallback cb) {
			RegressSharp.TestCallbackWrapper cb_wrapper = new RegressSharp.TestCallbackWrapper (cb);
			int raw_ret = regress_test_callback(cb_wrapper.NativeDelegate);
			int ret = raw_ret;
			return ret;
		}

		public static int TestCallback() {
			return TestCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_callback_async(RegressSharp.TestCallbackUserDataNative cb, IntPtr user_data);

		public static void TestCallbackAsync(Regress.TestCallbackUserData cb) {
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			regress_test_callback_async(cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback_destroy_notify(RegressSharp.TestCallbackUserDataNative cb, IntPtr user_data, GLib.DestroyNotify notify);

		public static int TestCallbackDestroyNotify(Regress.TestCallbackUserData cb) {
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			IntPtr user_data;
			GLib.DestroyNotify notify;
			if (cb == null) {
				user_data = IntPtr.Zero;
				notify = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				notify = GLib.DestroyHelper.NotifyHandler;
			}
			int raw_ret = regress_test_callback_destroy_notify(cb_wrapper.NativeDelegate, user_data, notify);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback_destroy_notify_no_user_data(RegressSharp.TestCallbackUserDataNative cb, GLib.DestroyNotify notify);

		public static int TestCallbackDestroyNotifyNoUserData(Regress.TestCallbackUserData cb) {
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			GLib.DestroyNotify notify;
			if (cb == null) {
				notify = null;
			} else {
				notify = GLib.DestroyHelper.NotifyHandler;
			}
			int raw_ret = regress_test_callback_destroy_notify_no_user_data(cb_wrapper.NativeDelegate, notify);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_callback_return_full(RegressSharp.TestCallbackReturnFullNative cb);

		public static void TestCallbackReturnFull(Regress.TestCallbackReturnFull cb) {
			RegressSharp.TestCallbackReturnFullWrapper cb_wrapper = new RegressSharp.TestCallbackReturnFullWrapper (cb);
			regress_test_callback_return_full(cb_wrapper.NativeDelegate);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback_thaw_async();

		public static int TestCallbackThawAsync() {
			int raw_ret = regress_test_callback_thaw_async();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback_thaw_notifications();

		public static int TestCallbackThawNotifications() {
			int raw_ret = regress_test_callback_thaw_notifications();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_callback_user_data(RegressSharp.TestCallbackUserDataNative cb, IntPtr user_data);

		public static int TestCallbackUserData(Regress.TestCallbackUserData cb) {
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			int raw_ret = regress_test_callback_user_data(cb_wrapper.NativeDelegate, IntPtr.Zero);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_closure(IntPtr closure);

		public static int TestClosure(IntPtr closure) {
			int raw_ret = regress_test_closure(closure);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_closure_one_arg(IntPtr closure, int arg);

		public static int TestClosureOneArg(IntPtr closure, int arg) {
			int raw_ret = regress_test_closure_one_arg(closure, arg);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_closure_variant(IntPtr closure, IntPtr arg);

		public static GLib.Variant TestClosureVariant(IntPtr closure, GLib.Variant arg) {
			IntPtr raw_ret = regress_test_closure_variant(closure, arg == null ? IntPtr.Zero : arg.Handle);
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		public static GLib.Variant TestClosureVariant(IntPtr closure) {
			return TestClosureVariant (closure, null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_create_fundamental_hidden_class_instance();

		public static Regress.TestFundamentalObject TestCreateFundamentalHiddenClassInstance() {
			IntPtr raw_ret = regress_test_create_fundamental_hidden_class_instance();
			Regress.TestFundamentalObject ret = raw_ret == IntPtr.Zero ? null : (Regress.TestFundamentalObject) GLib.Opaque.GetOpaque (raw_ret, typeof (Regress.TestFundamentalObject), true);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_date_in_gvalue();

		public static GLib.Value TestDateInGvalue() {
			IntPtr raw_ret = regress_test_date_in_gvalue();
			GLib.Value ret = (GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (GLib.Value));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_def_error_quark();

		public static int TestDefErrorQuark() {
			int raw_ret = regress_test_def_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern double regress_test_double(double in_param);

		public static double TestDouble(double in_param) {
			double raw_ret = regress_test_double(in_param);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_enum_param(int e);

		public static string TestEnumParam(Regress.TestEnum e) {
			IntPtr raw_ret = regress_test_enum_param((int) e);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_error_quark();

		public static int TestErrorQuark() {
			int raw_ret = regress_test_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_filename_return();

		public static string[] TestFilenameReturn() {
			IntPtr raw_ret = regress_test_filename_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(GLib.ListBase.FilenameString));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern float regress_test_float(float in_param);

		public static float TestFloat(float in_param) {
			float raw_ret = regress_test_float(in_param);
			float ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_gerror_callback(RegressSharp.TestCallbackGErrorNative cb);

		public static void TestGerrorCallback(Regress.TestCallbackGError cb) {
			RegressSharp.TestCallbackGErrorWrapper cb_wrapper = new RegressSharp.TestCallbackGErrorWrapper (cb);
			regress_test_gerror_callback(cb_wrapper.NativeDelegate);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_container_return();

		public static string[] TestGhashContainerReturn() {
			System.IntPtr raw_ret = regress_test_ghash_container_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), false, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_everything_return();

		public static string[] TestGhashEverythingReturn() {
			System.IntPtr raw_ret = regress_test_ghash_everything_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), true, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_ghash_gvalue_in(System.IntPtr hash);

		public static void TestGhashGvalueIn(System.IntPtr hash) {
			regress_test_ghash_gvalue_in(hash);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_gvalue_return();

		public static string[] TestGhashGvalueReturn() {
			System.IntPtr raw_ret = regress_test_ghash_gvalue_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_nested_everything_return();

		public static string[] TestGhashNestedEverythingReturn() {
			System.IntPtr raw_ret = regress_test_ghash_nested_everything_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), true, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_nested_everything_return2();

		public static string[] TestGhashNestedEverythingReturn2() {
			System.IntPtr raw_ret = regress_test_ghash_nested_everything_return2();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), true, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_ghash_nothing_in(System.IntPtr in_param);

		public static void TestGhashNothingIn(System.IntPtr in_param) {
			regress_test_ghash_nothing_in(in_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_ghash_nothing_in2(System.IntPtr in_param);

		public static void TestGhashNothingIn2(System.IntPtr in_param) {
			regress_test_ghash_nothing_in2(in_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_nothing_return();

		public static string[] TestGhashNothingReturn() {
			System.IntPtr raw_ret = regress_test_ghash_nothing_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_nothing_return2();

		public static string[] TestGhashNothingReturn2() {
			System.IntPtr raw_ret = regress_test_ghash_nothing_return2();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_ghash_null_in(System.IntPtr in_param);

		public static void TestGhashNullIn(System.IntPtr in_param) {
			regress_test_ghash_null_in(in_param);
		}

		public static void TestGhashNullIn() {
			TestGhashNullIn (IntPtr.Zero);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_ghash_null_out(out System.IntPtr out_param);

		public static System.IntPtr TestGhashNullOut() {
			System.IntPtr out_param;
			regress_test_ghash_null_out(out out_param);
			return out_param;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern System.IntPtr regress_test_ghash_null_return();

		public static string[] TestGhashNullReturn() {
			System.IntPtr raw_ret = regress_test_ghash_null_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(System.IntPtr), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_glist_container_return();

		public static string[] TestGlistContainerReturn() {
			IntPtr raw_ret = regress_test_glist_container_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_glist_everything_return();

		public static string[] TestGlistEverythingReturn() {
			IntPtr raw_ret = regress_test_glist_everything_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_glist_gtype_container_in(IntPtr in_param);

		public static void TestGlistGtypeContainerIn(GLib.List in_param) {
			regress_test_glist_gtype_container_in(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_glist_nothing_in(IntPtr in_param);

		public static void TestGlistNothingIn(GLib.List in_param) {
			regress_test_glist_nothing_in(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_glist_nothing_in2(IntPtr in_param);

		public static void TestGlistNothingIn2(GLib.List in_param) {
			regress_test_glist_nothing_in2(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_glist_nothing_return();

		public static string[] TestGlistNothingReturn() {
			IntPtr raw_ret = regress_test_glist_nothing_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_glist_nothing_return2();

		public static string[] TestGlistNothingReturn2() {
			IntPtr raw_ret = regress_test_glist_nothing_return2();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_glist_null_in(IntPtr in_param);

		public static void TestGlistNullIn(GLib.SList in_param) {
			regress_test_glist_null_in(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		public static void TestGlistNullIn() {
			TestGlistNullIn (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_glist_null_out(out IntPtr out_list);

		public static GLib.SList TestGlistNullOut() {
			GLib.SList out_list;
			IntPtr native_out_list;
			regress_test_glist_null_out(out native_out_list);
			out_list = new GLib.SList(native_out_list);
			return out_list;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gslist_container_return();

		public static string[] TestGslistContainerReturn() {
			IntPtr raw_ret = regress_test_gslist_container_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gslist_everything_return();

		public static string[] TestGslistEverythingReturn() {
			IntPtr raw_ret = regress_test_gslist_everything_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_gslist_nothing_in(IntPtr in_param);

		public static void TestGslistNothingIn(GLib.SList in_param) {
			regress_test_gslist_nothing_in(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_gslist_nothing_in2(IntPtr in_param);

		public static void TestGslistNothingIn2(GLib.SList in_param) {
			regress_test_gslist_nothing_in2(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gslist_nothing_return();

		public static string[] TestGslistNothingReturn() {
			IntPtr raw_ret = regress_test_gslist_nothing_return();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gslist_nothing_return2();

		public static string[] TestGslistNothingReturn2() {
			IntPtr raw_ret = regress_test_gslist_nothing_return2();
			string[] ret = (string[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(string));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_gslist_null_in(IntPtr in_param);

		public static void TestGslistNullIn(GLib.SList in_param) {
			regress_test_gslist_null_in(in_param == null ? IntPtr.Zero : in_param.Handle);
		}

		public static void TestGslistNullIn() {
			TestGslistNullIn (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_gslist_null_out(out IntPtr out_list);

		public static GLib.SList TestGslistNullOut() {
			GLib.SList out_list;
			IntPtr native_out_list;
			regress_test_gslist_null_out(out native_out_list);
			out_list = new GLib.SList(native_out_list);
			return out_list;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gtype(IntPtr in_param);

		public static GLib.GType TestGtype(GLib.GType in_param) {
			IntPtr raw_ret = regress_test_gtype(in_param.Val);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gvariant_as();

		public static GLib.Variant TestGvariantAs() {
			IntPtr raw_ret = regress_test_gvariant_as();
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gvariant_asv();

		public static GLib.Variant TestGvariantAsv() {
			IntPtr raw_ret = regress_test_gvariant_asv();
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gvariant_i();

		public static GLib.Variant TestGvariantI() {
			IntPtr raw_ret = regress_test_gvariant_i();
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gvariant_s();

		public static GLib.Variant TestGvariantS() {
			IntPtr raw_ret = regress_test_gvariant_s();
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_gvariant_v();

		public static GLib.Variant TestGvariantV() {
			IntPtr raw_ret = regress_test_gvariant_v();
			GLib.Variant ret = new GLib.Variant(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_hash_table_callback(System.IntPtr data, RegressSharp.TestCallbackHashtableNative cb);

		public static void TestHashTableCallback(System.IntPtr data, Regress.TestCallbackHashtable cb) {
			RegressSharp.TestCallbackHashtableWrapper cb_wrapper = new RegressSharp.TestCallbackHashtableWrapper (cb);
			regress_test_hash_table_callback(data, cb_wrapper.NativeDelegate);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_int(int in_param);

		public static int TestInt(int in_param) {
			int raw_ret = regress_test_int(in_param);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern short regress_test_int16(short in_param);

		public static short TestInt16(short in_param) {
			short raw_ret = regress_test_int16(in_param);
			short ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_int32(int in_param);

		public static int TestInt32(int in_param) {
			int raw_ret = regress_test_int32(in_param);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern long regress_test_int64(long in_param);

		public static long TestInt64(long in_param) {
			long raw_ret = regress_test_int64(in_param);
			long ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern sbyte regress_test_int8(sbyte in_param);

		public static sbyte TestInt8(sbyte in_param) {
			sbyte raw_ret = regress_test_int8(in_param);
			sbyte ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_int_out_utf8(out int length, IntPtr in_param);

		public static int TestIntOutUtf8(string in_param) {
			int length;
			IntPtr native_in_param = GLib.Marshaller.StringToPtrGStrdup (in_param);
			regress_test_int_out_utf8(out length, native_in_param);
			GLib.Marshaller.Free (native_in_param);
			return length;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_int_value_arg(IntPtr v);

		public static int TestIntValueArg(GLib.Value v) {
			IntPtr native_v = GLib.Marshaller.StructureToPtrAlloc (v);
			int raw_ret = regress_test_int_value_arg(native_v);
			int ret = raw_ret;
			Marshal.FreeHGlobal (native_v);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_long(IntPtr in_param);

		public static long TestLong(long in_param) {
			IntPtr raw_ret = regress_test_long(new IntPtr (in_param));
			long ret = (long) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_multi_callback(RegressSharp.TestCallbackNative cb);

		public static int TestMultiCallback(Regress.TestCallback cb) {
			RegressSharp.TestCallbackWrapper cb_wrapper = new RegressSharp.TestCallbackWrapper (cb);
			int raw_ret = regress_test_multi_callback(cb_wrapper.NativeDelegate);
			int ret = raw_ret;
			return ret;
		}

		public static int TestMultiCallback() {
			return TestMultiCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_multi_double_args(double in_param, out double one, out double two);

		public static void TestMultiDoubleArgs(double in_param, out double one, out double two) {
			regress_test_multi_double_args(in_param, out one, out two);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_multiline_doc_comments();

		public static void TestMultilineDocComments() {
			regress_test_multiline_doc_comments();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_nested_parameter(int a);

		public static void TestNestedParameter(int a) {
			regress_test_nested_parameter(a);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_noptr_callback(RegressSharp.TestNoPtrCallbackNative cb);

		public static void TestNoptrCallback(Regress.TestNoPtrCallback cb) {
			RegressSharp.TestNoPtrCallbackWrapper cb_wrapper = new RegressSharp.TestNoPtrCallbackWrapper (cb);
			regress_test_noptr_callback(cb_wrapper.NativeDelegate);
		}

		public static void TestNoptrCallback() {
			TestNoptrCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_null_gerror_callback(RegressSharp.TestCallbackGErrorNative cb);

		public static void TestNullGerrorCallback(Regress.TestCallbackGError cb) {
			RegressSharp.TestCallbackGErrorWrapper cb_wrapper = new RegressSharp.TestCallbackGErrorWrapper (cb);
			regress_test_null_gerror_callback(cb_wrapper.NativeDelegate);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_null_strv_in_gvalue();

		public static GLib.Value TestNullStrvInGvalue() {
			IntPtr raw_ret = regress_test_null_strv_in_gvalue();
			GLib.Value ret = (GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (GLib.Value));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_owned_gerror_callback(RegressSharp.TestCallbackOwnedGErrorNative cb);

		public static void TestOwnedGerrorCallback(Regress.TestCallbackOwnedGError cb) {
			RegressSharp.TestCallbackOwnedGErrorWrapper cb_wrapper = new RegressSharp.TestCallbackOwnedGErrorWrapper (cb);
			regress_test_owned_gerror_callback(cb_wrapper.NativeDelegate);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_return_allow_none();

		public static string TestReturnAllowNone() {
			IntPtr raw_ret = regress_test_return_allow_none();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_return_nullable();

		public static string TestReturnNullable() {
			IntPtr raw_ret = regress_test_return_nullable();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern short regress_test_short(short in_param);

		public static short TestShort(short in_param) {
			short raw_ret = regress_test_short(in_param);
			short ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_simple_boxed_a_const_return();

		public static Regress.TestSimpleBoxedA TestSimpleBoxedAConstReturn() {
			IntPtr raw_ret = regress_test_simple_boxed_a_const_return();
			Regress.TestSimpleBoxedA ret = Regress.TestSimpleBoxedA.New (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_simple_callback(RegressSharp.TestSimpleCallbackNative cb);

		public static void TestSimpleCallback(Regress.TestSimpleCallback cb) {
			RegressSharp.TestSimpleCallbackWrapper cb_wrapper = new RegressSharp.TestSimpleCallbackWrapper (cb);
			regress_test_simple_callback(cb_wrapper.NativeDelegate);
		}

		public static void TestSimpleCallback() {
			TestSimpleCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr regress_test_size(UIntPtr in_param);

		public static ulong TestSize(ulong in_param) {
			UIntPtr raw_ret = regress_test_size(new UIntPtr (in_param));
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_ssize(IntPtr in_param);

		public static long TestSsize(long in_param) {
			IntPtr raw_ret = regress_test_ssize(new IntPtr (in_param));
			long ret = (long) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_struct_a_parse(IntPtr a_out, IntPtr str1ng);

		public static Regress.TestStructA TestStructAParse(string str1ng) {
			Regress.TestStructA a_out;
			IntPtr native_a_out = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Regress.TestStructA)));
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			regress_test_struct_a_parse(native_a_out, native_str1ng);
			a_out = Regress.TestStructA.New (native_a_out);
			Marshal.FreeHGlobal (native_a_out);
			GLib.Marshaller.Free (native_str1ng);
			return a_out;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool regress_test_strv_in(IntPtr[] arr);

		public static bool TestStrvIn(string[] arr) {
			int cnt_arr = arr == null ? 0 : arr.Length;
			IntPtr[] native_arr = new IntPtr [cnt_arr + 1];
			for (int i = 0; i < cnt_arr; i++)
				native_arr [i] = GLib.Marshaller.StringToPtrGStrdup(arr[i]);
			native_arr [cnt_arr] = IntPtr.Zero;
			bool raw_ret = regress_test_strv_in(native_arr);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_strv_in_gvalue();

		public static GLib.Value TestStrvInGvalue() {
			IntPtr raw_ret = regress_test_strv_in_gvalue();
			GLib.Value ret = (GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (GLib.Value));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_strv_out();

		public static string[] TestStrvOut() {
			IntPtr raw_ret = regress_test_strv_out();
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_strv_out_container();

		public static string[] TestStrvOutContainer() {
			IntPtr raw_ret = regress_test_strv_out_container();
			string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_strv_outarg(out IntPtr[] retp);

		public static string[] TestStrvOutarg() {
			string[] retp;
			int cnt_retp = retp == null ? 0 : retp.Length;
			IntPtr[] native_retp = new IntPtr [cnt_retp + 1];
			for (int i = 0; i < cnt_retp; i++)
				native_retp [i] = GLib.Marshaller.StringToPtrGStrdup(retp[i]);
			native_retp [cnt_retp] = IntPtr.Zero;
			regress_test_strv_outarg(out native_retp);
			return retp;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_timet(IntPtr in_param);

		public static long TestTimet(long in_param) {
			IntPtr raw_ret = regress_test_timet(new IntPtr (in_param));
			long ret = (long) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_torture_signature_0(int x, out double y, out int z, IntPtr foo, out int q, uint m);

		public static void TestTortureSignature0(int x, out double y, out int z, string foo, out int q, uint m) {
			IntPtr native_foo = GLib.Marshaller.StringToPtrGStrdup (foo);
			regress_test_torture_signature_0(x, out y, out z, native_foo, out q, m);
			GLib.Marshaller.Free (native_foo);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_torture_signature_1(int x, out double y, out int z, IntPtr foo, out int q, uint m, out IntPtr error);

		public static unsafe bool TestTortureSignature1(int x, out double y, out int z, string foo, out int q, uint m) {
			IntPtr native_foo = GLib.Marshaller.StringToPtrGStrdup (foo);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_torture_signature_1(x, out y, out z, native_foo, out q, m, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_foo);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_torture_signature_2(int x, RegressSharp.TestCallbackUserDataNative cb, IntPtr user_data, GLib.DestroyNotify notify, out double y, out int z, IntPtr foo, out int q, uint m);

		public static void TestTortureSignature2(int x, Regress.TestCallbackUserData cb, out double y, out int z, string foo, out int q, uint m) {
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			IntPtr user_data;
			GLib.DestroyNotify notify;
			if (cb == null) {
				user_data = IntPtr.Zero;
				notify = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				notify = GLib.DestroyHelper.NotifyHandler;
			}
			IntPtr native_foo = GLib.Marshaller.StringToPtrGStrdup (foo);
			regress_test_torture_signature_2(x, cb_wrapper.NativeDelegate, user_data, notify, out y, out z, native_foo, out q, m);
			GLib.Marshaller.Free (native_foo);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint regress_test_uint(uint in_param);

		public static uint TestUint(uint in_param) {
			uint raw_ret = regress_test_uint(in_param);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort regress_test_uint16(ushort in_param);

		public static ushort TestUint16(ushort in_param) {
			ushort raw_ret = regress_test_uint16(in_param);
			ushort ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint regress_test_uint32(uint in_param);

		public static uint TestUint32(uint in_param) {
			uint raw_ret = regress_test_uint32(in_param);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong regress_test_uint64(ulong in_param);

		public static ulong TestUint64(ulong in_param) {
			ulong raw_ret = regress_test_uint64(in_param);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern byte regress_test_uint8(byte in_param);

		public static byte TestUint8(byte in_param) {
			byte raw_ret = regress_test_uint8(in_param);
			byte ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr regress_test_ulong(UIntPtr in_param);

		public static ulong TestUlong(ulong in_param) {
			UIntPtr raw_ret = regress_test_ulong(new UIntPtr (in_param));
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_unconventional_error_quark();

		public static int TestUnconventionalErrorQuark() {
			int raw_ret = regress_test_unconventional_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern uint regress_test_unichar(uint in_param);

		public static char TestUnichar(char in_param) {
			uint raw_ret = regress_test_unichar(GLib.Marshaller.CharToGUnichar (in_param));
			char ret = GLib.Marshaller.GUnicharToChar (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_unsigned_enum_param(int e);

		public static string TestUnsignedEnumParam(Regress.TestEnumUnsigned e) {
			IntPtr raw_ret = regress_test_unsigned_enum_param((int) e);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ushort regress_test_ushort(ushort in_param);

		public static ushort TestUshort(ushort in_param) {
			ushort raw_ret = regress_test_ushort(in_param);
			ushort ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_const_in(IntPtr in_param);

		public static void TestUtf8ConstIn(string in_param) {
			IntPtr native_in_param = GLib.Marshaller.StringToPtrGStrdup (in_param);
			regress_test_utf8_const_in(native_in_param);
			GLib.Marshaller.Free (native_in_param);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_utf8_const_return();

		public static string TestUtf8ConstReturn() {
			IntPtr raw_ret = regress_test_utf8_const_return();
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_inout(ref IntPtr inout);

		public static void TestUtf8Inout(ref string inout) {
			IntPtr native_inout = (IntPtr) inout;
			regress_test_utf8_inout(ref native_inout);
			inout = GLib.Marshaller.PtrToStringGFree(native_inout);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_utf8_nonconst_return();

		public static string TestUtf8NonconstReturn() {
			IntPtr raw_ret = regress_test_utf8_nonconst_return();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_null_in(IntPtr in_param);

		public static void TestUtf8NullIn(string in_param) {
			IntPtr native_in_param = GLib.Marshaller.StringToPtrGStrdup (in_param);
			regress_test_utf8_null_in(native_in_param);
			GLib.Marshaller.Free (native_in_param);
		}

		public static void TestUtf8NullIn() {
			TestUtf8NullIn (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_null_out(out IntPtr char_out);

		public static string TestUtf8NullOut() {
			string char_out;
			IntPtr native_char_out;
			regress_test_utf8_null_out(out native_char_out);
			char_out = GLib.Marshaller.PtrToStringGFree(native_char_out);
			return char_out;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_out(out IntPtr out_param);

		public static string TestUtf8Out() {
			string out_param;
			IntPtr native_out_param;
			regress_test_utf8_out(out native_out_param);
			out_param = GLib.Marshaller.PtrToStringGFree(native_out_param);
			return out_param;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_utf8_out_nonconst_return(out IntPtr out_param);

		public static string TestUtf8OutNonconstReturn(out string out_param) {
			IntPtr native_out_param;
			IntPtr raw_ret = regress_test_utf8_out_nonconst_return(out native_out_param);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			out_param = GLib.Marshaller.PtrToStringGFree(native_out_param);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_utf8_out_out(out IntPtr out0, out IntPtr out1);

		public static void TestUtf8OutOut(out string out0, out string out1) {
			IntPtr native_out0;
			IntPtr native_out1;
			regress_test_utf8_out_out(out native_out0, out native_out1);
			out0 = GLib.Marshaller.PtrToStringGFree(native_out0);
			out1 = GLib.Marshaller.PtrToStringGFree(native_out1);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_value_return(int i);

		public static GLib.Value TestValueReturn(int i) {
			IntPtr raw_ret = regress_test_value_return(i);
			GLib.Value ret = (GLib.Value) Marshal.PtrToStructure (raw_ret, typeof (GLib.Value));
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_versioning();

		[Obsolete]
		public static void TestVersioning() {
			regress_test_versioning();
		}

#endregion
	}
}
