// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int AnnotationCallbackNative(int in_param);

	internal class AnnotationCallbackInvoker {

		AnnotationCallbackNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~AnnotationCallbackInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal AnnotationCallbackInvoker (AnnotationCallbackNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal AnnotationCallbackInvoker (AnnotationCallbackNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal AnnotationCallbackInvoker (AnnotationCallbackNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.AnnotationCallback Handler {
			get {
				return new Regress.AnnotationCallback(InvokeNative);
			}
		}

		int InvokeNative (int in_param)
		{
			int __result = native_cb (in_param);
			return __result;
		}
	}

	internal class AnnotationCallbackWrapper {

		public int NativeCallback (int in_param)
		{
			try {
				int __ret = managed (in_param);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal AnnotationCallbackNative NativeDelegate;
		Regress.AnnotationCallback managed;

		public AnnotationCallbackWrapper (Regress.AnnotationCallback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new AnnotationCallbackNative (NativeCallback);
		}

		public static Regress.AnnotationCallback GetManagedDelegate (AnnotationCallbackNative native)
		{
			if (native == null)
				return null;
			AnnotationCallbackWrapper wrapper = (AnnotationCallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
