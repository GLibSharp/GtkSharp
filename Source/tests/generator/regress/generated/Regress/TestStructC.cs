// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructC : IEquatable<TestStructC> {

		public int AnotherInt;
		public GLib.Object Obj;

		public static Regress.TestStructC Zero = new Regress.TestStructC ();

		public static Regress.TestStructC New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructC.Zero;
			return (Regress.TestStructC) Marshal.PtrToStructure (raw, typeof (Regress.TestStructC));
		}

		public bool Equals (TestStructC other)
		{
			return true && AnotherInt.Equals (other.AnotherInt) && Obj.Equals (other.Obj);
		}

		public override bool Equals (object other)
		{
			return other is TestStructC && Equals ((TestStructC) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ AnotherInt.GetHashCode () ^ Obj.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
