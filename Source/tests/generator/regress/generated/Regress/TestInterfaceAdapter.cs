// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TestInterfaceAdapter : GLib.GInterfaceAdapter, Regress.ITestInterface {

		[StructLayout (LayoutKind.Sequential)]
		struct RegressTestInterfaceIface {
		}

		static RegressTestInterfaceIface iface;

		static TestInterfaceAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (TestInterfaceAdapter));
		}

		static void Initialize (IntPtr ptr, IntPtr data)
		{
		}

		GLib.Object implementor;

		public TestInterfaceAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public TestInterfaceAdapter (ITestInterfaceImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public TestInterfaceAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_interface_get_type();

		private static GLib.GType _gtype = new GLib.GType (regress_test_interface_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ITestInterface GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ITestInterface GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ITestInterfaceImplementor)
				return new TestInterfaceAdapter (obj as ITestInterfaceImplementor);
			else if (obj as ITestInterface == null)
				return new TestInterfaceAdapter (obj.Handle);
			else
				return obj as ITestInterface;
		}

		public ITestInterfaceImplementor Implementor {
			get {
				return implementor as ITestInterfaceImplementor;
			}
		}

		[GLib.Property ("number")]
		public int Number {
			get {
				GLib.Value val = implementor.GetProperty ("number");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				implementor.SetProperty("number", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("interface-signal")]
		public event Regress.InterfaceSignalHandler InterfaceSignal {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("interface-signal", value, typeof (Regress.InterfaceSignalArgs));
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("interface-signal", value);
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_interface_emit_signal(IntPtr raw);

		public void EmitSignal() {
			regress_test_interface_emit_signal(Handle);
		}

#endregion
	}
}
