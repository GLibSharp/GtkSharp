// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

	#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FooThingWithArray : IEquatable<FooThingWithArray> {

		public int X;
		public int Y;
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
		public string[] Lines;
		public byte Data;

		public static Regress.FooThingWithArray Zero = new Regress.FooThingWithArray();

		public static Regress.FooThingWithArray New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.FooThingWithArray.Zero;
			return (Regress.FooThingWithArray)Marshal.PtrToStructure(raw, typeof(Regress.FooThingWithArray));
		}

		public bool Equals(FooThingWithArray other) {
			return true && X.Equals(other.X) && Y.Equals(other.Y) && Lines.Equals(other.Lines) && Data.Equals(other.Data);
		}

		public override bool Equals(object other) {
			return other is FooThingWithArray && Equals((FooThingWithArray)other);
		}

		public override int GetHashCode() {
			return this.GetType().FullName.GetHashCode() ^ X.GetHashCode() ^ Y.GetHashCode() ^ Lines.GetHashCode() ^ Data.GetHashCode();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
		#endregion
	}
}