// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

	#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructD : IEquatable<TestStructD> {

		private IntPtr Array1Ptr;
		public Regress.TestStructA[] Array1 {
			get { return GLib.Marshaller.StructArrayFromNullTerminatedIntPtr<Regress.TestStructA>(Array1Ptr); }
			set { Array1Ptr = GLib.Marshaller.StructArrayToNullTerminatedStructArrayIntPtr<Regress.TestStructA>(value); }
		}
		private IntPtr Array2Ptr;
		public IntPtr[] Array2 {
			get { return GLib.Marshaller.StructArrayFromNullTerminatedIntPtr<IntPtr>(Array2Ptr); }
			set { Array2Ptr = GLib.Marshaller.StructArrayToNullTerminatedStructArrayIntPtr<IntPtr>(value); }
		}
		private IntPtr _field;
		public Regress.TestObj Field {
			get {
				return GLib.Object.GetObject(_field) as Regress.TestObj;
			}
			set {
				_field = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _list;
		private IntPtr GarrayPtr;
		public GLib.PtrArray[] Garray {
			get { return GLib.Marshaller.StructArrayFromNullTerminatedIntPtr<GLib.PtrArray>(GarrayPtr); }
			set { GarrayPtr = GLib.Marshaller.StructArrayToNullTerminatedStructArrayIntPtr<GLib.PtrArray>(value); }
		}

		public static Regress.TestStructD Zero = new Regress.TestStructD();

		public static Regress.TestStructD New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructD.Zero;
			return (Regress.TestStructD)Marshal.PtrToStructure(raw, typeof(Regress.TestStructD));
		}

		public bool Equals(TestStructD other) {
			return true && Array1Ptr.Equals(other.Array1Ptr) && Array2Ptr.Equals(other.Array2Ptr) && Field.Equals(other.Field) && _list.Equals(other._list) && GarrayPtr.Equals(other.GarrayPtr);
		}

		public override bool Equals(object other) {
			return other is TestStructD && Equals((TestStructD)other);
		}

		public override int GetHashCode() {
			return this.GetType().FullName.GetHashCode() ^ Array1Ptr.GetHashCode() ^ Array2Ptr.GetHashCode() ^ Field.GetHashCode() ^ _list.GetHashCode() ^ GarrayPtr.GetHashCode();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
		#endregion
	}
}