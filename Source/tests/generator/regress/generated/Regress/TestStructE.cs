// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructE : IEquatable<TestStructE> {

		public GLib.GType SomeType;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		public [] SomeUnion;

		public static Regress.TestStructE Zero = new Regress.TestStructE ();

		public static Regress.TestStructE New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructE.Zero;
			return (Regress.TestStructE) Marshal.PtrToStructure (raw, typeof (Regress.TestStructE));
		}

		public bool Equals (TestStructE other)
		{
			return true && SomeType.Equals (other.SomeType) && SomeUnion.Equals (other.SomeUnion);
		}

		public override bool Equals (object other)
		{
			return other is TestStructE && Equals ((TestStructE) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ SomeType.GetHashCode () ^ SomeUnion.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
