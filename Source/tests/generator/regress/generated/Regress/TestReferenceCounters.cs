// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestReferenceCounters : IEquatable<TestReferenceCounters> {

		public int Refcount;
		public int Atomicrefcount;

		public static Regress.TestReferenceCounters Zero = new Regress.TestReferenceCounters ();

		public static Regress.TestReferenceCounters New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestReferenceCounters.Zero;
			return (Regress.TestReferenceCounters) Marshal.PtrToStructure (raw, typeof (Regress.TestReferenceCounters));
		}

		public bool Equals (TestReferenceCounters other)
		{
			return true && Refcount.Equals (other.Refcount) && Atomicrefcount.Equals (other.Atomicrefcount);
		}

		public override bool Equals (object other)
		{
			return other is TestReferenceCounters && Equals ((TestReferenceCounters) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Refcount.GetHashCode () ^ Atomicrefcount.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
