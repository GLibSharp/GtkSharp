// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void TestCallbackGErrorNative(IntPtr error);

	internal class TestCallbackGErrorInvoker {

		TestCallbackGErrorNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TestCallbackGErrorInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TestCallbackGErrorInvoker (TestCallbackGErrorNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TestCallbackGErrorInvoker (TestCallbackGErrorNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TestCallbackGErrorInvoker (TestCallbackGErrorNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.TestCallbackGError Handler {
			get {
				return new Regress.TestCallbackGError(InvokeNative);
			}
		}

		void InvokeNative (IntPtr error)
		{
			native_cb (error);
		}
	}

	internal class TestCallbackGErrorWrapper {

		public void NativeCallback (IntPtr error)
		{
			try {
				managed (error);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TestCallbackGErrorNative NativeDelegate;
		Regress.TestCallbackGError managed;

		public TestCallbackGErrorWrapper (Regress.TestCallbackGError managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TestCallbackGErrorNative (NativeCallback);
		}

		public static Regress.TestCallbackGError GetManagedDelegate (TestCallbackGErrorNative native)
		{
			if (native == null)
				return null;
			TestCallbackGErrorWrapper wrapper = (TestCallbackGErrorWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
