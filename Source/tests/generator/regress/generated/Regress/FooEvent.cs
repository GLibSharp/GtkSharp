// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Explicit)]
	public partial struct FooEvent : IEquatable<FooEvent> {

		[FieldOffset(0)]
		public int Type;
		[FieldOffset(0)]
		public Regress.FooEventAny Any;
		[FieldOffset(0)]
		public Regress.FooEventExpose Expose;

		public static Regress.FooEvent Zero = new Regress.FooEvent ();

		public static Regress.FooEvent New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.FooEvent.Zero;
			return (Regress.FooEvent) Marshal.PtrToStructure (raw, typeof (Regress.FooEvent));
		}

		public bool Equals (FooEvent other)
		{
			return true && Type.Equals (other.Type) && Any.Equals (other.Any) && Expose.Equals (other.Expose);
		}

		public override bool Equals (object other)
		{
			return other is FooEvent && Equals ((FooEvent) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Type.GetHashCode () ^ Any.GetHashCode () ^ Expose.GetHashCode ();
		}

#endregion
	}
}
