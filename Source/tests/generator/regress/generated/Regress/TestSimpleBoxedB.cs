// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestSimpleBoxedB : IEquatable<TestSimpleBoxedB> {

		public sbyte SomeInt8;
		public Regress.TestSimpleBoxedA NestedA;

		public static Regress.TestSimpleBoxedB Zero = new Regress.TestSimpleBoxedB ();

		public static Regress.TestSimpleBoxedB New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestSimpleBoxedB.Zero;
			return (Regress.TestSimpleBoxedB) Marshal.PtrToStructure (raw, typeof (Regress.TestSimpleBoxedB));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_simple_boxed_b_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_test_simple_boxed_b_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (TestSimpleBoxedB other)
		{
			return true && SomeInt8.Equals (other.SomeInt8) && NestedA.Equals (other.NestedA);
		}

		public override bool Equals (object other)
		{
			return other is TestSimpleBoxedB && Equals ((TestSimpleBoxedB) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ SomeInt8.GetHashCode () ^ NestedA.GetHashCode ();
		}

		public static explicit operator GLib.Value (Regress.TestSimpleBoxedB boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Regress.TestSimpleBoxedB.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Regress.TestSimpleBoxedB (GLib.Value val)
		{
			return (Regress.TestSimpleBoxedB) val.Val;
		}
#endregion
	}
}
