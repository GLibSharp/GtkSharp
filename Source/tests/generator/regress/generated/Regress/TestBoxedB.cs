// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestBoxedB : IEquatable<TestBoxedB> {

		public sbyte SomeInt8;
		private IntPtr some_long;
		public long SomeLong {
			get {
				return (long) some_long;
			}
			set {
				some_long = new IntPtr (value);
			}
		}

		public static Regress.TestBoxedB Zero = new Regress.TestBoxedB ();

		public static Regress.TestBoxedB New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestBoxedB.Zero;
			return (Regress.TestBoxedB) Marshal.PtrToStructure (raw, typeof (Regress.TestBoxedB));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_b_new(sbyte some_int8, IntPtr some_long);

		public static TestBoxedB New(sbyte some_int8, long some_long)
		{
			TestBoxedB result = TestBoxedB.New (regress_test_boxed_b_new(some_int8, new IntPtr (some_long)));
			return result;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_boxed_b_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_test_boxed_b_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (TestBoxedB other)
		{
			return true && SomeInt8.Equals (other.SomeInt8) && SomeLong.Equals (other.SomeLong);
		}

		public override bool Equals (object other)
		{
			return other is TestBoxedB && Equals ((TestBoxedB) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ SomeInt8.GetHashCode () ^ SomeLong.GetHashCode ();
		}

		public static explicit operator GLib.Value (Regress.TestBoxedB boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Regress.TestBoxedB.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Regress.TestBoxedB (GLib.Value val)
		{
			return (Regress.TestBoxedB) val.Val;
		}
#endregion
	}
}
