// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct FooBRect : IEquatable<FooBRect> {

		public double X;
		public double Y;

		public static Regress.FooBRect Zero = new Regress.FooBRect ();

		public static Regress.FooBRect New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.FooBRect.Zero;
			return (Regress.FooBRect) Marshal.PtrToStructure (raw, typeof (Regress.FooBRect));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_brect_new(double x, double y);

		public static FooBRect New(double x, double y)
		{
			FooBRect result = FooBRect.New (regress_foo_brect_new(x, y));
			return result;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_brect_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_foo_brect_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_brect_add(IntPtr raw, IntPtr b2);

		public void Add(Regress.FooBRect b2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_b2 = GLib.Marshaller.StructureToPtrAlloc (b2);
			regress_foo_brect_add(this_as_native, native_b2);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			Marshal.FreeHGlobal (native_b2);
		}

		static void ReadNative (IntPtr native, ref Regress.FooBRect target)
		{
			target = New (native);
		}

		public bool Equals (FooBRect other)
		{
			return true && X.Equals (other.X) && Y.Equals (other.Y);
		}

		public override bool Equals (object other)
		{
			return other is FooBRect && Equals ((FooBRect) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ X.GetHashCode () ^ Y.GetHashCode ();
		}

		public static explicit operator GLib.Value (Regress.FooBRect boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Regress.FooBRect.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Regress.FooBRect (GLib.Value val)
		{
			return (Regress.FooBRect) val.Val;
		}
#endregion
	}
}
