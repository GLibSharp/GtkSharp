// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FooObject, Regress.IFooInterface {

		public FooObject (IntPtr raw) : base(raw) {}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_new();

		public FooObject () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FooObject)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = regress_foo_object_new();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_new_as_super();

		public static FooObject NewAsSuper()
		{
			FooObject result = new FooObject (regress_foo_object_new_as_super());
			return result;
		}

		[GLib.Property ("string")]
		public string String {
			get {
				GLib.Value val = GetProperty ("string");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("string", val);
				val.Dispose ();
			}
		}

		public int SomeInt {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("some_int"));
					return (*raw_ptr);
				}
			}
		}

		[DllImport ("regress-sharp-glue")]
		static extern void regresssharp_fooobject_override_virtual_method (IntPtr class_struct, VirtualMethodNativeDelegate cb);

		static VirtualMethodNativeDelegate VirtualMethod_cb_delegate;
		static VirtualMethodNativeDelegate VirtualMethodVMCallback {
			get {
				if (VirtualMethod_cb_delegate == null)
					VirtualMethod_cb_delegate = new VirtualMethodNativeDelegate (VirtualMethod_cb);
				return VirtualMethod_cb_delegate;
			}
		}

		static void OverrideVirtualMethod (GLib.GType gtype)
		{
			OverrideVirtualMethod (gtype, VirtualMethodVMCallback);
		}

		static void OverrideVirtualMethod (GLib.GType gtype, VirtualMethodNativeDelegate callback)
		{
			regresssharp_fooobject_override_virtual_method (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool VirtualMethodNativeDelegate (IntPtr inst, int first_param);

		static bool VirtualMethod_cb (IntPtr inst, int first_param)
		{
			try {
				FooObject __obj = GLib.Object.GetObject (inst, false) as FooObject;
				bool __result;
				__result = __obj.OnVirtualMethod (first_param);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[DllImport ("regress-sharp-glue")]
		static extern bool regresssharp_fooobject_invoke_virtual_method (IntPtr class_struct, IntPtr inst, int first_param);

		[GLib.DefaultSignalHandler(Type=typeof(Regress.FooObject), ConnectionMethod="OverrideVirtualMethod")]
		protected virtual bool OnVirtualMethod (int first_param)
		{
			return InternalVirtualMethod (first_param);
		}

		private bool InternalVirtualMethod (int first_param)
		{
			bool __result = regresssharp_fooobject_invoke_virtual_method (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, first_param);
			return __result;
		}

		[DllImport ("regress-sharp-glue")]
		static extern void regresssharp_fooobject_override_read_fn (IntPtr class_struct, ReadFnNativeDelegate cb);

		static ReadFnNativeDelegate ReadFn_cb_delegate;
		static ReadFnNativeDelegate ReadFnVMCallback {
			get {
				if (ReadFn_cb_delegate == null)
					ReadFn_cb_delegate = new ReadFnNativeDelegate (ReadFn_cb);
				return ReadFn_cb_delegate;
			}
		}

		static void OverrideReadFn (GLib.GType gtype)
		{
			OverrideReadFn (gtype, ReadFnVMCallback);
		}

		static void OverrideReadFn (GLib.GType gtype, ReadFnNativeDelegate callback)
		{
			regresssharp_fooobject_override_read_fn (gtype.GetClassPtr (), callback);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReadFnNativeDelegate (IntPtr inst, int offset, int length);

		static void ReadFn_cb (IntPtr inst, int offset, int length)
		{
			try {
				FooObject __obj = GLib.Object.GetObject (inst, false) as FooObject;
				__obj.OnReadFn (offset, length);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[DllImport ("regress-sharp-glue")]
		static extern void regresssharp_fooobject_invoke_read_fn (IntPtr class_struct, IntPtr inst, int offset, int length);

		[GLib.DefaultSignalHandler(Type=typeof(Regress.FooObject), ConnectionMethod="OverrideReadFn")]
		protected virtual void OnReadFn (int offset, int length)
		{
			InternalReadFn (offset, length);
		}

		private void InternalReadFn (int offset, int length)
		{
			regresssharp_fooobject_invoke_read_fn (this.LookupGType ().GetThresholdType ().GetClassPtr (), Handle, offset, length);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("virtual_method"
							, 0
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // virtual_method
							, null
							, "read_fn"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("read_fn"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // read_fn
							, "virtual_method"
							, "_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof()) * 4 // _reserved
							, "read_fn"
							, null
							, (long) Marshal.OffsetOf(typeof(RegressFooObject__reservedAlign), "_reserved")
							, 0
							),
					});

				return _class_abi;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressFooObject__reservedAlign
		{
			sbyte f1;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
			private [] _reserved;
		}


		// End of the ABI representation.

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_foo_object_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_get_default();

		public static Regress.FooSubobject Default { 
			get {
				IntPtr raw_ret = regress_foo_object_get_default();
				Regress.FooSubobject ret = GLib.Object.GetObject(raw_ret) as Regress.FooSubobject;
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_foo_object_static_meth();

		public static int StaticMeth() {
			int raw_ret = regress_foo_object_static_meth();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_append_new_stack_layer(IntPtr raw, int x);

		public Regress.FooOtherObject AppendNewStackLayer(int x) {
			IntPtr raw_ret = regress_foo_object_append_new_stack_layer(Handle, x);
			Regress.FooOtherObject ret = GLib.Object.GetObject(raw_ret) as Regress.FooOtherObject;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_dup_name(IntPtr raw);

		public string DupName() {
			IntPtr raw_ret = regress_foo_object_dup_name(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_object_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = regress_foo_object_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_object_is_it_time_yet(IntPtr raw, IntPtr time);

		public void IsItTimeYet(long time) {
			regress_foo_object_is_it_time_yet(Handle, new IntPtr (time));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_object_read(IntPtr raw, int offset, int length);

		public void Read(int offset, int length) {
			regress_foo_object_read(Handle, offset, length);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_object_various(IntPtr raw, IntPtr data, IntPtr some_type);

		public void Various(IntPtr data, GLib.GType some_type) {
			regress_foo_object_various(Handle, data, some_type.Val);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool regress_foo_object_virtual_method(IntPtr raw, int first_param);

		public bool VirtualMethod(int first_param) {
			bool raw_ret = regress_foo_object_virtual_method(Handle, first_param);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_interface_do_regress_foo(IntPtr raw, int x);

		public void DoRegressFoo(int x) {
			regress_foo_interface_do_regress_foo(Handle, x);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("some_int"
							, 0
							, (uint) Marshal.SizeOf(typeof(int)) // some_int
							, null
							, null
							, (long) Marshal.OffsetOf(typeof(RegressFooObject_some_intAlign), "some_int")
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressFooObject_some_intAlign
		{
			sbyte f1;
			private int some_int;
		}


		// End of the ABI representation.

#endregion
	}
}
