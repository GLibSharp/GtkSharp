// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int TestCallbackFullNative(int foo, double bar, IntPtr path);

	internal class TestCallbackFullInvoker {

		TestCallbackFullNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TestCallbackFullInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TestCallbackFullInvoker (TestCallbackFullNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TestCallbackFullInvoker (TestCallbackFullNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TestCallbackFullInvoker (TestCallbackFullNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.TestCallbackFull Handler {
			get {
				return new Regress.TestCallbackFull(InvokeNative);
			}
		}

		int InvokeNative (int foo, double bar, string path)
		{
			IntPtr native_path = GLib.Marshaller.StringToFilenamePtr (path);
			int __result = native_cb (foo, bar, native_path);
			GLib.Marshaller.Free (native_path);
			return __result;
		}
	}

	internal class TestCallbackFullWrapper {

		public int NativeCallback (int foo, double bar, IntPtr path)
		{
			try {
				int __ret = managed (foo, bar, GLib.Marshaller.FilenamePtrToString (path));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TestCallbackFullNative NativeDelegate;
		Regress.TestCallbackFull managed;

		public TestCallbackFullWrapper (Regress.TestCallbackFull managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TestCallbackFullNative (NativeCallback);
		}

		public static Regress.TestCallbackFull GetManagedDelegate (TestCallbackFullNative native)
		{
			if (native == null)
				return null;
			TestCallbackFullWrapper wrapper = (TestCallbackFullWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
