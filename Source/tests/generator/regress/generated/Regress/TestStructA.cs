// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TestStructA : IEquatable<TestStructA> {

		public int SomeInt;
		public sbyte SomeInt8;
		public double SomeDouble;
		public Regress.TestEnum SomeEnum;

		public static Regress.TestStructA Zero = new Regress.TestStructA ();

		public static Regress.TestStructA New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Regress.TestStructA.Zero;
			return (Regress.TestStructA) Marshal.PtrToStructure (raw, typeof (Regress.TestStructA));
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_struct_a_clone(IntPtr raw, IntPtr a_out);

		public Regress.TestStructA Clone() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			Regress.TestStructA a_out;
			IntPtr native_a_out = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Regress.TestStructA)));
			regress_test_struct_a_clone(this_as_native, native_a_out);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			a_out = Regress.TestStructA.New (native_a_out);
			Marshal.FreeHGlobal (native_a_out);
			return a_out;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_struct_a_parse(IntPtr a_out, IntPtr str1ng);

		public static Regress.TestStructA Parse(string str1ng) {
			Regress.TestStructA a_out;
			IntPtr native_a_out = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Regress.TestStructA)));
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			regress_test_struct_a_parse(native_a_out, native_str1ng);
			a_out = Regress.TestStructA.New (native_a_out);
			Marshal.FreeHGlobal (native_a_out);
			GLib.Marshaller.Free (native_str1ng);
			return a_out;
		}

		static void ReadNative (IntPtr native, ref Regress.TestStructA target)
		{
			target = New (native);
		}

		public bool Equals (TestStructA other)
		{
			return true && SomeInt.Equals (other.SomeInt) && SomeInt8.Equals (other.SomeInt8) && SomeDouble.Equals (other.SomeDouble) && SomeEnum.Equals (other.SomeEnum);
		}

		public override bool Equals (object other)
		{
			return other is TestStructA && Equals ((TestStructA) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ SomeInt.GetHashCode () ^ SomeInt8.GetHashCode () ^ SomeDouble.GetHashCode () ^ SomeEnum.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
