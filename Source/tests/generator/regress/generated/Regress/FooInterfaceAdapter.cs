// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FooInterfaceAdapter : GLib.GInterfaceAdapter, Regress.IFooInterface {

		[StructLayout (LayoutKind.Sequential)]
		struct RegressFooInterfaceIface {
			public DoRegressFooNativeDelegate DoRegressFoo;
		}

		static RegressFooInterfaceIface iface;

		static FooInterfaceAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (FooInterfaceAdapter));
			iface.DoRegressFoo = new DoRegressFooNativeDelegate (DoRegressFoo_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DoRegressFooNativeDelegate (IntPtr inst, int x);

		static void DoRegressFoo_cb (IntPtr inst, int x)
		{
			try {
				IFooInterfaceImplementor __obj = GLib.Object.GetObject (inst, false) as IFooInterfaceImplementor;
				__obj.DoRegressFoo (x);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			RegressFooInterfaceIface native_iface = (RegressFooInterfaceIface) Marshal.PtrToStructure (ifaceptr, typeof (RegressFooInterfaceIface));
			native_iface.DoRegressFoo = iface.DoRegressFoo;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public FooInterfaceAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public FooInterfaceAdapter (IFooInterfaceImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public FooInterfaceAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_foo_interface_get_type();

		private static GLib.GType _gtype = new GLib.GType (regress_foo_interface_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IFooInterface GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IFooInterface GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IFooInterfaceImplementor)
				return new FooInterfaceAdapter (obj as IFooInterfaceImplementor);
			else if (obj as IFooInterface == null)
				return new FooInterfaceAdapter (obj.Handle);
			else
				return obj as IFooInterface;
		}

		public IFooInterfaceImplementor Implementor {
			get {
				return implementor as IFooInterfaceImplementor;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_interface_static_method(int x);

		public static void StaticMethod(int x) {
			regress_foo_interface_static_method(x);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_foo_interface_do_regress_foo(IntPtr raw, int x);

		public void DoRegressFoo(int x) {
			regress_foo_interface_do_regress_foo(Handle, x);
		}

#endregion
	}
}
