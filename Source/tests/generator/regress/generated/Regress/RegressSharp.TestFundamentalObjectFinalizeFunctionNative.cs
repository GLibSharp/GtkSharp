// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

	#region Autogenerated code
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	internal delegate void TestFundamentalObjectFinalizeFunctionNative(IntPtr obj);

	internal class TestFundamentalObjectFinalizeFunctionInvoker {

		TestFundamentalObjectFinalizeFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TestFundamentalObjectFinalizeFunctionInvoker() {
			if (__notify == null)
				return;
			__notify(__data);
		}

		internal TestFundamentalObjectFinalizeFunctionInvoker(TestFundamentalObjectFinalizeFunctionNative native_cb) : this(native_cb, IntPtr.Zero, null) { }

		internal TestFundamentalObjectFinalizeFunctionInvoker(TestFundamentalObjectFinalizeFunctionNative native_cb, IntPtr data) : this(native_cb, data, null) { }

		internal TestFundamentalObjectFinalizeFunctionInvoker(TestFundamentalObjectFinalizeFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify) {
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.TestFundamentalObjectFinalizeFunction Handler {
			get {
				return new Regress.TestFundamentalObjectFinalizeFunction(InvokeNative);
			}
		}

		void InvokeNative(Regress.TestFundamentalObject obj) {
			native_cb(obj == null ? IntPtr.Zero : obj.Handle);
		}
	}

	internal class TestFundamentalObjectFinalizeFunctionWrapper {

		public void NativeCallback(IntPtr obj) {
			try {
				managed(obj == IntPtr.Zero ? null : (Regress.TestFundamentalObject)GLib.Opaque.GetOpaque(obj, typeof(Regress.TestFundamentalObject), false));
				if (release_on_call)
					gch.Free();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException(e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled() {
			release_on_call = true;
			gch = GCHandle.Alloc(this);
		}

		internal TestFundamentalObjectFinalizeFunctionNative NativeDelegate;
		Regress.TestFundamentalObjectFinalizeFunction managed;

		public TestFundamentalObjectFinalizeFunctionWrapper(Regress.TestFundamentalObjectFinalizeFunction managed) {
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TestFundamentalObjectFinalizeFunctionNative(NativeCallback);
		}

		public static Regress.TestFundamentalObjectFinalizeFunction GetManagedDelegate(TestFundamentalObjectFinalizeFunctionNative native) {
			if (native == null)
				return null;
			TestFundamentalObjectFinalizeFunctionWrapper wrapper = (TestFundamentalObjectFinalizeFunctionWrapper)native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
	#endregion
}