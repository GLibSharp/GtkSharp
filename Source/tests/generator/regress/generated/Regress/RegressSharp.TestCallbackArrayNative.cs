// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int TestCallbackArrayNative(int[] one, UIntPtr one_length, IntPtr[] two, int two_length);

	internal class TestCallbackArrayInvoker {

		TestCallbackArrayNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TestCallbackArrayInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TestCallbackArrayInvoker (TestCallbackArrayNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TestCallbackArrayInvoker (TestCallbackArrayNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TestCallbackArrayInvoker (TestCallbackArrayNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.TestCallbackArray Handler {
			get {
				return new Regress.TestCallbackArray(InvokeNative);
			}
		}

		int InvokeNative (int[] one, ulong one_length, string[] two, int two_length)
		{
			int cnt_two = two == null ? 0 : two.Length;
			IntPtr[] native_two = new IntPtr [cnt_two];
			for (int i = 0; i < cnt_two; i++)
				native_two [i] = GLib.Marshaller.StringToPtrGStrdup(two[i]);
			int __result = native_cb (one, new UIntPtr (one_length), native_two, two_length);
			return __result;
		}
	}

	internal class TestCallbackArrayWrapper {

		public int NativeCallback (int[] one, UIntPtr one_length, IntPtr[] two, int two_length)
		{
			try {
				int __ret = managed (one, (ulong) one_length, GLib.Marshaller.PtrToStringGFree(two), two_length);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TestCallbackArrayNative NativeDelegate;
		Regress.TestCallbackArray managed;

		public TestCallbackArrayWrapper (Regress.TestCallbackArray managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TestCallbackArrayNative (NativeCallback);
		}

		public static Regress.TestCallbackArray GetManagedDelegate (TestCallbackArrayNative native)
		{
			if (native == null)
				return null;
			TestCallbackArrayWrapper wrapper = (TestCallbackArrayWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
