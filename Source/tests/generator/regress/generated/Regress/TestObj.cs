// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Regress {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TestObj : GLib.Object {

		public TestObj (IntPtr raw) : base(raw) {}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_constructor();

		public TestObj () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TestObj)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = regress_constructor();
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_obj_new(IntPtr obj);

		public TestObj (Regress.TestObj obj) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TestObj)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = regress_test_obj_new(obj == null ? IntPtr.Zero : obj.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_obj_new_callback(RegressSharp.TestCallbackUserDataNative cb, IntPtr user_data, GLib.DestroyNotify notify);

		public TestObj (Regress.TestCallbackUserData cb, IntPtr user_data, GLib.DestroyNotify notify) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TestObj)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			RegressSharp.TestCallbackUserDataWrapper cb_wrapper = new RegressSharp.TestCallbackUserDataWrapper (cb);
			Raw = regress_test_obj_new_callback(cb_wrapper.NativeDelegate, user_data, notify);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_obj_new_from_file(IntPtr x);

		public TestObj (string x) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TestObj)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_x = GLib.Marshaller.StringToPtrGStrdup (x);
			Raw = regress_test_obj_new_from_file(native_x);
			GLib.Marshaller.Free (native_x);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_set_bare(IntPtr raw, IntPtr bare);

		[GLib.Property ("bare")]
		public GLib.Object Bare {
			get {
				GLib.Value val = GetProperty ("bare");
				GLib.Object ret = (GLib.Object) val;
				val.Dispose ();
				return ret;
			}
			set  {
				regress_test_obj_set_bare(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("boxed")]
		public Regress.TestBoxed Boxed {
			get {
				GLib.Value val = GetProperty ("boxed");
				Regress.TestBoxed ret = (Regress.TestBoxed) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = (GLib.Value) value;
				SetProperty("boxed", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("double")]
		public double Double {
			get {
				GLib.Value val = GetProperty ("double");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("double", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("float")]
		public float Float {
			get {
				GLib.Value val = GetProperty ("float");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("float", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("gtype")]
		public GLib.GType Gtype {
			get {
				GLib.Value val = GetProperty ("gtype");
				GLib.GType ret = (GLib.GType) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("gtype", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("hash-table")]
		public string HashTable {
			get {
				GLib.Value val = GetProperty ("hash-table");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("hash-table", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("hash-table-old")]
		public string HashTableOld {
			get {
				GLib.Value val = GetProperty ("hash-table-old");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("hash-table-old", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("int")]
		public int Int {
			get {
				GLib.Value val = GetProperty ("int");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("int", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("list")]
		public string List {
			get {
				GLib.Value val = GetProperty ("list");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("list", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("list-old")]
		public string ListOld {
			get {
				GLib.Value val = GetProperty ("list-old");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("list-old", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("name-conflict")]
		public int NameConflictProp
						 {
			get {
				GLib.Value val = GetProperty ("name-conflict");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name-conflict", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pptrarray")]
		public IntPtr Pptrarray {
			get {
				GLib.Value val = GetProperty ("pptrarray");
				IntPtr ret = (IntPtr) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pptrarray", val);
				val.Dispose ();
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_obj_get_string(IntPtr raw);

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_set_string(IntPtr raw, IntPtr str);

		[GLib.Property ("string")]
		public string String {
			get  {
				IntPtr raw_ret = regress_test_obj_get_string(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				regress_test_obj_set_string(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("write-only")]
		public bool WriteOnly {
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("write-only", val);
				val.Dispose ();
			}
		}

		[DllImport ("regress-sharp-glue")]
		extern static uint regresssharp_regress_testobj_get_parent_instance_offset ();

		static uint parent_instance_offset = regresssharp_regress_testobj_get_parent_instance_offset ();
		public GLib.Object ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		public GLib.Object BareField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("bare"));
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		public Regress.TestBoxed BoxedField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("boxed"));
					return Regress.TestBoxed.New ((*raw_ptr));
				}
			}
		}

		public System.IntPtr HashTableField {
			get {
				unsafe {
					System.IntPtr* raw_ptr = (System.IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("hash_table"));
					return (*raw_ptr);
				}
			}
		}

		public GLib.List ListField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("list"));
					return new GLib.List((*raw_ptr));
				}
			}
		}

		public sbyte SomeInt8 {
			get {
				unsafe {
					sbyte* raw_ptr = (sbyte*)(((byte*)Handle) + abi_info.GetFieldOffset("some_int8"));
					return (*raw_ptr);
				}
			}
		}

		public float SomeFloat {
			get {
				unsafe {
					float* raw_ptr = (float*)(((byte*)Handle) + abi_info.GetFieldOffset("some_float"));
					return (*raw_ptr);
				}
			}
		}

		public double SomeDouble {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + abi_info.GetFieldOffset("some_double"));
					return (*raw_ptr);
				}
			}
		}

		public string StringField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("string"));
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		public GLib.GType GtypeField {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + abi_info.GetFieldOffset("gtype"));
					return new GLib.GType((*raw_ptr));
				}
			}
		}

		public int NameConflictField {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("name_conflict"));
					return (*raw_ptr);
				}
			}
		}

		[GLib.Signal("test-with-static-scope-arg")]
		public event Regress.TestWithStaticScopeArgHandler TestWithStaticScopeArg {
			add {
				this.AddSignalHandler ("test-with-static-scope-arg", value, typeof (Regress.TestWithStaticScopeArgArgs));
			}
			remove {
				this.RemoveSignalHandler ("test-with-static-scope-arg", value);
			}
		}

		[GLib.Signal("sig-with-gerror")]
		public event Regress.SigWithGerrorHandler SigWithGerror {
			add {
				this.AddSignalHandler ("sig-with-gerror", value, typeof (Regress.SigWithGerrorArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-gerror", value);
			}
		}

		[GLib.Signal("sig-with-inout-int")]
		public event Regress.SigWithInoutIntHandler SigWithInoutInt {
			add {
				this.AddSignalHandler ("sig-with-inout-int", value, typeof (Regress.SigWithInoutIntArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-inout-int", value);
			}
		}

		[GLib.Signal("sig-with-array-len-prop")]
		public event Regress.SigWithArrayLenPropHandler SigWithArrayLenProp {
			add {
				this.AddSignalHandler ("sig-with-array-len-prop", value, typeof (Regress.SigWithArrayLenPropArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-array-len-prop", value);
			}
		}

		[GLib.Signal("test")]
		public event System.EventHandler Test {
			add {
				this.AddSignalHandler ("test", value);
			}
			remove {
				this.RemoveSignalHandler ("test", value);
			}
		}

		[GLib.Signal("sig-with-uint64-prop")]
		public event Regress.SigWithUint64PropHandler SigWithUint64Prop {
			add {
				this.AddSignalHandler ("sig-with-uint64-prop", value, typeof (Regress.SigWithUint64PropArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-uint64-prop", value);
			}
		}

		[GLib.Signal("sig-with-obj")]
		public event Regress.SigWithObjHandler SigWithObj {
			add {
				this.AddSignalHandler ("sig-with-obj", value, typeof (Regress.SigWithObjArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-obj", value);
			}
		}

		[GLib.Signal("sig-with-int64-prop")]
		public event Regress.SigWithInt64PropHandler SigWithInt64Prop {
			add {
				this.AddSignalHandler ("sig-with-int64-prop", value, typeof (Regress.SigWithInt64PropArgs));
			}
			remove {
				this.RemoveSignalHandler ("sig-with-int64-prop", value);
			}
		}

		[GLib.Signal("first")]
		public event System.EventHandler First {
			add {
				this.AddSignalHandler ("first", value);
			}
			remove {
				this.RemoveSignalHandler ("first", value);
			}
		}

		[GLib.Signal("all")]
		public event System.EventHandler All {
			add {
				this.AddSignalHandler ("all", value);
			}
			remove {
				this.RemoveSignalHandler ("all", value);
			}
		}

		[GLib.Signal("cleanup")]
		public event System.EventHandler Cleanup {
			add {
				this.AddSignalHandler ("cleanup", value);
			}
			remove {
				this.RemoveSignalHandler ("cleanup", value);
			}
		}

		static AllNativeDelegate All_cb_delegate;
		static AllNativeDelegate AllVMCallback {
			get {
				if (All_cb_delegate == null)
					All_cb_delegate = new AllNativeDelegate (All_cb);
				return All_cb_delegate;
			}
		}

		static void OverrideAll (GLib.GType gtype)
		{
			OverrideAll (gtype, AllVMCallback);
		}

		static void OverrideAll (GLib.GType gtype, AllNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "all", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllNativeDelegate (IntPtr inst);

		static void All_cb (IntPtr inst)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnAll ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideAll")]
		protected virtual void OnAll ()
		{
			InternalAll ();
		}

		private void InternalAll ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static CleanupNativeDelegate Cleanup_cb_delegate;
		static CleanupNativeDelegate CleanupVMCallback {
			get {
				if (Cleanup_cb_delegate == null)
					Cleanup_cb_delegate = new CleanupNativeDelegate (Cleanup_cb);
				return Cleanup_cb_delegate;
			}
		}

		static void OverrideCleanup (GLib.GType gtype)
		{
			OverrideCleanup (gtype, CleanupVMCallback);
		}

		static void OverrideCleanup (GLib.GType gtype, CleanupNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "cleanup", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CleanupNativeDelegate (IntPtr inst);

		static void Cleanup_cb (IntPtr inst)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnCleanup ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideCleanup")]
		protected virtual void OnCleanup ()
		{
			InternalCleanup ();
		}

		private void InternalCleanup ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static FirstNativeDelegate First_cb_delegate;
		static FirstNativeDelegate FirstVMCallback {
			get {
				if (First_cb_delegate == null)
					First_cb_delegate = new FirstNativeDelegate (First_cb);
				return First_cb_delegate;
			}
		}

		static void OverrideFirst (GLib.GType gtype)
		{
			OverrideFirst (gtype, FirstVMCallback);
		}

		static void OverrideFirst (GLib.GType gtype, FirstNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "first", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FirstNativeDelegate (IntPtr inst);

		static void First_cb (IntPtr inst)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnFirst ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideFirst")]
		protected virtual void OnFirst ()
		{
			InternalFirst ();
		}

		private void InternalFirst ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SigWithArrayLenPropNativeDelegate SigWithArrayLenProp_cb_delegate;
		static SigWithArrayLenPropNativeDelegate SigWithArrayLenPropVMCallback {
			get {
				if (SigWithArrayLenProp_cb_delegate == null)
					SigWithArrayLenProp_cb_delegate = new SigWithArrayLenPropNativeDelegate (SigWithArrayLenProp_cb);
				return SigWithArrayLenProp_cb_delegate;
			}
		}

		static void OverrideSigWithArrayLenProp (GLib.GType gtype)
		{
			OverrideSigWithArrayLenProp (gtype, SigWithArrayLenPropVMCallback);
		}

		static void OverrideSigWithArrayLenProp (GLib.GType gtype, SigWithArrayLenPropNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-array-len-prop", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SigWithArrayLenPropNativeDelegate (IntPtr inst, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)]IntPtr[] arr, int len);

		static void SigWithArrayLenProp_cb (IntPtr inst, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)]IntPtr[] arr, int len)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnSigWithArrayLenProp (arr);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithArrayLenProp")]
		protected virtual void OnSigWithArrayLenProp (IntPtr[] arr)
		{
			InternalSigWithArrayLenProp (arr);
		}

		private void InternalSigWithArrayLenProp (IntPtr[] arr)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (arr);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SigWithGerrorNativeDelegate SigWithGerror_cb_delegate;
		static SigWithGerrorNativeDelegate SigWithGerrorVMCallback {
			get {
				if (SigWithGerror_cb_delegate == null)
					SigWithGerror_cb_delegate = new SigWithGerrorNativeDelegate (SigWithGerror_cb);
				return SigWithGerror_cb_delegate;
			}
		}

		static void OverrideSigWithGerror (GLib.GType gtype)
		{
			OverrideSigWithGerror (gtype, SigWithGerrorVMCallback);
		}

		static void OverrideSigWithGerror (GLib.GType gtype, SigWithGerrorNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-gerror", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SigWithGerrorNativeDelegate (IntPtr inst, IntPtr error);

		static void SigWithGerror_cb (IntPtr inst, IntPtr error)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnSigWithGerror (error);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithGerror")]
		protected virtual void OnSigWithGerror (IntPtr error)
		{
			InternalSigWithGerror (error);
		}

		private void InternalSigWithGerror (IntPtr error)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (error);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SigWithInoutIntNativeDelegate SigWithInoutInt_cb_delegate;
		static SigWithInoutIntNativeDelegate SigWithInoutIntVMCallback {
			get {
				if (SigWithInoutInt_cb_delegate == null)
					SigWithInoutInt_cb_delegate = new SigWithInoutIntNativeDelegate (SigWithInoutInt_cb);
				return SigWithInoutInt_cb_delegate;
			}
		}

		static void OverrideSigWithInoutInt (GLib.GType gtype)
		{
			OverrideSigWithInoutInt (gtype, SigWithInoutIntVMCallback);
		}

		static void OverrideSigWithInoutInt (GLib.GType gtype, SigWithInoutIntNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-inout-int", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SigWithInoutIntNativeDelegate (IntPtr inst, ref int position);

		static void SigWithInoutInt_cb (IntPtr inst, ref int position)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnSigWithInoutInt (ref position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithInoutInt")]
		protected virtual void OnSigWithInoutInt (ref int position)
		{
			InternalSigWithInoutInt (ref position);
		}

		private void InternalSigWithInoutInt (ref int position)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			IntPtr position_ptr = GLib.Marshaller.StructureToPtrAlloc (position);
			vals [1] = new GLib.Value (position_ptr);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			position = (int) Marshal.PtrToStructure (position_ptr, typeof (int));
			Marshal.FreeHGlobal (position_ptr);

			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SigWithInt64PropNativeDelegate SigWithInt64Prop_cb_delegate;
		static SigWithInt64PropNativeDelegate SigWithInt64PropVMCallback {
			get {
				if (SigWithInt64Prop_cb_delegate == null)
					SigWithInt64Prop_cb_delegate = new SigWithInt64PropNativeDelegate (SigWithInt64Prop_cb);
				return SigWithInt64Prop_cb_delegate;
			}
		}

		static void OverrideSigWithInt64Prop (GLib.GType gtype)
		{
			OverrideSigWithInt64Prop (gtype, SigWithInt64PropVMCallback);
		}

		static void OverrideSigWithInt64Prop (GLib.GType gtype, SigWithInt64PropNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-int64-prop", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long SigWithInt64PropNativeDelegate (IntPtr inst, long i);

		static long SigWithInt64Prop_cb (IntPtr inst, long i)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				long __result;
				__result = __obj.OnSigWithInt64Prop (i);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithInt64Prop")]
		protected virtual long OnSigWithInt64Prop (long i)
		{
			return InternalSigWithInt64Prop (i);
		}

		private long InternalSigWithInt64Prop (long i)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.Int64);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (i);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			long result = (long) ret;
			ret.Dispose ();
			return result;
		}

		static SigWithObjNativeDelegate SigWithObj_cb_delegate;
		static SigWithObjNativeDelegate SigWithObjVMCallback {
			get {
				if (SigWithObj_cb_delegate == null)
					SigWithObj_cb_delegate = new SigWithObjNativeDelegate (SigWithObj_cb);
				return SigWithObj_cb_delegate;
			}
		}

		static void OverrideSigWithObj (GLib.GType gtype)
		{
			OverrideSigWithObj (gtype, SigWithObjVMCallback);
		}

		static void OverrideSigWithObj (GLib.GType gtype, SigWithObjNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-obj", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SigWithObjNativeDelegate (IntPtr inst, IntPtr obj);

		static void SigWithObj_cb (IntPtr inst, IntPtr obj)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnSigWithObj (GLib.Object.GetObject (obj));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithObj")]
		protected virtual void OnSigWithObj (GLib.Object obj)
		{
			InternalSigWithObj (obj);
		}

		private void InternalSigWithObj (GLib.Object obj)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (obj);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SigWithUint64PropNativeDelegate SigWithUint64Prop_cb_delegate;
		static SigWithUint64PropNativeDelegate SigWithUint64PropVMCallback {
			get {
				if (SigWithUint64Prop_cb_delegate == null)
					SigWithUint64Prop_cb_delegate = new SigWithUint64PropNativeDelegate (SigWithUint64Prop_cb);
				return SigWithUint64Prop_cb_delegate;
			}
		}

		static void OverrideSigWithUint64Prop (GLib.GType gtype)
		{
			OverrideSigWithUint64Prop (gtype, SigWithUint64PropVMCallback);
		}

		static void OverrideSigWithUint64Prop (GLib.GType gtype, SigWithUint64PropNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "sig-with-uint64-prop", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate ulong SigWithUint64PropNativeDelegate (IntPtr inst, ulong i);

		static ulong SigWithUint64Prop_cb (IntPtr inst, ulong i)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				ulong __result;
				__result = __obj.OnSigWithUint64Prop (i);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideSigWithUint64Prop")]
		protected virtual ulong OnSigWithUint64Prop (ulong i)
		{
			return InternalSigWithUint64Prop (i);
		}

		private ulong InternalSigWithUint64Prop (ulong i)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.UInt64);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (i);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			ulong result = (ulong) ret;
			ret.Dispose ();
			return result;
		}

		static TestNativeDelegate Test_cb_delegate;
		static TestNativeDelegate TestVMCallback {
			get {
				if (Test_cb_delegate == null)
					Test_cb_delegate = new TestNativeDelegate (Test_cb);
				return Test_cb_delegate;
			}
		}

		static void OverrideTest (GLib.GType gtype)
		{
			OverrideTest (gtype, TestVMCallback);
		}

		static void OverrideTest (GLib.GType gtype, TestNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "test", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TestNativeDelegate (IntPtr inst);

		static void Test_cb (IntPtr inst)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnTest ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideTest")]
		protected virtual void OnTest ()
		{
			InternalTest ();
		}

		private void InternalTest ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static TestWithStaticScopeArgNativeDelegate TestWithStaticScopeArg_cb_delegate;
		static TestWithStaticScopeArgNativeDelegate TestWithStaticScopeArgVMCallback {
			get {
				if (TestWithStaticScopeArg_cb_delegate == null)
					TestWithStaticScopeArg_cb_delegate = new TestWithStaticScopeArgNativeDelegate (TestWithStaticScopeArg_cb);
				return TestWithStaticScopeArg_cb_delegate;
			}
		}

		static void OverrideTestWithStaticScopeArg (GLib.GType gtype)
		{
			OverrideTestWithStaticScopeArg (gtype, TestWithStaticScopeArgVMCallback);
		}

		static void OverrideTestWithStaticScopeArg (GLib.GType gtype, TestWithStaticScopeArgNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "test-with-static-scope-arg", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TestWithStaticScopeArgNativeDelegate (IntPtr inst, IntPtr _object);

		static void TestWithStaticScopeArg_cb (IntPtr inst, IntPtr _object)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnTestWithStaticScopeArg (Regress.TestSimpleBoxedA.New (_object));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideTestWithStaticScopeArg")]
		protected virtual void OnTestWithStaticScopeArg (Regress.TestSimpleBoxedA _object)
		{
			InternalTestWithStaticScopeArg (_object);
		}

		private void InternalTestWithStaticScopeArg (Regress.TestSimpleBoxedA _object)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (_object);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static MatrixNativeDelegate Matrix_cb_delegate;
		static MatrixNativeDelegate MatrixVMCallback {
			get {
				if (Matrix_cb_delegate == null)
					Matrix_cb_delegate = new MatrixNativeDelegate (Matrix_cb);
				return Matrix_cb_delegate;
			}
		}

		static void OverrideMatrix (GLib.GType gtype)
		{
			OverrideMatrix (gtype, MatrixVMCallback);
		}

		static void OverrideMatrix (GLib.GType gtype, MatrixNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("matrix"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int MatrixNativeDelegate (IntPtr inst, IntPtr somestr);

		static int Matrix_cb (IntPtr inst, IntPtr somestr)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				int __result;
				__result = __obj.OnMatrix (GLib.Marshaller.Utf8PtrToString (somestr));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideMatrix")]
		protected virtual int OnMatrix (string somestr)
		{
			return InternalMatrix (somestr);
		}

		private int InternalMatrix (string somestr)
		{
			MatrixNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("matrix"));
				unmanaged = (MatrixNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(MatrixNativeDelegate));
			}
			if (unmanaged == null) return 0;

			IntPtr native_somestr = GLib.Marshaller.StringToPtrGStrdup (somestr);
			int __result = unmanaged (this.Handle, native_somestr);
			GLib.Marshaller.Free (native_somestr);
			return __result;
		}

		static AllowNoneVfuncNativeDelegate AllowNoneVfunc_cb_delegate;
		static AllowNoneVfuncNativeDelegate AllowNoneVfuncVMCallback {
			get {
				if (AllowNoneVfunc_cb_delegate == null)
					AllowNoneVfunc_cb_delegate = new AllowNoneVfuncNativeDelegate (AllowNoneVfunc_cb);
				return AllowNoneVfunc_cb_delegate;
			}
		}

		static void OverrideAllowNoneVfunc (GLib.GType gtype)
		{
			OverrideAllowNoneVfunc (gtype, AllowNoneVfuncVMCallback);
		}

		static void OverrideAllowNoneVfunc (GLib.GType gtype, AllowNoneVfuncNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("allow_none_vfunc"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllowNoneVfuncNativeDelegate (IntPtr inst, IntPtr two);

		static void AllowNoneVfunc_cb (IntPtr inst, IntPtr two)
		{
			try {
				TestObj __obj = GLib.Object.GetObject (inst, false) as TestObj;
				__obj.OnAllowNoneVfunc (GLib.Object.GetObject(two) as Regress.TestObj);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Regress.TestObj), ConnectionMethod="OverrideAllowNoneVfunc")]
		protected virtual void OnAllowNoneVfunc (Regress.TestObj two)
		{
			InternalAllowNoneVfunc (two);
		}

		private void InternalAllowNoneVfunc (Regress.TestObj two)
		{
			AllowNoneVfuncNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("allow_none_vfunc"));
				unmanaged = (AllowNoneVfuncNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(AllowNoneVfuncNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, two == null ? IntPtr.Zero : two.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("matrix"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // matrix
							, null
							, "allow_none_vfunc"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("allow_none_vfunc"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // allow_none_vfunc
							, "matrix"
							, "test_signal"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("test_signal"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // test_signal
							, "allow_none_vfunc"
							, "test_signal_with_static_scope_arg"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_test_signalAlign), "test_signal")
							, 0
							),
						new GLib.AbiField("test_signal_with_static_scope_arg"
							, -1
							, (uint) Marshal.SizeOf(typeof(uint)) // test_signal_with_static_scope_arg
							, "test_signal"
							, "complex_vfunc"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_test_signal_with_static_scope_argAlign), "test_signal_with_static_scope_arg")
							, 0
							),
						new GLib.AbiField("complex_vfunc"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // complex_vfunc
							, "test_signal_with_static_scope_arg"
							, "_regress_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_regress_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _regress_reserved1
							, "complex_vfunc"
							, "_regress_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_regress_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _regress_reserved2
							, "_regress_reserved1"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_test_signalAlign
		{
			sbyte f1;
			private uint test_signal;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_test_signal_with_static_scope_argAlign
		{
			sbyte f1;
			private uint test_signal_with_static_scope_arg;
		}


		// End of the ABI representation.

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr regress_test_obj_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = regress_test_obj_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_null_out(out IntPtr obj);

		public static Regress.TestObj NullOut() {
			Regress.TestObj obj;
			IntPtr native_obj;
			regress_test_obj_null_out(out native_obj);
			obj = GLib.Object.GetObject(native_obj, true) as Regress.TestObj;
			return obj;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern double regress_test_obj_static_method(int x);

		public static double StaticMethod(int x) {
			double raw_ret = regress_test_obj_static_method(x);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_static_method_callback(RegressSharp.TestCallbackNative cb);

		public static void StaticMethodCallback(Regress.TestCallback cb) {
			RegressSharp.TestCallbackWrapper cb_wrapper = new RegressSharp.TestCallbackWrapper (cb);
			regress_test_obj_static_method_callback(cb_wrapper.NativeDelegate);
		}

		public static void StaticMethodCallback() {
			StaticMethodCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_obj_do_matrix(IntPtr raw, IntPtr somestr);

		public int DoMatrix(string somestr) {
			IntPtr native_somestr = GLib.Marshaller.StringToPtrGStrdup (somestr);
			int raw_ret = regress_test_obj_do_matrix(Handle, native_somestr);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_somestr);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_array_len_prop(IntPtr raw);

		public void EmitSigWithArrayLenProp() {
			regress_test_obj_emit_sig_with_array_len_prop(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_error(IntPtr raw);

		public void EmitSigWithError() {
			regress_test_obj_emit_sig_with_error(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_foreign_struct(IntPtr raw);

		public void EmitSigWithForeignStruct() {
			regress_test_obj_emit_sig_with_foreign_struct(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_inout_int(IntPtr raw);

		public void EmitSigWithInoutInt() {
			regress_test_obj_emit_sig_with_inout_int(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_int64(IntPtr raw);

		public void EmitSigWithInt64() {
			regress_test_obj_emit_sig_with_int64(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_null_error(IntPtr raw);

		public void EmitSigWithNullError() {
			regress_test_obj_emit_sig_with_null_error(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_obj(IntPtr raw);

		public void EmitSigWithObj() {
			regress_test_obj_emit_sig_with_obj(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_emit_sig_with_uint64(IntPtr raw);

		public void EmitSigWithUint64() {
			regress_test_obj_emit_sig_with_uint64(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_forced_method(IntPtr raw);

		public void ForcedMethod() {
			regress_forced_method(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int regress_test_obj_instance_method(IntPtr raw);

		public int InstanceMethod() {
			int raw_ret = regress_test_obj_instance_method(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_instance_method_callback(IntPtr raw, RegressSharp.TestCallbackNative cb);

		public void InstanceMethodCallback(Regress.TestCallback cb) {
			RegressSharp.TestCallbackWrapper cb_wrapper = new RegressSharp.TestCallbackWrapper (cb);
			regress_test_obj_instance_method_callback(Handle, cb_wrapper.NativeDelegate);
		}

		public void InstanceMethodCallback() {
			InstanceMethodCallback (null);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_instance_method_full(IntPtr raw);

		public void InstanceMethodFull() {
			regress_test_obj_instance_method_full(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_name_conflict(IntPtr raw);

		public void NameConflict() {
			regress_test_obj_name_conflict(Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_not_nullable_element_typed_gpointer_in(IntPtr raw, IntPtr[] input, uint count);

		public void NotNullableElementTypedGpointerIn(IntPtr[] input, uint count) {
			regress_test_obj_not_nullable_element_typed_gpointer_in(Handle, input, count);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_not_nullable_typed_gpointer_in(IntPtr raw, IntPtr input);

		public void NotNullableTypedGpointerIn(GLib.Object input) {
			regress_test_obj_not_nullable_typed_gpointer_in(Handle, input == null ? IntPtr.Zero : input.Handle);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_skip_inout_param(IntPtr raw, int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2, out IntPtr error);

		public unsafe bool SkipInoutParam(int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_skip_inout_param(Handle, a, out out_b, c, ref inout_d, out out_sum, num1, num2, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_skip_out_param(IntPtr raw, int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2, out IntPtr error);

		public unsafe bool SkipOutParam(int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_skip_out_param(Handle, a, out out_b, c, ref inout_d, out out_sum, num1, num2, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_skip_param(IntPtr raw, int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2, out IntPtr error);

		public unsafe bool SkipParam(int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_skip_param(Handle, a, out out_b, c, ref inout_d, out out_sum, num1, num2, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_skip_return_val(IntPtr raw, int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2, out IntPtr error);

		public unsafe bool SkipReturnVal(int a, out int out_b, double c, ref int inout_d, out int out_sum, int num1, int num2) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_skip_return_val(Handle, a, out out_b, c, ref inout_d, out out_sum, num1, num2, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_skip_return_val_no_out(IntPtr raw, int a, out IntPtr error);

		public unsafe bool SkipReturnValNoOut(int a) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_skip_return_val_no_out(Handle, a, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void regress_test_obj_torture_signature_0(IntPtr raw, int x, out double y, out int z, IntPtr foo, out int q, uint m);

		public void TortureSignature0(int x, out double y, out int z, string foo, out int q, uint m) {
			IntPtr native_foo = GLib.Marshaller.StringToPtrGStrdup (foo);
			regress_test_obj_torture_signature_0(Handle, x, out y, out z, native_foo, out q, m);
			GLib.Marshaller.Free (native_foo);
		}

		[DllImport("regress-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool regress_test_obj_torture_signature_1(IntPtr raw, int x, out double y, out int z, IntPtr foo, out int q, uint m, out IntPtr error);

		public unsafe bool TortureSignature1(int x, out double y, out int z, string foo, out int q, uint m) {
			IntPtr native_foo = GLib.Marshaller.StringToPtrGStrdup (foo);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = regress_test_obj_torture_signature_1(Handle, x, out y, out z, native_foo, out q, m, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_foo);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("bare"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(GLib.Object)) // bare
							, null
							, "boxed"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_bareAlign), "bare")
							, 0
							),
						new GLib.AbiField("boxed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // boxed
							, "bare"
							, "hash_table"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("hash_table"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // hash_table
							, "boxed"
							, "list"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("list"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // list
							, "hash_table"
							, "some_int8"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("some_int8"
							, -1
							, (uint) Marshal.SizeOf(typeof(sbyte)) // some_int8
							, "list"
							, "some_float"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_some_int8Align), "some_int8")
							, 0
							),
						new GLib.AbiField("some_float"
							, -1
							, (uint) Marshal.SizeOf(typeof(float)) // some_float
							, "some_int8"
							, "some_double"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_some_floatAlign), "some_float")
							, 0
							),
						new GLib.AbiField("some_double"
							, -1
							, (uint) Marshal.SizeOf(typeof(double)) // some_double
							, "some_float"
							, "string"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_some_doubleAlign), "some_double")
							, 0
							),
						new GLib.AbiField("string"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // string
							, "some_double"
							, "gtype"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("gtype"
							, -1
							, (uint) Marshal.SizeOf(typeof(GLib.GType)) // gtype
							, "string"
							, "name_conflict"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_gtypeAlign), "gtype")
							, 0
							),
						new GLib.AbiField("name_conflict"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // name_conflict
							, "gtype"
							, "byte_array"
							, (long) Marshal.OffsetOf(typeof(RegressTestObj_name_conflictAlign), "name_conflict")
							, 0
							),
						new GLib.AbiField("byte_array"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // byte_array
							, "name_conflict"
							, "function_ptr"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("function_ptr"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // function_ptr
							, "byte_array"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_bareAlign
		{
			sbyte f1;
			private GLib.Object bare;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_some_int8Align
		{
			sbyte f1;
			private sbyte some_int8;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_some_floatAlign
		{
			sbyte f1;
			private float some_float;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_some_doubleAlign
		{
			sbyte f1;
			private double some_double;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_gtypeAlign
		{
			sbyte f1;
			private GLib.GType gtype;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct RegressTestObj_name_conflictAlign
		{
			sbyte f1;
			private int name_conflict;
		}


		// End of the ABI representation.

#endregion
	}
}
