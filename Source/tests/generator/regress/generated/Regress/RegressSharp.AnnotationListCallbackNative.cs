// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace RegressSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr AnnotationListCallbackNative(IntPtr in_param);

	internal class AnnotationListCallbackInvoker {

		AnnotationListCallbackNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~AnnotationListCallbackInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal AnnotationListCallbackInvoker (AnnotationListCallbackNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal AnnotationListCallbackInvoker (AnnotationListCallbackNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal AnnotationListCallbackInvoker (AnnotationListCallbackNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Regress.AnnotationListCallback Handler {
			get {
				return new Regress.AnnotationListCallback(InvokeNative);
			}
		}

		string[] InvokeNative (GLib.List in_param)
		{
			string[] __result = (string[]) GLib.Marshaller.ListPtrToArray (native_cb (in_param == null ? IntPtr.Zero : in_param.Handle), typeof(GLib.List), false, true, typeof(string));
			return __result;
		}
	}

	internal class AnnotationListCallbackWrapper {

		public IntPtr NativeCallback (IntPtr in_param)
		{
			try {
				string[] __ret = managed (new GLib.List(in_param));
				if (release_on_call)
					gch.Free ();
				return new GLib.List(__ret, typeof (string), false, true) == null ? IntPtr.Zero : new GLib.List(__ret, typeof (string), false, true).Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal AnnotationListCallbackNative NativeDelegate;
		Regress.AnnotationListCallback managed;

		public AnnotationListCallbackWrapper (Regress.AnnotationListCallback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new AnnotationListCallbackNative (NativeCallback);
		}

		public static Regress.AnnotationListCallback GetManagedDelegate (AnnotationListCallbackNative native)
		{
			if (native == null)
				return null;
			AnnotationListCallbackWrapper wrapper = (AnnotationListCallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
