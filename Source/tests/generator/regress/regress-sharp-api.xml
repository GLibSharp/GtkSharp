<?xml version="1.0" encoding="UTF-8"?>
<api parser_version="3">
  <namespace name="Regress" library="regress-1.0">
    <enum name="ATestError" cname="RegressATestError" type="enum">
      <member cname="REGRESS_ATEST_ERROR_CODE0" name="Code0" value="0"/>
      <member cname="REGRESS_ATEST_ERROR_CODE1" name="Code1" value="1"/>
      <member cname="REGRESS_ATEST_ERROR_CODE2" name="Code2" value="2"/>
    </enum>
    <enum name="FooASingle" cname="RegressFooASingle" type="enum">
      <member cname="REGRESS_FOO_SOME_SINGLE_ENUM" name="FooSomeSingleEnum" value="0"/>
    </enum>
    <enum name="FooAddressType" cname="RegressFooAddressType" type="enum">
      <member cname="REGRESS_FOO_ADDRESS_INVALID" name="Invalid" value="0"/>
      <member cname="REGRESS_FOO_ADDRESS_IPV4" name="Ipv4" value="1"/>
      <member cname="REGRESS_FOO_ADDRESS_IPV6" name="Ipv6" value="2"/>
    </enum>
    <enum name="FooEnumFullname" cname="RegressFooEnumFullname" type="enum">
      <member cname="REGRESS_FOO_ENUM_FULLNAME_ONE" name="One" value="1"/>
      <member cname="REGRESS_FOO_ENUM_FULLNAME_TWO" name="Two" value="2"/>
      <member cname="REGRESS_FOO_ENUM_FULLNAME_THREE" name="Three" value="3"/>
    </enum>
    <enum name="FooEnumNoType" cname="RegressFooEnumNoType" type="enum">
      <member cname="REGRESS_FOO_ENUM_UN" name="Un" value="1"/>
      <member cname="REGRESS_FOO_ENUM_DEUX" name="Deux" value="2"/>
      <member cname="REGRESS_FOO_ENUM_TROIS" name="Trois" value="3"/>
      <member cname="REGRESS_FOO_ENUM_NEUF" name="Neuf" value="9"/>
    </enum>
    <enum name="FooEnumType" cname="RegressFooEnumType" type="enum" gtype="regress_foo_enum_type_get_type">
      <member cname="REGRESS_FOO_ENUM_ALPHA" name="Alpha" value="0"/>
      <member cname="REGRESS_FOO_ENUM_BETA" name="Beta" value="1"/>
      <member cname="REGRESS_FOO_ENUM_DELTA" name="Delta" value="2"/>
    </enum>
    <enum name="FooError" cname="RegressFooError" type="enum" gtype="regress_foo_error_get_type">
      <member cname="REGRESS_FOO_ERROR_GOOD" name="Good" value="0"/>
      <member cname="REGRESS_FOO_ERROR_BAD" name="Bad" value="1"/>
      <member cname="REGRESS_FOO_ERROR_UGLY" name="Ugly" value="2"/>
    </enum>
    <enum name="FooSkippable" cname="RegressFooSkippable" type="enum">
      <member cname="REGRESS_FOO_SKIPPABLE_ONE" name="One" value="0"/>
      <member cname="REGRESS_FOO_SKIPPABLE_TWO" name="Two" value="1"/>
    </enum>
    <enum name="FooStackLayer" cname="RegressFooStackLayer" type="enum">
      <member cname="REGRESS_FOO_LAYER_DESKTOP" name="Desktop" value="0"/>
      <member cname="REGRESS_FOO_LAYER_BOTTOM" name="Bottom" value="1"/>
      <member cname="REGRESS_FOO_LAYER_NORMAL" name="Normal" value="2"/>
      <member cname="REGRESS_FOO_LAYER_TOP" name="Top" value="4"/>
      <member cname="REGRESS_FOO_LAYER_DOCK" name="Dock" value="4"/>
      <member cname="REGRESS_FOO_LAYER_FULLSCREEN" name="Fullscreen" value="5"/>
      <member cname="REGRESS_FOO_LAYER_FOCUSED_WINDOW" name="FocusedWindow" value="6"/>
      <member cname="REGRESS_FOO_LAYER_OVERRIDE_REDIRECT" name="OverrideRedirect" value="7"/>
      <member cname="REGRESS_FOO_LAYER_LAST" name="Last" value="8"/>
    </enum>
    <enum name="TestABCError" cname="RegressTestABCError" type="enum" gtype="regress_test_abc_error_get_type">
      <member cname="REGRESS_TEST_ABC_ERROR_CODE1" name="Code1" value="1"/>
      <member cname="REGRESS_TEST_ABC_ERROR_CODE2" name="Code2" value="2"/>
      <member cname="REGRESS_TEST_ABC_ERROR_CODE3" name="Code3" value="3"/>
    </enum>
    <enum name="TestDEFError" cname="RegressTestDEFError" type="enum">
      <member cname="REGRESS_TEST_DEF_ERROR_CODE0" name="Code0" value="0"/>
      <member cname="REGRESS_TEST_DEF_ERROR_CODE1" name="Code1" value="1"/>
      <member cname="REGRESS_TEST_DEF_ERROR_CODE2" name="Code2" value="2"/>
    </enum>
    <enum name="TestEnum" cname="RegressTestEnum" type="enum" gtype="regress_test_enum_get_type">
      <member cname="REGRESS_TEST_VALUE3" name="Value3" value="-1"/>
      <member cname="REGRESS_TEST_VALUE1" name="Value1" value="0"/>
      <member cname="REGRESS_TEST_VALUE2" name="Value2" value="1"/>
      <member cname="REGRESS_TEST_VALUE4" name="Value4" value="48"/>
      <member cname="REGRESS_TEST_VALUE5" name="Value5" value="49"/>
    </enum>
    <enum name="TestEnumNoGEnum" cname="RegressTestEnumNoGEnum" type="enum">
      <member cname="REGRESS_TEST_EVALUE1" name="Evalue1" value="0"/>
      <member cname="REGRESS_TEST_EVALUE2" name="Evalue2" value="42"/>
      <member cname="REGRESS_TEST_EVALUE3" name="Evalue3" value="48"/>
    </enum>
    <enum name="TestEnumUnsigned" cname="RegressTestEnumUnsigned" type="enum" gtype="regress_test_enum_unsigned_get_type">
      <member cname="REGRESS_TEST_UNSIGNED_VALUE1" name="Value1" value="1"/>
      <member cname="REGRESS_TEST_UNSIGNED_VALUE2" name="Value2" value="2147483648"/>
    </enum>
    <enum name="TestError" cname="RegressTestError" type="enum" gtype="regress_test_error_get_type">
      <member cname="REGRESS_TEST_ERROR_CODE1" name="Code1" value="1"/>
      <member cname="REGRESS_TEST_ERROR_CODE2" name="Code2" value="2"/>
      <member cname="REGRESS_TEST_ERROR_CODE3" name="Code3" value="3"/>
    </enum>
    <enum name="TestOtherError" cname="RegressTestOtherError" type="enum" gtype="regress_test_unconventional_error_get_type">
      <member cname="REGRESS_TEST_OTHER_ERROR_CODE1" name="Code1" value="1"/>
      <member cname="REGRESS_TEST_OTHER_ERROR_CODE2" name="Code2" value="2"/>
      <member cname="REGRESS_TEST_OTHER_ERROR_CODE3" name="Code3" value="3"/>
    </enum>
    <enum name="TestReferenceEnum" cname="RegressTestReferenceEnum" type="enum">
      <member cname="REGRESS_TEST_REFERENCE_5" name="_5" value="-217"/>
      <member cname="REGRESS_TEST_REFERENCE_1" name="_1" value="2"/>
      <member cname="REGRESS_TEST_REFERENCE_0" name="_0" value="4"/>
      <member cname="REGRESS_TEST_REFERENCE_3" name="_3" value="4"/>
      <member cname="REGRESS_TEST_REFERENCE_2" name="_2" value="54"/>
      <member cname="REGRESS_TEST_REFERENCE_4" name="_4" value="216"/>
    </enum>
    <enum name="AnnotationBitfield" cname="RegressAnnotationBitfield" type="flags">
      <member cname="ANN_FLAG_FOO" name="Foo" value="1"/>
      <member cname="ANN_FLAG_BAR" name="Bar" value="2"/>
      <member cname="ANN_FLAG_FOOBAR" name="Foobar" value="3"/>
    </enum>
    <enum name="FooFlagsNoType" cname="RegressFooFlagsNoType" type="flags">
      <member cname="REGRESS_FOO_FLAGS_ETT" name="Ett" value="1"/>
      <member cname="REGRESS_FOO_FLAGS_TVA" name="Tva" value="2"/>
      <member cname="REGRESS_FOO_FLAGS_FYRA" name="Fyra" value="4"/>
    </enum>
    <enum name="FooFlagsType" cname="RegressFooFlagsType" type="flags" gtype="regress_foo_flags_type_get_type">
      <member cname="REGRESS_FOO_FLAGS_FIRST" name="First" value="1"/>
      <member cname="REGRESS_FOO_FLAGS_SECOND" name="Second" value="2"/>
      <member cname="REGRESS_FOO_FLAGS_THIRD" name="Third" value="4"/>
    </enum>
    <enum name="TestFlags" cname="RegressTestFlags" type="flags" gtype="regress_test_flags_get_type">
      <member cname="REGRESS_TEST_FLAG1" name="Flag1" value="1"/>
      <member cname="REGRESS_TEST_FLAG2" name="Flag2" value="2"/>
      <member cname="REGRESS_TEST_FLAG3" name="Flag3" value="4"/>
    </enum>
    <enum name="TestPrivateEnum" cname="RegressTestPrivateEnum" type="flags">
      <member cname="REGRESS_TEST_PUBLIC_ENUM_BEFORE" name="PublicEnumBefore" value="1"/>
      <member cname="REGRESS_TEST_PUBLIC_ENUM_AFTER" name="PublicEnumAfter" value="4"/>
    </enum>
    <callback name="AnnotationCallback" cname="RegressAnnotationCallback">
      <return-type type="gint"/>
      <parameters>
        <parameter name="in" type="gint"/>
      </parameters>
    </callback>
    <callback name="AnnotationForeachFunc" cname="RegressAnnotationForeachFunc">
      <return-type type="void"/>
      <parameters>
        <parameter name="_object" type="RegressAnnotationObject*"/>
        <parameter name="item" type="const-gchar*"/>
        <parameter allow-none="1" closure="2" name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="AnnotationListCallback" cname="RegressAnnotationListCallback">
      <return-type type="GList*" element_type="gchar*" elements_owned="true"/>
      <parameters>
        <parameter name="in" type="GList*" element_type="const-gchar*"/>
      </parameters>
    </callback>
    <callback name="AnnotationNotifyFunc" cname="RegressAnnotationNotifyFunc">
      <return-type type="void"/>
      <parameters>
        <parameter allow-none="1" closure="0" name="data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="FooCallback" cname="RegressFooCallback">
      <return-type type="gboolean"/>
      <parameters>
        <parameter name="regress_foo" type="RegressFooObject*"/>
        <parameter name="b" type="gboolean"/>
        <parameter allow-none="1" name="data" type="gpointer"/>
      </parameters>
    </callback>
    <callback hidden="0" name="FooVarargsCallback" cname="RegressFooVarargsCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="param" type="const-gchar*"/>
        <parameter name="..." type="va_list"/>
      </parameters>
    </callback>
    <callback name="TestCallback" cname="RegressTestCallback">
      <return-type type="gint"/>
    </callback>
    <callback name="TestCallbackArray" cname="RegressTestCallbackArray">
      <return-type type="gint"/>
      <parameters>
        <parameter name="one" type="int*" array="true" array_length_param_index="1"/>
        <parameter name="one_length" type="gsize"/>
        <parameter name="two" type="const char**" array="true" array_length_param_index="3"/>
        <parameter name="two_length" type="gint" array_index="2"/>
      </parameters>
    </callback>
    <callback name="TestCallbackArrayInOut" cname="RegressTestCallbackArrayInOut">
      <return-type type="void"/>
      <parameters>
        <parameter name="ints" type="int***" owned="true" pass_as="ref" array="true" array_length_param_index="1"/>
        <parameter name="length" type="gint" pass_as="ref"/>
      </parameters>
    </callback>
    <callback name="TestCallbackFull" cname="RegressTestCallbackFull">
      <return-type type="gint"/>
      <parameters>
        <parameter name="foo" type="gint"/>
        <parameter name="bar" type="gdouble"/>
        <parameter name="path" type="const-gfilename*"/>
      </parameters>
    </callback>
    <callback name="TestCallbackGError" cname="RegressTestCallbackGError">
      <return-type type="void"/>
      <parameters>
        <parameter name="error" type="GLib.Error"/>
      </parameters>
    </callback>
    <callback name="TestCallbackHashtable" cname="RegressTestCallbackHashtable">
      <return-type type="void"/>
      <parameters>
        <parameter name="data" type="GHashTable*" element_type="const-gchar*"/>
      </parameters>
    </callback>
    <callback name="TestCallbackOwnedGError" cname="RegressTestCallbackOwnedGError">
      <return-type type="void"/>
      <parameters>
        <parameter name="error" type="GLib.Error*" owned="true"/>
      </parameters>
    </callback>
    <callback name="TestCallbackReturnFull" cname="RegressTestCallbackReturnFull">
      <return-type type="RegressTestObj*" owned="true"/>
    </callback>
    <callback name="TestCallbackUserData" cname="RegressTestCallbackUserData">
      <return-type type="gint"/>
      <parameters>
        <parameter allow-none="1" closure="0" name="user_data" type="gpointer"/>
      </parameters>
    </callback>
    <callback name="TestExternallyDefinedCallback" cname="RegressTestExternallyDefinedCallback">
      <return-type type="void"/>
      <parameters>
        <parameter name="obj" type="RegressTestObj*"/>
        <parameter name="someint" type="gint"/>
      </parameters>
    </callback>
    <callback name="TestFundamentalObjectCopyFunction" cname="RegressTestFundamentalObjectCopyFunction">
      <return-type type="RegressTestFundamentalObject*" owned="true"/>
      <parameters>
        <parameter name="obj" type="RegressTestFundamentalObject*"/>
      </parameters>
    </callback>
    <callback name="TestFundamentalObjectFinalizeFunction" cname="RegressTestFundamentalObjectFinalizeFunction">
      <return-type type="void"/>
      <parameters>
        <parameter name="obj" type="RegressTestFundamentalObject*"/>
      </parameters>
    </callback>
    <callback name="TestNoPtrCallback" cname="RegressTestNoPtrCallback">
      <return-type type="void"/>
    </callback>
    <callback name="TestSimpleCallback" cname="RegressTestSimpleCallback">
      <return-type type="void"/>
    </callback>
    <interface name="FooInterface" cname="RegressFooInterface" opaque="false" hidden="false">
      <class_struct cname="RegressFooInterfaceIface">
        <field cname="parent_iface" access="public" writeable="false" readable="true" is_callback="false" name="ParentIface" type="GObject.TypeInterface"/>
        <method vm="do_regress_foo"/>
      </class_struct>
      <method name="GetType" cname="regress_foo_interface_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="StaticMethod" cname="regress_foo_interface_static_method" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <virtual_method name="DoRegressFoo" cname="do_regress_foo">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </virtual_method>
      <method name="DoRegressFoo" cname="regress_foo_interface_do_regress_foo">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
    </interface>
    <interface name="FooSubInterface" cname="RegressFooSubInterface" opaque="false" hidden="false">
      <class_struct cname="RegressFooSubInterfaceIface">
        <field cname="parent_iface" access="public" writeable="false" readable="true" is_callback="false" name="ParentIface" type="GObject.TypeInterface"/>
        <method signal_vm="destroy_event"/>
        <method vm="do_bar"/>
        <method vm="do_baz"/>
      </class_struct>
      <method name="GetType" cname="regress_foo_sub_interface_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <virtual_method name="DoBar" cname="do_bar">
        <return-type type="void"/>
        <parameters/>
      </virtual_method>
      <virtual_method name="DoBaz" cname="do_baz">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" scope="call" name="callback" type="GObject.Callback"/>
          <parameter closure="1" allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </virtual_method>
      <method name="DoBar" cname="regress_foo_sub_interface_do_bar">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="DoBaz" cname="regress_foo_sub_interface_do_baz">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" scope="call" name="callback" type="GObject.Callback"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <signal name="DestroyEvent" cname="destroy-event" when="last" field_name="destroy_event">
        <return-type type="void"/>
        <parameters/>
      </signal>
    </interface>
    <interface name="TestInterface" cname="RegressTestInterface" opaque="false" hidden="false">
      <class_struct cname="RegressTestInterfaceIface">
        <field cname="base_iface" access="public" writeable="false" readable="true" is_callback="false" name="BaseIface" type="GObject.TypeInterface"/>
      </class_struct>
      <method name="GetType" cname="regress_test_interface_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="EmitSignal" cname="regress_test_interface_emit_signal">
        <return-type type="void"/>
        <parameters/>
      </method>
      <property name="Number" cname="number" type="gint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <signal name="InterfaceSignal" cname="interface-signal" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="ptr" type="gint"/>
        </parameters>
      </signal>
    </interface>
    <object name="AnnotationObject" cname="RegressAnnotationObject" opaque="false" hidden="false" parent="GObject.Object">
      <class_struct cname="RegressAnnotationObjectClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.ObjectClass"/>
      </class_struct>
      <method name="GetType" cname="regress_annotation_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="AllowNone" cname="regress_annotation_object_allow_none">
        <return-type type="GObject.Object"/>
        <parameters>
          <parameter allow-none="1" name="somearg" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="Calleeowns" cname="regress_annotation_object_calleeowns">
        <return-type type="gint"/>
        <parameters>
          <parameter name="toown" type="GObject.Object*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="Calleesowns" cname="regress_annotation_object_calleesowns">
        <return-type type="gint"/>
        <parameters>
          <parameter name="toown1" type="GObject.Object*" owned="true" pass_as="out"/>
          <parameter name="toown2" type="GObject.Object" pass_as="out"/>
        </parameters>
      </method>
      <method name="ComputeSum" cname="regress_annotation_object_compute_sum">
        <return-type type="void"/>
        <parameters>
          <parameter name="nums" type="int*" array="true"/>
        </parameters>
      </method>
      <method name="ComputeSumN" cname="regress_annotation_object_compute_sum_n">
        <return-type type="void"/>
        <parameters>
          <parameter name="nums" type="int*" array="true" array_length_param_index="1"/>
          <parameter name="n_nums" type="gint"/>
        </parameters>
      </method>
      <method name="ComputeSumNz" cname="regress_annotation_object_compute_sum_nz">
        <return-type type="void"/>
        <parameters>
          <parameter name="nums" type="int*" array="true" array_length_param_index="1"/>
          <parameter name="n_nums" type="gint"/>
        </parameters>
      </method>
      <method name="CreateObject" cname="regress_annotation_object_create_object">
        <return-type type="GObject.Object*" owned="true"/>
        <parameters/>
      </method>
      <method name="DoNotUse" cname="regress_annotation_object_do_not_use" deprecated="true" deprecated-version="0.12">
        <return-type type="GObject.Object"/>
        <parameters/>
      </method>
      <method name="ExtraAnnos" cname="regress_annotation_object_extra_annos">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="Foreach" cname="regress_annotation_object_foreach">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" scope="call" name="func" type="RegressAnnotationForeachFunc"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="GetHash" cname="regress_annotation_object_get_hash">
        <return-type type="GHashTable*" element_type="gchar*" elements_owned="true" owned="true"/>
        <parameters/>
      </method>
      <method name="GetObjects" cname="regress_annotation_object_get_objects">
        <return-type type="GSList*" element_type="RegressAnnotationObject*" elements_owned="true"/>
        <parameters/>
      </method>
      <method name="GetStrings" cname="regress_annotation_object_get_strings">
        <return-type type="GList*" element_type="gchar*" elements_owned="true" owned="true"/>
        <parameters/>
      </method>
      <method name="HiddenSelf" cname="regress_annotation_object_hidden_self">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="In" cname="regress_annotation_object_in">
        <return-type type="gint"/>
        <parameters>
          <parameter name="inarg" type="gint"/>
        </parameters>
      </method>
      <method name="Inout" cname="regress_annotation_object_inout">
        <return-type type="gint"/>
        <parameters>
          <parameter name="inoutarg" type="gint*" owned="true" pass_as="ref"/>
        </parameters>
      </method>
      <method name="Inout2" cname="regress_annotation_object_inout2">
        <return-type type="gint"/>
        <parameters>
          <parameter name="inoutarg" type="gint*" owned="true" pass_as="ref"/>
        </parameters>
      </method>
      <method name="Inout3" cname="regress_annotation_object_inout3">
        <return-type type="gint"/>
        <parameters>
          <parameter allow-none="1" name="inoutarg" type="gint*" owned="true" pass_as="ref"/>
        </parameters>
      </method>
      <method name="Method" cname="regress_annotation_object_method">
        <return-type type="gint"/>
        <parameters/>
      </method>
      <method name="Notrans" cname="regress_annotation_object_notrans">
        <return-type type="GObject.Object"/>
        <parameters/>
      </method>
      <method name="Out" cname="regress_annotation_object_out">
        <return-type type="gint"/>
        <parameters>
          <parameter name="outarg" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="ParseArgs" cname="regress_annotation_object_parse_args">
        <return-type type="void" array_index="1"/>
        <parameters>
          <parameter name="argc" type="gint*" owned="true" pass_as="ref" array_index="1"/>
          <parameter name="argv" type="char****" owned="true" pass_as="ref" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="SetData" cname="regress_annotation_object_set_data">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="const guchar*" array="true" array_length_param_index="1"/>
          <parameter name="length" type="gsize"/>
        </parameters>
      </method>
      <method name="SetData2" cname="regress_annotation_object_set_data2">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="const gchar*" array="true" array_length_param_index="1"/>
          <parameter name="length" type="gsize"/>
        </parameters>
      </method>
      <method name="SetData3" cname="regress_annotation_object_set_data3">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="gpointer" array="true" array_length_param_index="1"/>
          <parameter name="length" type="gsize"/>
        </parameters>
      </method>
      <method name="StringOut" cname="regress_annotation_object_string_out">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="str_out" type="gchar*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="UseBuffer" cname="regress_annotation_object_use_buffer">
        <return-type type="void"/>
        <parameters>
          <parameter name="bytes" type="guint8"/>
        </parameters>
      </method>
      <method name="WatchFull" cname="regress_annotation_object_watch_full">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="func" type="RegressAnnotationForeachFunc"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
          <parameter scope="async" name="destroy" type="GLib.DestroyNotify"/>
        </parameters>
      </method>
      <method name="WithVoidp" cname="regress_annotation_object_with_voidp">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="data" type="gpointer"/>
        </parameters>
      </method>
      <property name="FunctionProperty" cname="function-property" type="RegressAnnotationCallback" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="StringProperty" cname="string-property" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false" version="1.0" deprecated="true" deprecated-version="1.2"/>
      <property name="TabProperty" cname="tab-property" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false" version="1.2"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.Object"/>
      <signal name="AttributeSignal" cname="attribute-signal" when="last">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="arg1" type="const-gchar*"/>
          <parameter name="arg2" type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="DocEmptyArgParsing" cname="doc-empty-arg-parsing" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="arg1" type="gpointer"/>
        </parameters>
      </signal>
      <signal name="ListSignal" cname="list-signal" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="list" type="gpointer" element_type="gchar*" elements_owned="true"/>
        </parameters>
      </signal>
      <signal name="StringSignal" cname="string-signal" when="last" version="1.0" deprecated="true" deprecated-version="1.2">
        <return-type type="void"/>
        <parameters>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </signal>
    </object>
    <object name="FooBuffer" cname="RegressFooBuffer" opaque="false" hidden="false" parent="RegressFooObject">
      <implements>
        <interface cname="RegressFooInterface"/>
      </implements>
      <class_struct cname="RegressFooBufferClass"/>
      <method name="GetType" cname="regress_foo_buffer_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="SomeMethod" cname="regress_foo_buffer_some_method">
        <return-type type="void"/>
        <parameters/>
      </method>
    </object>
    <object name="FooObject" cname="RegressFooObject" opaque="false" hidden="false" parent="GObject.Object">
      <implements>
        <interface cname="RegressFooInterface"/>
      </implements>
      <class_struct cname="RegressFooObjectClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.ObjectClass"/>
        <method vm="virtual_method"/>
        <method vm="read_fn"/>
        <field cname="_reserved" access="public" writeable="false" readable="true" is_callback="false" name="_Reserved" type="GCallback" array="true" array_len="4"/>
      </class_struct>
      <method name="GetType" cname="regress_foo_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_foo_object_new" disable_void_ctor=""/>
      <constructor cname="regress_foo_object_new_as_super" disable_void_ctor=""/>
      <method name="AGlobalMethod" cname="regress_foo_object_a_global_method" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="obj" type="Utility.Object"/>
        </parameters>
      </method>
      <method name="GetDefault" cname="regress_foo_object_get_default" shared="true">
        <return-type type="RegressFooSubobject*"/>
      </method>
      <method name="StaticMeth" cname="regress_foo_object_static_meth" shared="true">
        <return-type type="gint"/>
      </method>
      <virtual_method name="ReadFn" cname="read_fn">
        <return-type type="void"/>
        <parameters>
          <parameter name="offset" type="gint"/>
          <parameter name="length" type="gint"/>
        </parameters>
      </virtual_method>
      <virtual_method name="VirtualMethod" cname="virtual_method">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="first_param" type="gint"/>
        </parameters>
      </virtual_method>
      <method name="AppendNewStackLayer" cname="regress_foo_object_append_new_stack_layer">
        <return-type type="RegressFooOtherObject*"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="DupName" cname="regress_foo_object_dup_name">
        <return-type type="gchar*" owned="true"/>
        <parameters/>
      </method>
      <method name="ExternalType" cname="regress_foo_object_external_type">
        <return-type type="Utility.Object"/>
        <parameters/>
      </method>
      <method name="GetName" cname="regress_foo_object_get_name">
        <return-type type="const-gchar*"/>
        <parameters/>
      </method>
      <method name="HandleGlyph" cname="regress_foo_object_handle_glyph">
        <return-type type="void"/>
        <parameters>
          <parameter name="glyph" type="Utility.Glyph"/>
        </parameters>
      </method>
      <method name="IsItTimeYet" cname="regress_foo_object_is_it_time_yet">
        <return-type type="void"/>
        <parameters>
          <parameter name="time" type="glong"/>
        </parameters>
      </method>
      <method name="Read" cname="regress_foo_object_read">
        <return-type type="void"/>
        <parameters>
          <parameter name="offset" type="gint"/>
          <parameter name="length" type="gint"/>
        </parameters>
      </method>
      <method name="Various" cname="regress_foo_object_various">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="data" type="gpointer"/>
          <parameter name="some_type" type="GType"/>
        </parameters>
      </method>
      <method name="VirtualMethod" cname="regress_foo_object_virtual_method">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="first_param" type="gint"/>
        </parameters>
      </method>
      <property name="String" cname="string" type="gchar*" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.Object"/>
      <field cname="some_int" access="public" writeable="false" readable="true" is_callback="false" name="SomeInt" type="gint"/>
      <signal name="Signal" cname="signal" when="last">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="_object" type="GObject.Object"/>
          <parameter allow-none="1" name="p0" type="gpointer"/>
        </parameters>
      </signal>
    </object>
    <object name="FooOtherObject" cname="RegressFooOtherObject" opaque="false" hidden="false" parent="GObject.Object">
      <class_struct cname="RegressFooOtherObjectClass"/>
      <method name="GetType" cname="regress_foo_other_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
    </object>
    <object name="FooSubobject" cname="RegressFooSubobject" defaultconstructoraccess="protected" opaque="false" hidden="false" parent="RegressFooObject">
      <implements>
        <interface cname="RegressFooInterface"/>
      </implements>
      <class_struct cname="RegressFooSubobjectClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="RegressFooObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="regress_foo_subobject_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_foo_subobject_new" disable_void_ctor=""/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="RegressFooObject*"/>
    </object>
    <object name="TestFloating" cname="RegressTestFloating" opaque="false" hidden="false" parent="GObject.InitiallyUnowned">
      <class_struct cname="RegressTestFloatingClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.InitiallyUnownedClass"/>
      </class_struct>
      <method name="GetType" cname="regress_test_floating_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_floating_new" disable_void_ctor=""/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.InitiallyUnowned"/>
    </object>
    <struct name="TestFundamentalObject" cname="RegressTestFundamentalObject" defaultconstructoraccess="protected" opaque="true" hidden="false">
      <class_struct cname="RegressTestFundamentalObjectClass">
        <field cname="type_class" access="public" writeable="false" readable="true" is_callback="false" name="TypeClass" type="GObject.TypeClass"/>
        <field cname="copy" access="public" writeable="false" readable="true" is_callback="false" name="Copy" type="RegressTestFundamentalObjectCopyFunction"/>
        <field cname="finalize" access="public" writeable="false" readable="true" is_callback="false" name="Finalize" type="RegressTestFundamentalObjectFinalizeFunction"/>
      </class_struct>
      <method name="GetType" cname="regress_test_fundamental_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_value_get_fundamental_object">
        <parameters>
          <parameter name="value" type="GValue*"/>
        </parameters>
      </constructor>
      <method name="SetGValue" cname="regress_test_value_set_fundamental_object" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="value" type="GValue*" pass_as="ref"/>
          <parameter name="obj" type="RegressTestFundamentalObject*"/>
        </parameters>
      </method>
      <method name="Ref" cname="regress_test_fundamental_object_ref">
        <return-type type="RegressTestFundamentalObject*" owned="true"/>
        <parameters/>
      </method>
      <method name="Unref" cname="regress_test_fundamental_object_unref">
        <return-type type="void"/>
        <parameters/>
      </method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="RegressTestFundamentalObject*" owned="true"/>
        <parameters/>
      </virtual_method>
      <virtual_method name="Finalize" cname="finalize">
        <return-type type="void"/>
        <parameters/>
      </virtual_method>
      <method name="Ref" cname="regress_test_fundamental_object_ref">
        <return-type type="RegressTestFundamentalObject*" owned="true"/>
        <parameters/>
      </method>
      <method name="Unref" cname="regress_test_fundamental_object_unref">
        <return-type type="void"/>
        <parameters/>
      </method>
      <field cname="instance" access="public" writeable="false" readable="true" is_callback="false" name="Instance" type="GObject.TypeInstance"/>
      <field cname="refcount" access="public" writeable="false" readable="true" is_callback="false" name="Refcount" type="gint"/>
      <field cname="flags" access="public" writeable="false" readable="true" is_callback="false" name="Flags" type="guint"/>
    </struct>
    <struct name="TestFundamentalObjectNoGetSetFunc" cname="RegressTestFundamentalObjectNoGetSetFunc" opaque="true" hidden="false">
      <class_struct cname="RegressTestFundamentalObjectNoGetSetFuncClass">
        <field cname="fundamental_object_class" access="public" writeable="false" readable="true" is_callback="false" name="FundamentalObjectClass" type="RegressTestFundamentalObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="regress_test_fundamental_object_no_get_set_func_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Ref" cname="regress_test_fundamental_object_ref">
        <return-type type="RegressTestFundamentalObjectNoGetSetFunc*" owned="true"/>
        <parameters/>
      </method>
      <method name="Unref" cname="regress_test_fundamental_object_unref">
        <return-type type="void"/>
        <parameters/>
      </method>
      <constructor cname="regress_test_fundamental_object_no_get_set_func_new">
        <parameters>
          <parameter name="data" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="MakeCompatibleWithFundamentalSubObject" cname="regress_test_fundamental_object_no_get_set_func_make_compatible_with_fundamental_sub_object" shared="true">
        <return-type type="void"/>
      </method>
      <method name="GetData" cname="regress_test_fundamental_object_no_get_set_func_get_data">
        <return-type type="const-gchar*"/>
        <parameters/>
      </method>
      <field cname="fundamental_object" access="private" writeable="false" readable="false" is_callback="false" name="FundamentalObject" type="RegressTestFundamentalObject*"/>
      <field cname="data" access="public" writeable="false" readable="true" is_callback="false" name="Data" type="gchar*"/>
    </struct>
    <struct name="TestFundamentalSubObject" cname="RegressTestFundamentalSubObject" opaque="true" hidden="false" parent="RegressTestFundamentalObject">
      <class_struct cname="RegressTestFundamentalSubObjectClass">
        <field cname="fundamental_object_class" access="public" writeable="false" readable="true" is_callback="false" name="FundamentalObjectClass" type="RegressTestFundamentalObjectClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="regress_test_fundamental_sub_object_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_fundamental_sub_object_new">
        <parameters>
          <parameter name="data" type="const-gchar*"/>
        </parameters>
      </constructor>
      <field cname="fundamental_object" access="public" writeable="false" readable="true" is_callback="false" name="FundamentalObject" type="RegressTestFundamentalObject*"/>
      <field cname="data" access="public" writeable="false" readable="true" is_callback="false" name="Data" type="gchar*"/>
    </struct>
    <struct name="TestFundamentalSubObjectNoGetSetFunc" cname="RegressTestFundamentalSubObjectNoGetSetFunc" opaque="true" hidden="false" parent="RegressTestFundamentalObjectNoGetSetFunc">
      <class_struct cname="RegressTestFundamentalSubObjectNoGetSetFuncClass">
        <field cname="fundamental_object_class" access="public" writeable="false" readable="true" is_callback="false" name="FundamentalObjectClass" type="RegressTestFundamentalObjectNoGetSetFuncClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="regress_test_fundamental_sub_object_no_get_set_func_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_fundamental_sub_object_no_get_set_func_new">
        <parameters>
          <parameter name="data" type="const-gchar*"/>
        </parameters>
      </constructor>
      <field cname="fundamental_object" access="private" writeable="false" readable="false" is_callback="false" name="FundamentalObject" type="RegressTestFundamentalObjectNoGetSetFunc*"/>
    </struct>
    <object name="TestInheritDrawable" cname="RegressTestInheritDrawable" defaultconstructoraccess="protected" opaque="false" hidden="false" parent="GObject.Object">
      <class_struct cname="RegressTestInheritDrawableClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.ObjectClass"/>
      </class_struct>
      <method name="GetType" cname="regress_test_inherit_drawable_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="DoFoo" cname="regress_test_inherit_drawable_do_foo">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="DoFooMaybeThrow" cname="regress_test_inherit_drawable_do_foo_maybe_throw">
        <return-type type="void"/>
        <parameters throws="1">
          <parameter name="x" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="GetOrigin" cname="regress_test_inherit_drawable_get_origin">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint*" owned="true" pass_as="out"/>
          <parameter name="y" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="GetSize" cname="regress_test_inherit_drawable_get_size">
        <return-type type="void"/>
        <parameters>
          <parameter name="width" type="guint*" owned="true" pass_as="out"/>
          <parameter name="height" type="guint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.Object"/>
    </object>
    <object name="TestObj" cname="RegressTestObj" opaque="false" hidden="false" parent="GObject.Object">
      <class_struct cname="RegressTestObjClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.ObjectClass"/>
        <method vm="matrix"/>
        <method vm="allow_none_vfunc"/>
        <field cname="test_signal" access="public" writeable="false" readable="true" is_callback="false" name="TestSignal" type="guint"/>
        <field cname="test_signal_with_static_scope_arg" access="public" writeable="false" readable="true" is_callback="false" name="TestSignalWithStaticScopeArg" type="guint"/>
        <field cname="complex_vfunc" access="public" writeable="false" readable="true" is_callback="false" name="ComplexVfunc" type="RegressTestExternallyDefinedCallback"/>
        <method vm="_regress_reserved1"/>
        <method vm="_regress_reserved2"/>
      </class_struct>
      <virtual_method name="_regressRegressReserved1" cname="_regress_reserved1" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <virtual_method name="_regressRegressReserved2" cname="_regress_reserved2" shared="true" hidden="true">
        <return-type type="void"/>
      </virtual_method>
      <method name="GetType" cname="regress_test_obj_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_constructor" disable_void_ctor=""/>
      <constructor cname="regress_test_obj_new">
        <parameters>
          <parameter name="obj" type="RegressTestObj*"/>
        </parameters>
      </constructor>
      <constructor cname="regress_test_obj_new_callback">
        <parameters>
          <parameter name="callback" type="RegressTestCallbackUserData"/>
          <parameter name="user_data" type="gpointer"/>
          <parameter name="notify" type="GLib.DestroyNotify"/>
        </parameters>
      </constructor>
      <constructor cname="regress_test_obj_new_from_file">
        <parameters>
          <parameter name="x" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="NullOut" cname="regress_test_obj_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="obj" type="RegressTestObj*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="StaticMethod" cname="regress_test_obj_static_method" shared="true">
        <return-type type="gdouble"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="StaticMethodCallback" cname="regress_test_obj_static_method_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestCallback"/>
        </parameters>
      </method>
      <virtual_method name="AllowNoneVfunc" cname="allow_none_vfunc">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="two" type="RegressTestObj*"/>
        </parameters>
      </virtual_method>
      <virtual_method name="ComplexVfunc" cname="complex_vfunc">
        <return-type type="void"/>
        <parameters>
          <parameter name="someint" type="gint"/>
        </parameters>
      </virtual_method>
      <virtual_method name="Matrix" cname="matrix">
        <return-type type="gint"/>
        <parameters>
          <parameter name="somestr" type="const-gchar*"/>
        </parameters>
      </virtual_method>
      <method name="DoMatrix" cname="regress_test_obj_do_matrix">
        <return-type type="gint"/>
        <parameters>
          <parameter name="somestr" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="EmitSigWithArrayLenProp" cname="regress_test_obj_emit_sig_with_array_len_prop">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithError" cname="regress_test_obj_emit_sig_with_error">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithForeignStruct" cname="regress_test_obj_emit_sig_with_foreign_struct">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithInoutInt" cname="regress_test_obj_emit_sig_with_inout_int">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithInt64" cname="regress_test_obj_emit_sig_with_int64">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithNullError" cname="regress_test_obj_emit_sig_with_null_error">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithObj" cname="regress_test_obj_emit_sig_with_obj">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="EmitSigWithUint64" cname="regress_test_obj_emit_sig_with_uint64">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="ForcedMethod" cname="regress_forced_method">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="GetString" cname="regress_test_obj_get_string">
        <return-type type="const-gchar*"/>
        <parameters/>
      </method>
      <method name="InstanceMethod" cname="regress_test_obj_instance_method">
        <return-type type="gint"/>
        <parameters/>
      </method>
      <method name="InstanceMethodCallback" cname="regress_test_obj_instance_method_callback">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestCallback"/>
        </parameters>
      </method>
      <method name="InstanceMethodFull" cname="regress_test_obj_instance_method_full">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="NameConflict" cname="regress_test_obj_name_conflict">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="NotNullableElementTypedGpointerIn" cname="regress_test_obj_not_nullable_element_typed_gpointer_in">
        <return-type type="void"/>
        <parameters>
          <parameter name="input" type="gpointer" array="true" array_length_param_index="1"/>
          <parameter name="count" type="guint"/>
        </parameters>
      </method>
      <method name="NotNullableTypedGpointerIn" cname="regress_test_obj_not_nullable_typed_gpointer_in">
        <return-type type="void"/>
        <parameters>
          <parameter name="input" type="GObject.Object"/>
        </parameters>
      </method>
      <method name="SetBare" cname="regress_test_obj_set_bare">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="bare" type="GObject.Object"/>
        </parameters>
      </method>
      <method name="SetString" cname="regress_test_obj_set_string">
        <return-type type="void"/>
        <parameters>
          <parameter name="str" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="SkipInoutParam" cname="regress_test_obj_skip_inout_param">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="a" type="gint"/>
          <parameter name="out_b" type="gint*" owned="true" pass_as="out"/>
          <parameter name="c" type="gdouble"/>
          <parameter name="inout_d" type="gint*" owned="true" pass_as="ref"/>
          <parameter name="out_sum" type="gint*" owned="true" pass_as="out"/>
          <parameter name="num1" type="gint"/>
          <parameter name="num2" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SkipOutParam" cname="regress_test_obj_skip_out_param">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="a" type="gint"/>
          <parameter name="out_b" type="gint*" owned="true" pass_as="out"/>
          <parameter name="c" type="gdouble"/>
          <parameter name="inout_d" type="gint*" owned="true" pass_as="ref"/>
          <parameter name="out_sum" type="gint*" owned="true" pass_as="out"/>
          <parameter name="num1" type="gint"/>
          <parameter name="num2" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SkipParam" cname="regress_test_obj_skip_param">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="a" type="gint"/>
          <parameter name="out_b" type="gint*" owned="true" pass_as="out"/>
          <parameter name="c" type="gdouble"/>
          <parameter name="inout_d" type="gint*" owned="true" pass_as="ref"/>
          <parameter name="out_sum" type="gint*" owned="true" pass_as="out"/>
          <parameter name="num1" type="gint"/>
          <parameter name="num2" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SkipReturnVal" cname="regress_test_obj_skip_return_val">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="a" type="gint"/>
          <parameter name="out_b" type="gint*" owned="true" pass_as="out"/>
          <parameter name="c" type="gdouble"/>
          <parameter name="inout_d" type="gint*" owned="true" pass_as="ref"/>
          <parameter name="out_sum" type="gint*" owned="true" pass_as="out"/>
          <parameter name="num1" type="gint"/>
          <parameter name="num2" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="SkipReturnValNoOut" cname="regress_test_obj_skip_return_val_no_out">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="a" type="gint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="TortureSignature0" cname="regress_test_obj_torture_signature_0">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
          <parameter name="y" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="z" type="gint*" owned="true" pass_as="out"/>
          <parameter name="foo" type="const-gchar*"/>
          <parameter name="q" type="gint*" owned="true" pass_as="out"/>
          <parameter name="m" type="guint"/>
        </parameters>
      </method>
      <method name="TortureSignature1" cname="regress_test_obj_torture_signature_1">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="x" type="gint"/>
          <parameter name="y" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="z" type="gint*" owned="true" pass_as="out"/>
          <parameter name="foo" type="const-gchar*"/>
          <parameter name="q" type="gint*" owned="true" pass_as="out"/>
          <parameter name="m" type="guint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <property name="Bare" cname="bare" type="GObject.Object" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Boxed" cname="boxed" type="RegressTestBoxed*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Double" cname="double" type="gdouble" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Float" cname="float" type="gfloat" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Gtype" cname="gtype" type="GType" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="HashTable" cname="hash-table" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="HashTableOld" cname="hash-table-old" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="Int" cname="int" type="gint" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="List" cname="list" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="ListOld" cname="list-old" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="NameConflictProp&#10;&#9;&#9;&#9;&#9;&#9;&#9;" cname="name-conflict" type="gint" readable="true" writeable="true" construct="true" construct-only="false"/>
      <property name="Pptrarray" cname="pptrarray" type="gpointer" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="String" cname="string" type="gchar*" readable="true" writeable="true" construct="false" construct-only="false"/>
      <property name="WriteOnly" cname="write-only" type="gboolean" readable="false" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.Object"/>
      <field cname="bare" access="public" writeable="false" readable="true" is_callback="false" name="BareField" type="GObject.Object"/>
      <field cname="boxed" access="public" writeable="false" readable="true" is_callback="false" name="BoxedField" type="RegressTestBoxed*">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="hash_table" access="public" writeable="false" readable="true" is_callback="false" name="HashTableField" type="GHashTable*" element_type="gpointer"/>
      <field cname="list" access="public" writeable="false" readable="true" is_callback="false" name="ListField" type="GList*" element_type="gpointer"/>
      <field cname="some_int8" access="public" writeable="false" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="some_float" access="public" writeable="false" readable="true" is_callback="false" name="SomeFloat" type="gfloat"/>
      <field cname="some_double" access="public" writeable="false" readable="true" is_callback="false" name="SomeDouble" type="gdouble"/>
      <field cname="string" access="public" writeable="false" readable="true" is_callback="false" name="StringField" type="gchar*"/>
      <field cname="gtype" access="public" writeable="false" readable="true" is_callback="false" name="GtypeField" type="GType"/>
      <field cname="name_conflict" access="public" writeable="false" readable="true" is_callback="false" name="NameConflictField" type="gint"/>
      <field cname="byte_array" access="public" writeable="false" readable="true" is_callback="false" name="ByteArrayField" type="GByteArray*" array="true" null_term_array="true"/>
      <field cname="function_ptr" access="public" writeable="false" readable="true" is_callback="true" name="FunctionPtr" type="RegressFunctionPtrFunc"/>
      <signal name="All" cname="all" when="first">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="Cleanup" cname="cleanup" when="cleanup">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="First" cname="first" when="first">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="SigWithArrayLenProp" cname="sig-with-array-len-prop" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="arr" type="gpointer" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gint"/>
        </parameters>
      </signal>
      <signal name="SigWithArrayProp" cname="sig-with-array-prop" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="SigWithForeignStruct" cname="sig-with-foreign-struct" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="cr" type="cairo.Context"/>
        </parameters>
      </signal>
      <signal name="SigWithGerror" cname="sig-with-gerror" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="error" type="GLib.Error"/>
        </parameters>
      </signal>
      <signal name="SigWithHashProp" cname="sig-with-hash-prop" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="hash" type="" element_type="const-gchar*"/>
        </parameters>
      </signal>
      <signal name="SigWithInoutInt" cname="sig-with-inout-int" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="position" type="gint*" owned="true" pass_as="ref"/>
        </parameters>
      </signal>
      <signal name="SigWithInt64Prop" cname="sig-with-int64-prop" when="last">
        <return-type type="gint64"/>
        <parameters>
          <parameter name="i" type="gint64"/>
        </parameters>
      </signal>
      <signal name="SigWithIntarrayRet" cname="sig-with-intarray-ret" when="last">
        <return-type type="*" owned="true" array="true" null_term_array="true"/>
        <parameters>
          <parameter name="i" type="gint"/>
        </parameters>
      </signal>
      <signal name="SigWithObj" cname="sig-with-obj" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="obj" type="GObject.Object"/>
        </parameters>
      </signal>
      <signal name="SigWithStrv" cname="sig-with-strv" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="strs" type="" array="true" null_term_array="true"/>
        </parameters>
      </signal>
      <signal name="SigWithUint64Prop" cname="sig-with-uint64-prop" when="last">
        <return-type type="guint64"/>
        <parameters>
          <parameter name="i" type="guint64"/>
        </parameters>
      </signal>
      <signal name="Test" cname="test" when="last">
        <return-type type="void"/>
        <parameters/>
      </signal>
      <signal name="TestWithStaticScopeArg" cname="test-with-static-scope-arg" when="last">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="RegressTestSimpleBoxedA*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </signal>
    </object>
    <object name="TestSubObj" cname="RegressTestSubObj" opaque="false" hidden="false" parent="RegressTestObj">
      <implements>
        <interface cname="RegressTestInterface"/>
      </implements>
      <class_struct cname="RegressTestSubObjClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="RegressTestObjClass">
          <warning>missing glib:type-name</warning>
        </field>
      </class_struct>
      <method name="GetType" cname="regress_test_sub_obj_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_sub_obj_new" disable_void_ctor=""/>
      <method name="InstanceMethod" cname="regress_test_sub_obj_instance_method">
        <return-type type="gint"/>
        <parameters/>
      </method>
      <method name="UnsetBare" cname="regress_test_sub_obj_unset_bare">
        <return-type type="void"/>
        <parameters/>
      </method>
      <property name="Boolean" cname="boolean" type="gboolean" readable="true" writeable="true" construct="true" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="RegressTestObj*"/>
      <field cname="number" access="private" writeable="false" readable="false" is_callback="false" name="Number" type="gint"/>
      <field cname="boolean" access="private" writeable="false" readable="false" is_callback="false" name="BooleanField" type="gboolean"/>
    </object>
    <object name="TestWi8021x" cname="RegressTestWi8021x" opaque="false" hidden="false" parent="GObject.Object">
      <class_struct cname="RegressTestWi8021xClass">
        <field cname="parent_class" access="public" writeable="false" readable="true" is_callback="false" name="ParentClass" type="GObject.ObjectClass"/>
      </class_struct>
      <method name="GetType" cname="regress_test_wi_802_1x_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_wi_802_1x_new" disable_void_ctor=""/>
      <method name="StaticMethod" cname="regress_test_wi_802_1x_static_method" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="GetTestbool" cname="regress_test_wi_802_1x_get_testbool">
        <return-type type="gboolean"/>
        <parameters/>
      </method>
      <method name="SetTestbool" cname="regress_test_wi_802_1x_set_testbool">
        <return-type type="void"/>
        <parameters>
          <parameter name="v" type="gboolean"/>
        </parameters>
      </method>
      <property name="Testbool" cname="testbool" type="gboolean" readable="true" writeable="true" construct="false" construct-only="false"/>
      <field cname="parent_instance" access="public" writeable="false" readable="true" is_callback="false" name="ParentInstance" type="GObject.Object"/>
      <field cname="testbool" access="public" writeable="false" readable="true" is_callback="false" name="TestboolField" type="gboolean"/>
    </object>
    <union name="FooBUnion" cname="RegressFooBUnion*">
      <field cname="type" access="public" writeable="true" readable="true" is_callback="false" name="Type" type="gint"/>
      <field cname="v" access="public" writeable="true" readable="true" is_callback="false" name="V" type="gdouble"/>
      <field cname="rect" access="public" writeable="true" readable="true" is_callback="false" name="Rect" type="RegressFooBRect*">
        <warning>missing glib:type-name</warning>
      </field>
      <constructor cname="regress_foo_bunion_new" disable_void_ctor=""/>
      <method name="GetContainedType" cname="regress_foo_bunion_get_contained_type">
        <return-type type="gint"/>
        <parameters/>
      </method>
    </union>
    <union name="FooEvent" cname="RegressFooEvent*">
      <field cname="type" access="public" writeable="true" readable="true" is_callback="false" name="Type" type="gint"/>
      <field cname="any" access="public" writeable="true" readable="true" is_callback="false" name="Any" type="RegressFooEventAny">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="expose" access="public" writeable="true" readable="true" is_callback="false" name="Expose" type="RegressFooEventExpose">
        <warning>missing glib:type-name</warning>
      </field>
    </union>
    <union name="FooUnion" cname="RegressFooUnion*">
      <field cname="regress_foo" access="public" writeable="true" readable="true" is_callback="false" name="RegressFoo" type="gint"/>
    </union>
    <union name="TestStructE__some_union__union" cname="*">
      <field cname="v_int" access="public" writeable="true" readable="true" is_callback="false" name="VInt" type="gint"/>
      <field cname="v_uint" access="public" writeable="true" readable="true" is_callback="false" name="VUint" type="guint"/>
      <field cname="v_long" access="public" writeable="true" readable="true" is_callback="false" name="VLong" type="glong"/>
      <field cname="v_ulong" access="public" writeable="true" readable="true" is_callback="false" name="VUlong" type="gulong"/>
      <field cname="v_int64" access="public" writeable="true" readable="true" is_callback="false" name="VInt64" type="gint64"/>
      <field cname="v_uint64" access="public" writeable="true" readable="true" is_callback="false" name="VUint64" type="guint64"/>
      <field cname="v_float" access="public" writeable="true" readable="true" is_callback="false" name="VFloat" type="gfloat"/>
      <field cname="v_double" access="public" writeable="true" readable="true" is_callback="false" name="VDouble" type="gdouble"/>
      <field cname="v_pointer" access="public" writeable="true" readable="true" is_callback="false" name="VPointer" type="gpointer"/>
    </union>
    <struct name="AnAnonymousUnion" cname="RegressAnAnonymousUnion" opaque="false" hidden="false">
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gint"/>
      <union name="" cname="">
        <field cname="a" access="public" writeable="true" readable="true" is_callback="false" name="A" type="RegressLikeGnomeKeyringPasswordSchema*" array="true" array_len="2"/>
        <field cname="padding" access="public" writeable="true" readable="true" is_callback="false" name="Padding" type="guint" array="true" array_len="4"/>
      </union>
    </struct>
    <struct name="AnnotationFields" cname="RegressAnnotationFields" opaque="false" hidden="false">
      <field cname="field1" access="public" writeable="true" readable="true" is_callback="false" name="Field1" type="gint"/>
      <field cname="arr" access="public" writeable="true" readable="true" is_callback="false" name="Arr" type="guchar*" array="true" array_length_param_index="2"/>
      <field cname="len" access="public" writeable="true" readable="true" is_callback="false" name="Len" type="gulong"/>
      <field cname="field4" access="public" writeable="true" readable="true" is_callback="false" name="Field4" type="guint"/>
    </struct>
    <struct name="AnnotationStruct" cname="RegressAnnotationStruct" opaque="false" hidden="false">
      <field cname="objects" access="public" writeable="true" readable="true" is_callback="false" name="Objects" type="RegressAnnotationObject*" array="true" array_len="10"/>
    </struct>
    <struct name="AnonymousUnionAndStruct" cname="RegressAnonymousUnionAndStruct" opaque="false" hidden="false">
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gint"/>
      <union name="" cname="">
        <struct name="" cname="" opaque="false" hidden="false">
          <field cname="a" access="public" writeable="true" readable="true" is_callback="false" name="A" type="RegressLikeGnomeKeyringPasswordSchema*">
            <warning>missing glib:type-name</warning>
          </field>
          <field cname="b" access="public" writeable="true" readable="true" is_callback="false" name="B" type="RegressLikeXklConfigItem*">
            <warning>missing glib:type-name</warning>
          </field>
        </struct>
        <field cname="padding" access="public" writeable="true" readable="true" is_callback="false" name="Padding" type="guint" array="true" array_len="4"/>
      </union>
    </struct>
    <boxed name="FooBRect" cname="RegressFooBRect" opaque="false" hidden="false">
      <method name="GetType" cname="regress_foo_brect_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gdouble"/>
      <field cname="y" access="public" writeable="true" readable="true" is_callback="false" name="Y" type="gdouble"/>
      <constructor cname="regress_foo_brect_new">
        <parameters>
          <parameter name="x" type="gdouble"/>
          <parameter name="y" type="gdouble"/>
        </parameters>
      </constructor>
      <method name="Add" cname="regress_foo_brect_add">
        <return-type type="void"/>
        <parameters>
          <parameter name="b2" type="RegressFooBRect*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
    </boxed>
    <boxed name="FooBoxed" cname="RegressFooBoxed" opaque="false" hidden="false">
      <method name="GetType" cname="regress_foo_boxed_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_foo_boxed_new" disable_void_ctor=""/>
      <method name="Method" cname="regress_foo_boxed_method">
        <return-type type="void"/>
        <parameters/>
      </method>
    </boxed>
    <boxed name="FooDBusData" cname="RegressFooDBusData" opaque="false" hidden="false">
      <method name="GetType" cname="regress_foo_dbus_data_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <method name="Method" cname="regress_foo_dbus_data_method">
        <return-type type="void"/>
        <parameters/>
      </method>
    </boxed>
    <struct name="FooEventAny" cname="RegressFooEventAny" opaque="false" hidden="false">
      <field cname="send_event" access="public" writeable="true" readable="true" is_callback="false" name="SendEvent" type="gint8"/>
    </struct>
    <struct name="FooEventExpose" cname="RegressFooEventExpose" opaque="false" hidden="false">
      <field cname="send_event" access="public" writeable="true" readable="true" is_callback="false" name="SendEvent" type="gint8"/>
      <field cname="count" access="public" writeable="true" readable="true" is_callback="false" name="Count" type="gint"/>
    </struct>
    <struct name="FooForeignStruct" cname="RegressFooForeignStruct" opaque="false" hidden="false">
      <field cname="regress_foo" access="public" writeable="true" readable="true" is_callback="false" name="RegressFoo" type="gint"/>
      <constructor cname="regress_foo_foreign_struct_new" disable_void_ctor=""/>
      <method name="Copy" cname="regress_foo_foreign_struct_copy">
        <return-type type="RegressFooForeignStruct*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
    </struct>
    <struct name="FooRectangle" cname="RegressFooRectangle" opaque="false" hidden="false">
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gint"/>
      <field cname="y" access="public" writeable="true" readable="true" is_callback="false" name="Y" type="gint"/>
      <field cname="width" access="public" writeable="true" readable="true" is_callback="false" name="Width" type="gint"/>
      <field cname="height" access="public" writeable="true" readable="true" is_callback="false" name="Height" type="gint"/>
      <method name="Add" cname="regress_foo_rectangle_add">
        <return-type type="void"/>
        <parameters>
          <parameter name="r2" type="RegressFooRectangle*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
    </struct>
    <struct name="FooStruct" cname="RegressFooStruct" opaque="false" hidden="false">
      <field cname="priv" access="public" writeable="true" readable="true" is_callback="false" name="Priv" type="RegressFooStructPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="member" access="public" writeable="true" readable="true" is_callback="false" name="Member" type="gint"/>
    </struct>
    <struct name="FooStructPrivate" cname="RegressFooStructPrivate" opaque="true" hidden="true"/>
    <struct name="FooThingWithArray" cname="RegressFooThingWithArray" opaque="false" hidden="false">
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gint"/>
      <field cname="y" access="public" writeable="true" readable="true" is_callback="false" name="Y" type="gint"/>
      <field cname="lines" access="public" writeable="true" readable="true" is_callback="false" name="Lines" type="char" array="true" array_len="80"/>
      <field cname="data" access="public" writeable="true" readable="true" is_callback="false" name="Data" type="guint8"/>
    </struct>
    <struct name="FooUtilityStruct" cname="RegressFooUtilityStruct" opaque="false" hidden="false">
      <field cname="bar" access="public" writeable="true" readable="true" is_callback="false" name="Bar" type="Utility.Struct"/>
    </struct>
    <struct name="Intset" cname="RegressIntset" opaque="true" hidden="false"/>
    <struct name="LikeGnomeKeyringPasswordSchema" cname="RegressLikeGnomeKeyringPasswordSchema" opaque="false" hidden="false">
      <field cname="dummy" access="public" writeable="true" readable="true" is_callback="false" name="Dummy" type="gint"/>
      <field cname="attributes" access="public" writeable="true" readable="true" is_callback="false" name="Attributes" type="gpointer" array="true" array_len="32"/>
      <field cname="dummy2" access="public" writeable="true" readable="true" is_callback="false" name="Dummy2" type="gdouble"/>
    </struct>
    <struct name="LikeXklConfigItem" cname="RegressLikeXklConfigItem" opaque="false" hidden="false">
      <field cname="name" access="public" writeable="true" readable="true" is_callback="false" name="Name" type="gchar" array="true" array_len="32"/>
      <method name="SetName" cname="regress_like_xkl_config_item_set_name">
        <return-type type="void"/>
        <parameters>
          <parameter name="name" type="const-gchar*"/>
        </parameters>
      </method>
    </struct>
    <struct name="SkippedStructure" cname="RegressSkippedStructure" opaque="false" hidden="false">
      <field cname="x" access="public" writeable="true" readable="true" is_callback="false" name="X" type="gint"/>
      <field cname="v" access="public" writeable="true" readable="true" is_callback="false" name="V" type="gdouble"/>
    </struct>
    <boxed name="TestBoxed" cname="RegressTestBoxed" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_boxed_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="nested_a" access="public" writeable="true" readable="true" is_callback="false" name="NestedA" type="RegressTestSimpleBoxedA">
        <warning>missing glib:type-name</warning>
      </field>
      <field cname="priv" access="public" writeable="true" readable="true" is_callback="false" name="Priv" type="RegressTestBoxedPrivate*">
        <warning>missing glib:type-name</warning>
      </field>
      <constructor cname="regress_test_boxed_new" disable_void_ctor=""/>
      <constructor cname="regress_test_boxed_new_alternative_constructor1">
        <parameters>
          <parameter name="i" type="gint"/>
        </parameters>
      </constructor>
      <constructor cname="regress_test_boxed_new_alternative_constructor2">
        <parameters>
          <parameter name="i" type="gint"/>
          <parameter name="j" type="gint"/>
        </parameters>
      </constructor>
      <constructor cname="regress_test_boxed_new_alternative_constructor3">
        <parameters>
          <parameter name="s" type="const-gchar*"/>
        </parameters>
      </constructor>
      <method name="_notNotAMethod" cname="regress_test_boxeds_not_a_method">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="Copy" cname="regress_test_boxed_copy">
        <return-type type="RegressTestBoxed*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
      <method name="Equals" cname="regress_test_boxed_equals">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="other" type="RegressTestBoxed*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
    </boxed>
    <boxed name="TestBoxedB" cname="RegressTestBoxedB" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_boxed_b_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="some_long" access="public" writeable="true" readable="true" is_callback="false" name="SomeLong" type="glong"/>
      <constructor cname="regress_test_boxed_b_new">
        <parameters>
          <parameter name="some_int8" type="gint8"/>
          <parameter name="some_long" type="glong"/>
        </parameters>
      </constructor>
      <method name="Copy" cname="regress_test_boxed_b_copy">
        <return-type type="RegressTestBoxedB*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
    </boxed>
    <boxed name="TestBoxedC" cname="RegressTestBoxedC" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_boxed_c_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="refcount" access="public" writeable="true" readable="true" is_callback="false" name="Refcount" type="guint"/>
      <field cname="another_thing" access="public" writeable="true" readable="true" is_callback="false" name="AnotherThing" type="guint"/>
      <constructor cname="regress_test_boxed_c_new" disable_void_ctor=""/>
    </boxed>
    <boxed name="TestBoxedD" cname="RegressTestBoxedD" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_boxed_d_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <constructor cname="regress_test_boxed_d_new">
        <parameters>
          <parameter name="a_string" type="const-gchar*"/>
          <parameter name="a_int" type="gint"/>
        </parameters>
      </constructor>
      <method name="Copy" cname="regress_test_boxed_d_copy">
        <return-type type="RegressTestBoxedD*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
      <method name="Free" cname="regress_test_boxed_d_free">
        <return-type type="void"/>
        <parameters/>
      </method>
      <method name="GetMagic" cname="regress_test_boxed_d_get_magic">
        <return-type type="gint"/>
        <parameters/>
      </method>
    </boxed>
    <struct name="TestBoxedPrivate" cname="RegressTestBoxedPrivate" opaque="true" hidden="true"/>
    <struct name="TestInheritPixmapObjectClass" cname="RegressTestInheritPixmapObjectClass" opaque="false" hidden="false">
      <field cname="parent_class" access="public" writeable="true" readable="true" is_callback="false" name="ParentClass" type="RegressTestInheritDrawableClass">
        <warning>missing glib:type-name</warning>
      </field>
    </struct>
    <struct name="TestPrivateStruct" cname="RegressTestPrivateStruct" opaque="false" hidden="true">
      <field cname="this_is_public_before" access="public" writeable="true" readable="true" is_callback="false" name="ThisIsPublicBefore" type="gint"/>
      <field cname="this_is_private" access="private" writeable="false" readable="false" is_callback="false" name="ThisIsPrivate" type="gint"/>
      <field cname="this_is_public_after" access="public" writeable="true" readable="true" is_callback="false" name="ThisIsPublicAfter" type="gint"/>
    </struct>
    <struct name="TestReferenceCounters" cname="RegressTestReferenceCounters" opaque="false" hidden="false">
      <field cname="refcount" access="public" writeable="true" readable="true" is_callback="false" name="Refcount" type="gint"/>
      <field cname="atomicrefcount" access="public" writeable="true" readable="true" is_callback="false" name="Atomicrefcount" type="gint"/>
    </struct>
    <boxed name="TestSimpleBoxedA" cname="RegressTestSimpleBoxedA" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_simple_boxed_a_get_gtype" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="some_int" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt" type="gint"/>
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="some_double" access="public" writeable="true" readable="true" is_callback="false" name="SomeDouble" type="gdouble"/>
      <field cname="some_enum" access="public" writeable="true" readable="true" is_callback="false" name="SomeEnum" type="RegressTestEnum"/>
      <method name="Copy" cname="regress_test_simple_boxed_a_copy">
        <return-type type="RegressTestSimpleBoxedA*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
      <method name="Equals" cname="regress_test_simple_boxed_a_equals">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="other_a" type="RegressTestSimpleBoxedA*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="ConstReturn" cname="regress_test_simple_boxed_a_const_return" shared="true">
        <return-type type="RegressTestSimpleBoxedA*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
    </boxed>
    <boxed name="TestSimpleBoxedB" cname="RegressTestSimpleBoxedB" opaque="false" hidden="false">
      <method name="GetType" cname="regress_test_simple_boxed_b_get_type" shared="true">
        <return-type type="GType"/>
      </method>
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="nested_a" access="public" writeable="true" readable="true" is_callback="false" name="NestedA" type="RegressTestSimpleBoxedA">
        <warning>missing glib:type-name</warning>
      </field>
      <method name="Copy" cname="regress_test_simple_boxed_b_copy">
        <return-type type="RegressTestSimpleBoxedB*" owned="true">
          <warning>missing glib:type-name</warning>
        </return-type>
        <parameters/>
      </method>
    </boxed>
    <struct name="TestStructA" cname="RegressTestStructA" opaque="false" hidden="false">
      <field cname="some_int" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt" type="gint"/>
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="some_double" access="public" writeable="true" readable="true" is_callback="false" name="SomeDouble" type="gdouble"/>
      <field cname="some_enum" access="public" writeable="true" readable="true" is_callback="false" name="SomeEnum" type="RegressTestEnum"/>
      <method name="Clone" cname="regress_test_struct_a_clone">
        <return-type type="void"/>
        <parameters>
          <parameter name="a_out" type="RegressTestStructA*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="Parse" cname="regress_test_struct_a_parse" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="a_out" type="RegressTestStructA*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
    </struct>
    <struct name="TestStructB" cname="RegressTestStructB" opaque="false" hidden="false">
      <field cname="some_int8" access="public" writeable="true" readable="true" is_callback="false" name="SomeInt8" type="gint8"/>
      <field cname="nested_a" access="public" writeable="true" readable="true" is_callback="false" name="NestedA" type="RegressTestStructA">
        <warning>missing glib:type-name</warning>
      </field>
      <method name="Clone" cname="regress_test_struct_b_clone">
        <return-type type="void"/>
        <parameters>
          <parameter name="b_out" type="RegressTestStructB*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
    </struct>
    <struct name="TestStructC" cname="RegressTestStructC" opaque="false" hidden="false">
      <field cname="another_int" access="public" writeable="true" readable="true" is_callback="false" name="AnotherInt" type="gint"/>
      <field cname="obj" access="public" writeable="true" readable="true" is_callback="false" name="Obj" type="GObject.Object"/>
    </struct>
    <struct name="TestStructD" cname="RegressTestStructD" opaque="false" hidden="false">
      <field cname="array1" access="public" writeable="true" readable="true" is_callback="false" name="Array1" type="RegressTestStructA**" array="true" null_term_array="true"/>
      <field cname="array2" access="public" writeable="true" readable="true" is_callback="false" name="Array2" type="gpointer*" array="true" null_term_array="true"/>
      <field cname="field" access="public" writeable="true" readable="true" is_callback="false" name="Field" type="RegressTestObj*"/>
      <field cname="list" access="public" writeable="true" readable="true" is_callback="false" name="List" type="GList*" element_type="RegressTestObj*"/>
      <field cname="garray" access="public" writeable="true" readable="true" is_callback="false" name="Garray" type="GPtrArray" array="true" null_term_array="true"/>
    </struct>
    <struct name="TestStructE" cname="RegressTestStructE" opaque="false" hidden="false">
      <field cname="some_type" access="public" writeable="true" readable="true" is_callback="false" name="SomeType" type="GType"/>
      <field cname="some_union" access="public" writeable="true" readable="true" is_callback="false" name="SomeUnion" type="" array="true" array_len="2"/>
    </struct>
    <struct name="TestStructF" cname="RegressTestStructF" opaque="false" hidden="false">
      <field cname="ref_count" access="public" writeable="true" readable="true" is_callback="false" name="RefCount" type="gint"/>
      <field cname="data1" access="public" writeable="true" readable="true" is_callback="false" name="Data1" type="gint"/>
      <field cname="data2" access="public" writeable="true" readable="true" is_callback="false" name="Data2" type="gint"/>
      <field cname="data3" access="public" writeable="true" readable="true" is_callback="false" name="Data3" type="gint"/>
      <field cname="data4" access="public" writeable="true" readable="true" is_callback="false" name="Data4" type="gint"/>
      <field cname="data5" access="public" writeable="true" readable="true" is_callback="false" name="Data5" type="gint"/>
      <field cname="data6" access="public" writeable="true" readable="true" is_callback="false" name="Data6" type="gint"/>
      <field cname="data7" access="public" writeable="true" readable="true" is_callback="false" name="Data7" type="guint8"/>
    </struct>
    <struct name="TestStructFixedArray" cname="RegressTestStructFixedArray" opaque="false" hidden="false">
      <field cname="just_int" access="public" writeable="true" readable="true" is_callback="false" name="JustInt" type="gint"/>
      <field cname="array" access="public" writeable="true" readable="true" is_callback="false" name="Array" type="gint" array="true" array_len="10"/>
      <method name="Frob" cname="regress_test_struct_fixed_array_frob">
        <return-type type="void"/>
        <parameters/>
      </method>
    </struct>
    <object name="Global" cname="RegressGlobal" opaque="true">
      <method name="AliasedCallerAlloc" cname="regress_aliased_caller_alloc" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="boxed" type="RegressTestBoxed" pass_as="out"/>
        </parameters>
      </method>
      <method name="AnnotationAttributeFunc" cname="regress_annotation_attribute_func" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="_object" type="RegressAnnotationObject*"/>
          <parameter name="data" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="AnnotationCustomDestroy" cname="regress_annotation_custom_destroy" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter closure="2" destroy="1" scope="notified" name="callback" type="RegressAnnotationCallback"/>
          <parameter closure="2" scope="notified" name="destroy" type="RegressAnnotationNotifyFunc"/>
          <parameter allow-none="1" name="data" type="gpointer"/>
        </parameters>
      </method>
      <method name="AnnotationGetSourceFile" cname="regress_annotation_get_source_file" shared="true">
        <return-type type="gfilename*" owned="true"/>
      </method>
      <method name="AnnotationInit" cname="regress_annotation_init" shared="true">
        <return-type type="void" array_index="1"/>
        <parameters>
          <parameter name="argc" type="gint*" owned="true" pass_as="ref" array_index="1"/>
          <parameter name="argv" type="char****" owned="true" pass_as="ref" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="AnnotationInvalidRegressAnnotation" cname="regress_annotation_invalid_regress_annotation" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="foo" type="gint"/>
        </parameters>
      </method>
      <method name="AnnotationPtrArray" cname="regress_annotation_ptr_array" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="array" type="GPtrArray" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="AnnotationReturnArray" cname="regress_annotation_return_array" shared="true">
        <return-type type="char***" owned="true" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter name="length" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="AnnotationReturnFilename" cname="regress_annotation_return_filename" shared="true">
        <return-type type="gfilename*" owned="true"/>
      </method>
      <method name="AnnotationSetSourceFile" cname="regress_annotation_set_source_file" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="fname" type="const-gfilename*"/>
        </parameters>
      </method>
      <method name="AnnotationSpaceAfterCommentBug631690" cname="regress_annotation_space_after_comment_bug631690" shared="true">
        <return-type type="void"/>
      </method>
      <method name="AnnotationStringArrayLength" cname="regress_annotation_string_array_length" shared="true">
        <return-type type="void" array_index="1"/>
        <parameters>
          <parameter name="n_properties" type="guint" array_index="1"/>
          <parameter name="properties" type="const gchar* const*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="AnnotationStringZeroTerminated" cname="regress_annotation_string_zero_terminated" shared="true">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="AnnotationStringZeroTerminatedOut" cname="regress_annotation_string_zero_terminated_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="out" type="char****" owned="true" pass_as="ref" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="AnnotationTestParsingBug630862" cname="regress_annotation_test_parsing_bug630862" shared="true">
        <return-type type="GObject.Object"/>
      </method>
      <method name="AnnotationTransferFloating" cname="regress_annotation_transfer_floating" shared="true">
        <return-type type="GObject.Object"/>
        <parameters>
          <parameter name="_object" type="GObject.Object"/>
        </parameters>
      </method>
      <method name="AnnotationVersioned" cname="regress_annotation_versioned" shared="true" version="0.6">
        <return-type type="void"/>
      </method>
      <method name="AtestErrorQuark" cname="regress_atest_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="FooAsyncReadyCallback" cname="regress_foo_async_ready_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="cancellable" type="Gio.Cancellable"/>
          <parameter closure="2" scope="async" allow-none="1" name="callback" type="Gio.AsyncReadyCallback"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="FooDestroyNotifyCallback" cname="regress_foo_destroy_notify_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="callback" type="RegressFooCallback"/>
          <parameter allow-none="1" name="data" type="gpointer"/>
          <parameter scope="async" name="destroy" type="GLib.DestroyNotify"/>
        </parameters>
      </method>
      <method name="FooEnumTypeMethod" cname="regress_foo_enum_type_method" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="regress_foo_enum" type="RegressFooEnumType"/>
        </parameters>
      </method>
      <method name="FooEnumTypeReturnv" cname="regress_foo_enum_type_returnv" shared="true">
        <return-type type="RegressFooEnumType"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="FooErrorQuark" cname="regress_foo_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="FooInit" cname="regress_foo_init" shared="true">
        <return-type type="gint"/>
      </method>
      <method name="FooInterfaceStaticMethod" cname="regress_foo_interface_static_method" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
        </parameters>
      </method>
      <method name="FooMethodExternalReferences" cname="regress_foo_method_external_references" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="_object" type="Utility.Object"/>
          <parameter name="e" type="Utility.EnumType"/>
          <parameter name="f" type="Utility.FlagType"/>
          <parameter name="s" type="Utility.Struct"/>
        </parameters>
      </method>
      <method name="FooNotAConstructorNew" cname="regress_foo_not_a_constructor_new" shared="true">
        <return-type type="RegressFooObject*"/>
      </method>
      <method name="FooTestArray" cname="regress_foo_test_array" shared="true">
        <return-type type="GArray*" array="true" null_term_array="true"/>
      </method>
      <method name="FooTestConstCharParam" cname="regress_foo_test_const_char_param" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="param" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="FooTestConstCharRetval" cname="regress_foo_test_const_char_retval" shared="true">
        <return-type type="const-gchar*"/>
      </method>
      <method name="FooTestConstStructParam" cname="regress_foo_test_const_struct_param" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="param" type="RegressFooStruct*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="FooTestConstStructRetval" cname="regress_foo_test_const_struct_retval" shared="true">
        <return-type type="RegressFooStruct*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="FooTestStringArray" cname="regress_foo_test_string_array" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="array" type="char**" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="FooTestStringArrayWithG" cname="regress_foo_test_string_array_with_g" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="array" type="const-gchar**" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="FooTestUnsignedQualifier" cname="regress_foo_test_unsigned_qualifier" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="unsigned_param" type="guint"/>
        </parameters>
      </method>
      <method name="FooTestUnsignedType" cname="regress_foo_test_unsigned_type" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="unsigned_param" type="guint"/>
        </parameters>
      </method>
      <method name="FuncObjNullIn" cname="regress_func_obj_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="obj" type="RegressTestObj*"/>
        </parameters>
      </method>
      <method name="FuncObjNullableIn" cname="regress_func_obj_nullable_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="obj" type="RegressTestObj*"/>
        </parameters>
      </method>
      <method name="GetVariant" cname="regress_get_variant" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="GlobalGetFlagsOut" cname="regress_global_get_flags_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="v" type="RegressTestFlags" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="HasParameterNamedAttrs" cname="regress_has_parameter_named_attrs" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="foo" type="gint"/>
          <parameter name="attributes" type="gpointer" array="true" array_len="32"/>
        </parameters>
      </method>
      <method name="IntrospectableViaAlias" cname="regress_introspectable_via_alias" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="GPtrArray"/>
        </parameters>
      </method>
      <method name="MiscArrayParameterWithLengthParameterShared" cname="regress_misc_array_parameter_with_length_parameter_shared" shared="true">
        <return-type type="void" array_index="2"/>
        <parameters>
          <parameter name="length" type="gint" array_index="2"/>
          <parameter name="array1" type="guint8*" array="true" array_length_param_index="0"/>
          <parameter name="array2" type="guint8*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="SetAbortOnError" cname="regress_set_abort_on_error" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="abort_on_error" type="gboolean"/>
        </parameters>
      </method>
      <method name="TestAbcErrorQuark" cname="regress_test_abc_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="TestArrayCallback" cname="regress_test_array_callback" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackArray"/>
        </parameters>
      </method>
      <method name="TestArrayFixedOutObjects" cname="regress_test_array_fixed_out_objects" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="objs" type="RegressTestObj****" owned="true" pass_as="out" array="true" array_len="2"/>
        </parameters>
      </method>
      <method name="TestArrayFixedSizeIntIn" cname="regress_test_array_fixed_size_int_in" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="ints" type="int*" array="true" array_len="5"/>
        </parameters>
      </method>
      <method name="TestArrayFixedSizeIntOut" cname="regress_test_array_fixed_size_int_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="ints" type="int***" owned="true" pass_as="out" array="true" array_len="5"/>
        </parameters>
      </method>
      <method name="TestArrayFixedSizeIntReturn" cname="regress_test_array_fixed_size_int_return" shared="true">
        <return-type type="int**" owned="true" array="true" array_len="5"/>
      </method>
      <method name="TestArrayGint16In" cname="regress_test_array_gint16_in" shared="true">
        <return-type type="gint" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint" array_index="1"/>
          <parameter name="ints" type="gint16*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayGint32In" cname="regress_test_array_gint32_in" shared="true">
        <return-type type="gint32" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint" array_index="1"/>
          <parameter name="ints" type="gint32*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayGint64In" cname="regress_test_array_gint64_in" shared="true">
        <return-type type="gint64" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint" array_index="1"/>
          <parameter name="ints" type="gint64*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayGint8In" cname="regress_test_array_gint8_in" shared="true">
        <return-type type="gint" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint" array_index="1"/>
          <parameter name="ints" type="gint8*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayGtypeIn" cname="regress_test_array_gtype_in" shared="true">
        <return-type type="gchar*" owned="true" array_index="1"/>
        <parameters>
          <parameter name="n_types" type="gint" array_index="1"/>
          <parameter name="types" type="GType*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayInoutCallback" cname="regress_test_array_inout_callback" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackArrayInOut"/>
        </parameters>
      </method>
      <method name="TestArrayIntFullOut" cname="regress_test_array_int_full_out" shared="true">
        <return-type type="int**" owned="true" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter name="len" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayIntIn" cname="regress_test_array_int_in" shared="true">
        <return-type type="gint" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint" array_index="1"/>
          <parameter name="ints" type="int*" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayIntInout" cname="regress_test_array_int_inout" shared="true">
        <return-type type="void" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint*" owned="true" pass_as="ref" array_index="1"/>
          <parameter name="ints" type="int***" owned="true" pass_as="ref" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayIntNoneOut" cname="regress_test_array_int_none_out" shared="true">
        <return-type type="int*" array="true" array_length_param_index="0"/>
        <parameters>
          <parameter name="len" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayIntNullIn" cname="regress_test_array_int_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="arr" type="int*" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gint"/>
        </parameters>
      </method>
      <method name="TestArrayIntNullOut" cname="regress_test_array_int_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="arr" type="int***" owned="true" pass_as="out" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayIntOut" cname="regress_test_array_int_out" shared="true">
        <return-type type="void" array_index="1"/>
        <parameters>
          <parameter name="n_ints" type="gint*" owned="true" pass_as="out" array_index="1"/>
          <parameter name="ints" type="int***" owned="true" pass_as="out" array="true" array_length_param_index="0"/>
        </parameters>
      </method>
      <method name="TestArrayStaticInInt" cname="regress_test_array_static_in_int" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="int*" array="true" array_len="10"/>
        </parameters>
      </method>
      <method name="TestArrayStructInFull" cname="regress_test_array_struct_in_full" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA**" owned="true" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gsize"/>
        </parameters>
      </method>
      <method name="TestArrayStructInNone" cname="regress_test_array_struct_in_none" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA*" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gsize"/>
        </parameters>
      </method>
      <method name="TestArrayStructOut" cname="regress_test_array_struct_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA***" owned="true" pass_as="out" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gint*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayStructOutCallerAlloc" cname="regress_test_array_struct_out_caller_alloc" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA*" pass_as="out" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gsize*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayStructOutContainer" cname="regress_test_array_struct_out_container" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA**" pass_as="out" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gsize*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestArrayStructOutFullFixed" cname="regress_test_array_struct_out_full_fixed" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA***" owned="true" pass_as="out" array="true" array_len="4"/>
        </parameters>
      </method>
      <method name="TestArrayStructOutNone" cname="regress_test_array_struct_out_none" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="arr" type="RegressTestStructA**" pass_as="out" array="true" array_length_param_index="1"/>
          <parameter name="len" type="gsize*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestAsyncReadyCallback" cname="regress_test_async_ready_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="async" allow-none="1" name="callback" type="Gio.AsyncReadyCallback"/>
        </parameters>
      </method>
      <method name="TestBoolean" cname="regress_test_boolean" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="in" type="gboolean"/>
        </parameters>
      </method>
      <method name="TestBooleanFalse" cname="regress_test_boolean_false" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="in" type="gboolean"/>
        </parameters>
      </method>
      <method name="TestBooleanTrue" cname="regress_test_boolean_true" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="in" type="gboolean"/>
        </parameters>
      </method>
      <method name="TestBoxedsNotAMethod" cname="regress_test_boxeds_not_a_method" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="boxed" type="RegressTestBoxed*">
            <warning>missing glib:type-name</warning>
          </parameter>
        </parameters>
      </method>
      <method name="TestBoxedsNotAStatic" cname="regress_test_boxeds_not_a_static" shared="true">
        <return-type type="void"/>
      </method>
      <method name="TestCairoContextFullReturn" cname="regress_test_cairo_context_full_return" shared="true">
        <return-type type="cairo.Context*" owned="true"/>
      </method>
      <method name="TestCairoContextNoneIn" cname="regress_test_cairo_context_none_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="context" type="cairo.Context"/>
        </parameters>
      </method>
      <method name="TestCairoSurfaceFullOut" cname="regress_test_cairo_surface_full_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="surface" type="cairo.Surface*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestCairoSurfaceFullReturn" cname="regress_test_cairo_surface_full_return" shared="true">
        <return-type type="cairo.Surface*" owned="true"/>
      </method>
      <method name="TestCairoSurfaceNoneIn" cname="regress_test_cairo_surface_none_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="surface" type="cairo.Surface"/>
        </parameters>
      </method>
      <method name="TestCairoSurfaceNoneReturn" cname="regress_test_cairo_surface_none_return" shared="true">
        <return-type type="cairo.Surface"/>
      </method>
      <method name="TestCallback" cname="regress_test_callback" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestCallback"/>
        </parameters>
      </method>
      <method name="TestCallbackAsync" cname="regress_test_callback_async" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter closure="1" scope="async" name="callback" type="RegressTestCallbackUserData"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="TestCallbackDestroyNotify" cname="regress_test_callback_destroy_notify" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter closure="1" destroy="2" scope="notified" name="callback" type="RegressTestCallbackUserData"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
          <parameter scope="async" name="notify" type="GLib.DestroyNotify"/>
        </parameters>
      </method>
      <method name="TestCallbackDestroyNotifyNoUserData" cname="regress_test_callback_destroy_notify_no_user_data" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter destroy="1" scope="notified" name="callback" type="RegressTestCallbackUserData"/>
          <parameter scope="async" name="notify" type="GLib.DestroyNotify"/>
        </parameters>
      </method>
      <method name="TestCallbackReturnFull" cname="regress_test_callback_return_full" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackReturnFull"/>
        </parameters>
      </method>
      <method name="TestCallbackThawAsync" cname="regress_test_callback_thaw_async" shared="true">
        <return-type type="gint"/>
      </method>
      <method name="TestCallbackThawNotifications" cname="regress_test_callback_thaw_notifications" shared="true">
        <return-type type="gint"/>
      </method>
      <method name="TestCallbackUserData" cname="regress_test_callback_user_data" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter closure="1" scope="call" name="callback" type="RegressTestCallbackUserData"/>
          <parameter name="user_data" type="gpointer"/>
        </parameters>
      </method>
      <method name="TestClosure" cname="regress_test_closure" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="closure" type="GObject.Closure"/>
        </parameters>
      </method>
      <method name="TestClosureOneArg" cname="regress_test_closure_one_arg" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="closure" type="GObject.Closure"/>
          <parameter name="arg" type="gint"/>
        </parameters>
      </method>
      <method name="TestClosureVariant" cname="regress_test_closure_variant" shared="true">
        <return-type type="GLib.Variant*" owned="true"/>
        <parameters>
          <parameter name="closure" type="GObject.Closure"/>
          <parameter allow-none="1" name="arg" type="GLib.Variant"/>
        </parameters>
      </method>
      <method name="TestCreateFundamentalHiddenClassInstance" cname="regress_test_create_fundamental_hidden_class_instance" shared="true">
        <return-type type="RegressTestFundamentalObject*" owned="true"/>
      </method>
      <method name="TestDateInGvalue" cname="regress_test_date_in_gvalue" shared="true">
        <return-type type="GObject.Value*" owned="true"/>
      </method>
      <method name="TestDefErrorQuark" cname="regress_test_def_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="TestDouble" cname="regress_test_double" shared="true">
        <return-type type="gdouble"/>
        <parameters>
          <parameter name="in" type="gdouble"/>
        </parameters>
      </method>
      <method name="TestEnumParam" cname="regress_test_enum_param" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="e" type="RegressTestEnum"/>
        </parameters>
      </method>
      <method name="TestErrorQuark" cname="regress_test_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="TestFilenameReturn" cname="regress_test_filename_return" shared="true">
        <return-type type="GSList*" element_type="gfilename*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestFloat" cname="regress_test_float" shared="true">
        <return-type type="gfloat"/>
        <parameters>
          <parameter name="in" type="gfloat"/>
        </parameters>
      </method>
      <method name="TestGarrayContainerReturn" cname="regress_test_garray_container_return" shared="true">
        <return-type type="GPtrArray" array="true" null_term_array="true"/>
      </method>
      <method name="TestGarrayFullReturn" cname="regress_test_garray_full_return" shared="true">
        <return-type type="GPtrArray" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="TestGerrorCallback" cname="regress_test_gerror_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackGError"/>
        </parameters>
      </method>
      <method name="TestGhashContainerReturn" cname="regress_test_ghash_container_return" shared="true">
        <return-type type="GHashTable*" element_type="gchar*" elements_owned="true"/>
      </method>
      <method name="TestGhashEverythingReturn" cname="regress_test_ghash_everything_return" shared="true">
        <return-type type="GHashTable*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestGhashGvalueIn" cname="regress_test_ghash_gvalue_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="hash" type="GHashTable*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGhashGvalueReturn" cname="regress_test_ghash_gvalue_return" shared="true">
        <return-type type="GHashTable*" element_type="const-gchar*"/>
      </method>
      <method name="TestGhashNestedEverythingReturn" cname="regress_test_ghash_nested_everything_return" shared="true">
        <return-type type="GHashTable*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestGhashNestedEverythingReturn2" cname="regress_test_ghash_nested_everything_return2" shared="true">
        <return-type type="GHashTable*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestGhashNothingIn" cname="regress_test_ghash_nothing_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="const GHashTable*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGhashNothingIn2" cname="regress_test_ghash_nothing_in2" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="GHashTable*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGhashNothingReturn" cname="regress_test_ghash_nothing_return" shared="true">
        <return-type type="const GHashTable*" element_type="const-gchar*"/>
      </method>
      <method name="TestGhashNothingReturn2" cname="regress_test_ghash_nothing_return2" shared="true">
        <return-type type="GHashTable*" element_type="const-gchar*"/>
      </method>
      <method name="TestGhashNullIn" cname="regress_test_ghash_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="in" type="const GHashTable*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGhashNullOut" cname="regress_test_ghash_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="out" type="const GHashTable**" element_type="gchar*" elements_owned="true" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestGhashNullReturn" cname="regress_test_ghash_null_return" shared="true">
        <return-type type="const GHashTable*" element_type="const-gchar*"/>
      </method>
      <method name="TestGlistContainerReturn" cname="regress_test_glist_container_return" shared="true">
        <return-type type="GList*" element_type="gchar*" elements_owned="true"/>
      </method>
      <method name="TestGlistEverythingReturn" cname="regress_test_glist_everything_return" shared="true">
        <return-type type="GList*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestGlistGtypeContainerIn" cname="regress_test_glist_gtype_container_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="GList*" element_type="GType" elements_owned="true"/>
        </parameters>
      </method>
      <method name="TestGlistNothingIn" cname="regress_test_glist_nothing_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="const GList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGlistNothingIn2" cname="regress_test_glist_nothing_in2" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="GList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGlistNothingReturn" cname="regress_test_glist_nothing_return" shared="true">
        <return-type type="const GList*" element_type="const-gchar*"/>
      </method>
      <method name="TestGlistNothingReturn2" cname="regress_test_glist_nothing_return2" shared="true">
        <return-type type="GList*" element_type="const-gchar*"/>
      </method>
      <method name="TestGlistNullIn" cname="regress_test_glist_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="in" type="GSList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGlistNullOut" cname="regress_test_glist_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="out_list" type="GSList**" element_type="gchar*" elements_owned="true" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestGslistContainerReturn" cname="regress_test_gslist_container_return" shared="true">
        <return-type type="GSList*" element_type="gchar*" elements_owned="true"/>
      </method>
      <method name="TestGslistEverythingReturn" cname="regress_test_gslist_everything_return" shared="true">
        <return-type type="GSList*" element_type="gchar*" elements_owned="true" owned="true"/>
      </method>
      <method name="TestGslistNothingIn" cname="regress_test_gslist_nothing_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="const GSList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGslistNothingIn2" cname="regress_test_gslist_nothing_in2" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="GSList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGslistNothingReturn" cname="regress_test_gslist_nothing_return" shared="true">
        <return-type type="const GSList*" element_type="const-gchar*"/>
      </method>
      <method name="TestGslistNothingReturn2" cname="regress_test_gslist_nothing_return2" shared="true">
        <return-type type="GSList*" element_type="const-gchar*"/>
      </method>
      <method name="TestGslistNullIn" cname="regress_test_gslist_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="in" type="GSList*" element_type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestGslistNullOut" cname="regress_test_gslist_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="out_list" type="GSList**" element_type="gchar*" elements_owned="true" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestGtype" cname="regress_test_gtype" shared="true">
        <return-type type="GType"/>
        <parameters>
          <parameter name="in" type="GType"/>
        </parameters>
      </method>
      <method name="TestGvariantAs" cname="regress_test_gvariant_as" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="TestGvariantAsv" cname="regress_test_gvariant_asv" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="TestGvariantI" cname="regress_test_gvariant_i" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="TestGvariantS" cname="regress_test_gvariant_s" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="TestGvariantV" cname="regress_test_gvariant_v" shared="true">
        <return-type type="GLib.Variant"/>
      </method>
      <method name="TestHashTableCallback" cname="regress_test_hash_table_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="data" type="GHashTable*" element_type="const-gchar*"/>
          <parameter scope="call" name="callback" type="RegressTestCallbackHashtable"/>
        </parameters>
      </method>
      <method name="TestInt" cname="regress_test_int" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="in" type="gint"/>
        </parameters>
      </method>
      <method name="TestInt16" cname="regress_test_int16" shared="true">
        <return-type type="gint16"/>
        <parameters>
          <parameter name="in" type="gint16"/>
        </parameters>
      </method>
      <method name="TestInt32" cname="regress_test_int32" shared="true">
        <return-type type="gint32"/>
        <parameters>
          <parameter name="in" type="gint32"/>
        </parameters>
      </method>
      <method name="TestInt64" cname="regress_test_int64" shared="true">
        <return-type type="gint64"/>
        <parameters>
          <parameter name="in" type="gint64"/>
        </parameters>
      </method>
      <method name="TestInt8" cname="regress_test_int8" shared="true">
        <return-type type="gint8"/>
        <parameters>
          <parameter name="in" type="gint8"/>
        </parameters>
      </method>
      <method name="TestIntOutUtf8" cname="regress_test_int_out_utf8" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="length" type="gint*" owned="true" pass_as="out"/>
          <parameter name="in" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestIntValueArg" cname="regress_test_int_value_arg" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter name="v" type="GObject.Value"/>
        </parameters>
      </method>
      <method name="TestLong" cname="regress_test_long" shared="true">
        <return-type type="glong"/>
        <parameters>
          <parameter name="in" type="glong"/>
        </parameters>
      </method>
      <method name="TestMultiCallback" cname="regress_test_multi_callback" shared="true">
        <return-type type="gint"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestCallback"/>
        </parameters>
      </method>
      <method name="TestMultiDoubleArgs" cname="regress_test_multi_double_args" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="gdouble"/>
          <parameter name="one" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="two" type="gdouble*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestMultilineDocComments" cname="regress_test_multiline_doc_comments" shared="true">
        <return-type type="void"/>
      </method>
      <method name="TestNestedParameter" cname="regress_test_nested_parameter" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="a" type="gint"/>
        </parameters>
      </method>
      <method name="TestNoptrCallback" cname="regress_test_noptr_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestNoPtrCallback"/>
        </parameters>
      </method>
      <method name="TestNullGerrorCallback" cname="regress_test_null_gerror_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackGError"/>
        </parameters>
      </method>
      <method name="TestNullStrvInGvalue" cname="regress_test_null_strv_in_gvalue" shared="true">
        <return-type type="GObject.Value*" owned="true"/>
      </method>
      <method name="TestOwnedGerrorCallback" cname="regress_test_owned_gerror_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" name="callback" type="RegressTestCallbackOwnedGError"/>
        </parameters>
      </method>
      <method name="TestReturnAllowNone" cname="regress_test_return_allow_none" shared="true">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="TestReturnNullable" cname="regress_test_return_nullable" shared="true">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="TestShort" cname="regress_test_short" shared="true">
        <return-type type="gshort"/>
        <parameters>
          <parameter name="in" type="gshort"/>
        </parameters>
      </method>
      <method name="TestSimpleBoxedAConstReturn" cname="regress_test_simple_boxed_a_const_return" shared="true">
        <return-type type="RegressTestSimpleBoxedA*">
          <warning>missing glib:type-name</warning>
        </return-type>
      </method>
      <method name="TestSimpleCallback" cname="regress_test_simple_callback" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter scope="call" allow-none="1" name="callback" type="RegressTestSimpleCallback"/>
        </parameters>
      </method>
      <method name="TestSize" cname="regress_test_size" shared="true">
        <return-type type="gsize"/>
        <parameters>
          <parameter name="in" type="gsize"/>
        </parameters>
      </method>
      <method name="TestSsize" cname="regress_test_ssize" shared="true">
        <return-type type="gssize"/>
        <parameters>
          <parameter name="in" type="gssize"/>
        </parameters>
      </method>
      <method name="TestStructAParse" cname="regress_test_struct_a_parse" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="a_out" type="RegressTestStructA*" pass_as="out">
            <warning>missing glib:type-name</warning>
          </parameter>
          <parameter name="string" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestStrvIn" cname="regress_test_strv_in" shared="true">
        <return-type type="gboolean"/>
        <parameters>
          <parameter name="arr" type="char**" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="TestStrvInGvalue" cname="regress_test_strv_in_gvalue" shared="true">
        <return-type type="GObject.Value*" owned="true"/>
      </method>
      <method name="TestStrvOut" cname="regress_test_strv_out" shared="true">
        <return-type type="char***" owned="true" array="true" null_term_array="true"/>
      </method>
      <method name="TestStrvOutC" cname="regress_test_strv_out_c" shared="true">
        <return-type type="const char* const*" array="true" null_term_array="true"/>
      </method>
      <method name="TestStrvOutContainer" cname="regress_test_strv_out_container" shared="true">
        <return-type type="const char**" array="true" null_term_array="true"/>
      </method>
      <method name="TestStrvOutarg" cname="regress_test_strv_outarg" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="retp" type="const char***" pass_as="out" array="true" null_term_array="true"/>
        </parameters>
      </method>
      <method name="TestTimet" cname="regress_test_timet" shared="true">
        <return-type type="glong"/>
        <parameters>
          <parameter name="in" type="glong"/>
        </parameters>
      </method>
      <method name="TestTortureSignature0" cname="regress_test_torture_signature_0" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
          <parameter name="y" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="z" type="gint*" owned="true" pass_as="out"/>
          <parameter name="foo" type="const-gchar*"/>
          <parameter name="q" type="gint*" owned="true" pass_as="out"/>
          <parameter name="m" type="guint"/>
        </parameters>
      </method>
      <method name="TestTortureSignature1" cname="regress_test_torture_signature_1" shared="true">
        <return-type type="gboolean"/>
        <parameters throws="1">
          <parameter name="x" type="gint"/>
          <parameter name="y" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="z" type="gint*" owned="true" pass_as="out"/>
          <parameter name="foo" type="const-gchar*"/>
          <parameter name="q" type="gint*" owned="true" pass_as="out"/>
          <parameter name="m" type="guint"/>
          <parameter name="error" type="GError**"/>
        </parameters>
      </method>
      <method name="TestTortureSignature2" cname="regress_test_torture_signature_2" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="x" type="gint"/>
          <parameter closure="2" destroy="3" scope="notified" name="callback" type="RegressTestCallbackUserData"/>
          <parameter allow-none="1" name="user_data" type="gpointer"/>
          <parameter scope="async" name="notify" type="GLib.DestroyNotify"/>
          <parameter name="y" type="gdouble*" owned="true" pass_as="out"/>
          <parameter name="z" type="gint*" owned="true" pass_as="out"/>
          <parameter name="foo" type="const-gchar*"/>
          <parameter name="q" type="gint*" owned="true" pass_as="out"/>
          <parameter name="m" type="guint"/>
        </parameters>
      </method>
      <method name="TestUint" cname="regress_test_uint" shared="true">
        <return-type type="guint"/>
        <parameters>
          <parameter name="in" type="guint"/>
        </parameters>
      </method>
      <method name="TestUint16" cname="regress_test_uint16" shared="true">
        <return-type type="guint16"/>
        <parameters>
          <parameter name="in" type="guint16"/>
        </parameters>
      </method>
      <method name="TestUint32" cname="regress_test_uint32" shared="true">
        <return-type type="guint32"/>
        <parameters>
          <parameter name="in" type="guint32"/>
        </parameters>
      </method>
      <method name="TestUint64" cname="regress_test_uint64" shared="true">
        <return-type type="guint64"/>
        <parameters>
          <parameter name="in" type="guint64"/>
        </parameters>
      </method>
      <method name="TestUint8" cname="regress_test_uint8" shared="true">
        <return-type type="guint8"/>
        <parameters>
          <parameter name="in" type="guint8"/>
        </parameters>
      </method>
      <method name="TestUlong" cname="regress_test_ulong" shared="true">
        <return-type type="gulong"/>
        <parameters>
          <parameter name="in" type="gulong"/>
        </parameters>
      </method>
      <method name="TestUnconventionalErrorQuark" cname="regress_test_unconventional_error_quark" shared="true">
        <return-type type="GLib.Quark"/>
      </method>
      <method name="TestUnichar" cname="regress_test_unichar" shared="true">
        <return-type type="gunichar"/>
        <parameters>
          <parameter name="in" type="gunichar"/>
        </parameters>
      </method>
      <method name="TestUnsignedEnumParam" cname="regress_test_unsigned_enum_param" shared="true">
        <return-type type="const-gchar*"/>
        <parameters>
          <parameter name="e" type="RegressTestEnumUnsigned"/>
        </parameters>
      </method>
      <method name="TestUshort" cname="regress_test_ushort" shared="true">
        <return-type type="gushort"/>
        <parameters>
          <parameter name="in" type="gushort"/>
        </parameters>
      </method>
      <method name="TestUtf8ConstIn" cname="regress_test_utf8_const_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="in" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestUtf8ConstReturn" cname="regress_test_utf8_const_return" shared="true">
        <return-type type="const-gchar*"/>
      </method>
      <method name="TestUtf8Inout" cname="regress_test_utf8_inout" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="inout" type="gchar*" owned="true" pass_as="ref"/>
        </parameters>
      </method>
      <method name="TestUtf8NonconstReturn" cname="regress_test_utf8_nonconst_return" shared="true">
        <return-type type="gchar*" owned="true"/>
      </method>
      <method name="TestUtf8NullIn" cname="regress_test_utf8_null_in" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="in" type="const-gchar*"/>
        </parameters>
      </method>
      <method name="TestUtf8NullOut" cname="regress_test_utf8_null_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter allow-none="1" name="char_out" type="gchar*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestUtf8Out" cname="regress_test_utf8_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="out" type="gchar*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestUtf8OutNonconstReturn" cname="regress_test_utf8_out_nonconst_return" shared="true">
        <return-type type="gchar*" owned="true"/>
        <parameters>
          <parameter name="out" type="gchar*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestUtf8OutOut" cname="regress_test_utf8_out_out" shared="true">
        <return-type type="void"/>
        <parameters>
          <parameter name="out0" type="gchar*" owned="true" pass_as="out"/>
          <parameter name="out1" type="gchar*" owned="true" pass_as="out"/>
        </parameters>
      </method>
      <method name="TestValueReturn" cname="regress_test_value_return" shared="true">
        <return-type type="GObject.Value"/>
        <parameters>
          <parameter name="i" type="gint"/>
        </parameters>
      </method>
      <method name="TestVersioning" cname="regress_test_versioning" shared="true" version="1.32.1" deprecated="true" deprecated-version="1.33.3">
        <return-type type="void"/>
      </method>
    </object>
    <object name="Constants" cname="RegressConstants" opaque="true">
      <constant value="100" ctype="gint" gtype="gint" name="ANNOTATION_CALCULATED_DEFINE"/>
      <constant value="10000000000UL" ctype="gint" gtype="gint" name="ANNOTATION_CALCULATED_LARGE" version="1.4"/>
      <constant value="1000000UL" ctype="gint" gtype="gint" name="ANNOTATION_CALCULATED_LARGE_DIV"/>
      <constant value="true" ctype="gboolean" gtype="gboolean" name="BOOL_CONSTANT"/>
      <constant value="44.220000" ctype="gdouble" gtype="gdouble" name="DOUBLE_CONSTANT"/>
      <constant value="should be exposed" ctype="gchar*" gtype="gchar*" name="FOO_DEFINE_SHOULD_BE_EXPOSED"/>
      <constant value="6" ctype="gint" gtype="gint" name="FOO_FLAGS_SECOND_AND_THIRD"/>
      <constant value="3.141590" ctype="gdouble" gtype="gdouble" name="FOO_PIE_IS_TASTY"/>
      <constant value="4408" ctype="gint" gtype="gint" name="FOO_SUCCESS_INT"/>
      <constant value="3" ctype="gint" gtype="gint" name="GI_SCANNER_ELSE"/>
      <constant value="3" ctype="gint" gtype="gint" name="GI_SCANNER_IFDEF"/>
      <constant value="18446744073709551615" ctype="guint64" gtype="guint64" name="GUINT64_CONSTANT"/>
      <constant value="18446744073709551615" ctype="RegressTestTypeGUInt64" gtype="RegressTestTypeGUInt64" name="GUINT64_CONSTANTA"/>
      <constant value="1000" ctype="gint64" gtype="gint64" name="G_GINT64_CONSTANT"/>
      <constant value="4422" ctype="gint" gtype="gint" name="INT_CONSTANT"/>
      <constant value="TYPE,VALUE,ENCODING,CHARSET,LANGUAGE,DOM,INTL,POSTAL,PARCEL,HOME,WORK,PREF,VOICE,FAX,MSG,CELL,PAGER,BBS,MODEM,CAR,ISDN,VIDEO,AOL,APPLELINK,ATTMAIL,CIS,EWORLD,INTERNET,IBMMAIL,MCIMAIL,POWERSHARE,PRODIGY,TLX,X400,GIF,CGM,WMF,BMP,MET,PMB,DIB,PICT,TIFF,PDF,PS,JPEG,QTIME,MPEG,MPEG2,AVI,WAVE,AIFF,PCM,X509,PGP" ctype="gchar*" gtype="gchar*" name="LONG_STRING_CONSTANT"/>
      <constant value="18446744073709551615" ctype="guint64" gtype="guint64" name="MAXUINT64"/>
      <constant value="-9223372036854775808" ctype="gint64" gtype="gint64" name="MININT64"/>
      <constant value="4423" ctype="gint" gtype="gint" name="Mixed_Case_Constant"/>
      <constant value="-42" ctype="gint" gtype="gint" name="NEGATIVE_INT_CONSTANT"/>
      <constant value="Some String" ctype="gchar*" gtype="gchar*" name="STRING_CONSTANT"/>
      <constant value="const ♥ utf8" ctype="gchar*" gtype="gchar*" name="UTF8_CONSTANT"/>
    </object>
  </namespace>
</api>
