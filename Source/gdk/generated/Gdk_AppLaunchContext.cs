// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AppLaunchContext : GLib.AppLaunchContext {

		public AppLaunchContext (IntPtr raw) : base(raw) {}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_app_launch_context_new();

		public AppLaunchContext () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AppLaunchContext)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gdk_app_launch_context_new();
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_display(IntPtr raw, IntPtr display);

		[Obsolete]
		[GLib.Property ("display")]
		public Gdk.Display Display {
			get {
				GLib.Value val = GetProperty ("display");
				Gdk.Display ret = (Gdk.Display) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gdk_app_launch_context_set_display(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_app_launch_context_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gdk_app_launch_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_desktop(IntPtr raw, int desktop);

		public int Desktop { 
			set {
				gdk_app_launch_context_set_desktop(Handle, value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_icon(IntPtr raw, IntPtr icon);

		public GLib.IIcon Icon { 
			set {
				gdk_app_launch_context_set_icon(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as GLib.IconAdapter).Handle));
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_icon_name(IntPtr raw, IntPtr icon_name);

		public string IconName { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_app_launch_context_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_screen(IntPtr raw, IntPtr screen);

		public Gdk.Screen Screen { 
			set {
				gdk_app_launch_context_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_app_launch_context_set_timestamp(IntPtr raw, uint timestamp);

		public uint Timestamp { 
			set {
				gdk_app_launch_context_set_timestamp(Handle, value);
			}
		}

#endregion
	}
}
