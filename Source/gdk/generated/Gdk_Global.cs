// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Global {

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_disable_multidevice();

		public static void DisableMultidevice() {
			gdk_disable_multidevice();
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_default_root_window();

		public static Gdk.Window DefaultRootWindow { 
			get {
				IntPtr raw_ret = gdk_get_default_root_window();
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_display_arg_name();

		public static string DisplayArgName { 
			get {
				IntPtr raw_ret = gdk_get_display_arg_name();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_get_program_class();

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_program_class(IntPtr program_class);

		public static string ProgramClass { 
			get {
				IntPtr raw_ret = gdk_get_program_class();
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_set_program_class(native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_get_show_events();

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_show_events(bool show_events);

		public static bool ShowEvents { 
			get {
				bool raw_ret = gdk_get_show_events();
				bool ret = raw_ret;
				return ret;
			}
			set {
				gdk_set_show_events(value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_error_quark();

		public static int GlErrorQuark() {
			int raw_ret = gdk_gl_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_pre_parse_libgtk_only();

		[Obsolete]
		public static void PreParseLibgtkOnly() {
			gdk_pre_parse_libgtk_only();
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_allowed_backends(IntPtr backends);

		public static string AllowedBackends { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gdk_set_allowed_backends(native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_set_double_click_time(uint msec);

		public static uint DoubleClickTime { 
			set {
				gdk_set_double_click_time(value);
			}
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_setting_get(IntPtr name, IntPtr value);

		public static bool SettingGet(string name, GLib.Value value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool raw_ret = gdk_setting_get(native_name, native_value);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			Marshal.FreeHGlobal (native_value);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_unicode_to_keyval(uint wc);

		public static uint UnicodeToKeyval(uint wc) {
			uint raw_ret = gdk_unicode_to_keyval(wc);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_notify_startup_complete();

		public static void NotifyStartupComplete() {
			gdk_notify_startup_complete();
		}

#endregion
	}
}
