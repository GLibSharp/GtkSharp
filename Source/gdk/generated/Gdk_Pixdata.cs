// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Pixdata : IEquatable<Pixdata> {

		public uint Magic;
		public int Length;
		public uint PixdataType;
		public uint Rowstride;
		public uint Width;
		public uint Height;
		private IntPtr _pixel_data;

		public static Gdk.Pixdata Zero = new Gdk.Pixdata ();

		public static Gdk.Pixdata New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.Pixdata.Zero;
			return (Gdk.Pixdata) Marshal.PtrToStructure (raw, typeof (Gdk.Pixdata));
		}

		public bool Equals (Pixdata other)
		{
			return true && Magic.Equals (other.Magic) && Length.Equals (other.Length) && PixdataType.Equals (other.PixdataType) && Rowstride.Equals (other.Rowstride) && Width.Equals (other.Width) && Height.Equals (other.Height) && _pixel_data.Equals (other._pixel_data);
		}

		public override bool Equals (object other)
		{
			return other is Pixdata && Equals ((Pixdata) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Magic.GetHashCode () ^ Length.GetHashCode () ^ PixdataType.GetHashCode () ^ Rowstride.GetHashCode () ^ Width.GetHashCode () ^ Height.GetHashCode () ^ _pixel_data.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
