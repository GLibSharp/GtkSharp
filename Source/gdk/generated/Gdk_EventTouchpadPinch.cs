// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct EventTouchpadPinch : IEquatable<EventTouchpadPinch> {

		public Gdk.EventType Type;
		private IntPtr _window;
		public Gdk.Window Window {
			get {
				return GLib.Object.GetObject(_window) as Gdk.Window;
			}
			set {
				_window = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public sbyte SendEvent;
		public sbyte Phase;
		public sbyte NFingers;
		public uint Time;
		public double X;
		public double Y;
		public double Dx;
		public double Dy;
		public double AngleDelta;
		public double Scale;
		public double XRoot;
		public double YRoot;
		public uint State;

		public static Gdk.EventTouchpadPinch Zero = new Gdk.EventTouchpadPinch ();

		public static Gdk.EventTouchpadPinch New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.EventTouchpadPinch.Zero;
			return (Gdk.EventTouchpadPinch) Marshal.PtrToStructure (raw, typeof (Gdk.EventTouchpadPinch));
		}

		public bool Equals (EventTouchpadPinch other)
		{
			return true && Type.Equals (other.Type) && Window.Equals (other.Window) && SendEvent.Equals (other.SendEvent) && Phase.Equals (other.Phase) && NFingers.Equals (other.NFingers) && Time.Equals (other.Time) && X.Equals (other.X) && Y.Equals (other.Y) && Dx.Equals (other.Dx) && Dy.Equals (other.Dy) && AngleDelta.Equals (other.AngleDelta) && Scale.Equals (other.Scale) && XRoot.Equals (other.XRoot) && YRoot.Equals (other.YRoot) && State.Equals (other.State);
		}

		public override bool Equals (object other)
		{
			return other is EventTouchpadPinch && Equals ((EventTouchpadPinch) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Type.GetHashCode () ^ Window.GetHashCode () ^ SendEvent.GetHashCode () ^ Phase.GetHashCode () ^ NFingers.GetHashCode () ^ Time.GetHashCode () ^ X.GetHashCode () ^ Y.GetHashCode () ^ Dx.GetHashCode () ^ Dy.GetHashCode () ^ AngleDelta.GetHashCode () ^ Scale.GetHashCode () ^ XRoot.GetHashCode () ^ YRoot.GetHashCode () ^ State.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
