// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Geometry : IEquatable<Geometry> {

		public int MinWidth;
		public int MinHeight;
		public int MaxWidth;
		public int MaxHeight;
		public int BaseWidth;
		public int BaseHeight;
		public int WidthInc;
		public int HeightInc;
		public double MinAspect;
		public double MaxAspect;
		public Gdk.Gravity WinGravity;

		public static Gdk.Geometry Zero = new Gdk.Geometry ();

		public static Gdk.Geometry New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.Geometry.Zero;
			return (Gdk.Geometry) Marshal.PtrToStructure (raw, typeof (Gdk.Geometry));
		}

		public bool Equals (Geometry other)
		{
			return true && MinWidth.Equals (other.MinWidth) && MinHeight.Equals (other.MinHeight) && MaxWidth.Equals (other.MaxWidth) && MaxHeight.Equals (other.MaxHeight) && BaseWidth.Equals (other.BaseWidth) && BaseHeight.Equals (other.BaseHeight) && WidthInc.Equals (other.WidthInc) && HeightInc.Equals (other.HeightInc) && MinAspect.Equals (other.MinAspect) && MaxAspect.Equals (other.MaxAspect) && WinGravity.Equals (other.WinGravity);
		}

		public override bool Equals (object other)
		{
			return other is Geometry && Equals ((Geometry) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ MinWidth.GetHashCode () ^ MinHeight.GetHashCode () ^ MaxWidth.GetHashCode () ^ MaxHeight.GetHashCode () ^ BaseWidth.GetHashCode () ^ BaseHeight.GetHashCode () ^ WidthInc.GetHashCode () ^ HeightInc.GetHashCode () ^ MinAspect.GetHashCode () ^ MaxAspect.GetHashCode () ^ WinGravity.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
