// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Keyval {

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_keyval_convert_case(uint symbol, out uint lower, out uint upper);

		public static void ConvertCase(uint symbol, out uint lower, out uint upper) {
			gdk_keyval_convert_case(symbol, out lower, out upper);
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_keyval_from_name(IntPtr keyval_name);

		public static uint FromName(string keyval_name) {
			IntPtr native_keyval_name = GLib.Marshaller.StringToPtrGStrdup (keyval_name);
			uint raw_ret = gdk_keyval_from_name(native_keyval_name);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_keyval_name);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_keyval_is_lower(uint keyval);

		public static bool IsLower(uint keyval) {
			bool raw_ret = gdk_keyval_is_lower(keyval);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_keyval_is_upper(uint keyval);

		public static bool IsUpper(uint keyval) {
			bool raw_ret = gdk_keyval_is_upper(keyval);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_keyval_name(uint keyval);

		public static string Name(uint keyval) {
			IntPtr raw_ret = gdk_keyval_name(keyval);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_keyval_to_lower(uint keyval);

		public static uint ToLower(uint keyval) {
			uint raw_ret = gdk_keyval_to_lower(keyval);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_keyval_to_unicode(uint keyval);

		public static uint ToUnicode(uint keyval) {
			uint raw_ret = gdk_keyval_to_unicode(keyval);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libgdk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gdk_keyval_to_upper(uint keyval);

		public static uint ToUpper(uint keyval) {
			uint raw_ret = gdk_keyval_to_upper(keyval);
			uint ret = raw_ret;
			return ret;
		}

#endregion
	}
}
