// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gdk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct KeymapKey : IEquatable<KeymapKey> {

		public uint Keycode;
		public int Group;
		public int Level;

		public static Gdk.KeymapKey Zero = new Gdk.KeymapKey ();

		public static Gdk.KeymapKey New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gdk.KeymapKey.Zero;
			return (Gdk.KeymapKey) Marshal.PtrToStructure (raw, typeof (Gdk.KeymapKey));
		}

		public bool Equals (KeymapKey other)
		{
			return true && Keycode.Equals (other.Keycode) && Group.Equals (other.Group) && Level.Equals (other.Level);
		}

		public override bool Equals (object other)
		{
			return other is KeymapKey && Equals ((KeymapKey) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Keycode.GetHashCode () ^ Group.GetHashCode () ^ Level.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
