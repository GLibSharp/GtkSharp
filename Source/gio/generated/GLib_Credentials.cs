// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Credentials : GLib.Object {

		public Credentials (IntPtr raw) : base(raw) {}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_new();

		public Credentials () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Credentials)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_credentials_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_get_native(IntPtr raw, int native_type);

		public IntPtr GetNative(GLib.CredentialsType native_type) {
			IntPtr raw_ret = g_credentials_get_native(Handle, (int) native_type);
			IntPtr ret = raw_ret;
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_credentials_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_credentials_is_same_user(IntPtr raw, IntPtr other_credentials, out IntPtr error);

		public unsafe bool IsSameUser(GLib.Credentials other_credentials) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_credentials_is_same_user(Handle, other_credentials == null ? IntPtr.Zero : other_credentials.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_credentials_set_native(IntPtr raw, int native_type, IntPtr native);

		public void SetNative(GLib.CredentialsType native_type, IntPtr native) {
			g_credentials_set_native(Handle, (int) native_type, native);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_credentials_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = g_credentials_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
