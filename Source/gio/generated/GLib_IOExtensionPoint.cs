// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IOExtensionPoint : GLib.Opaque {

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_get_extension_by_name(IntPtr raw, IntPtr name);

		public GLib.IOExtension GetExtensionByName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = g_io_extension_point_get_extension_by_name(Handle, native_name);
			GLib.IOExtension ret = raw_ret == IntPtr.Zero ? null : (GLib.IOExtension) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.IOExtension), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_get_extensions(IntPtr raw);

		public GLib.List Extensions { 
			get {
				IntPtr raw_ret = g_io_extension_point_get_extensions(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_get_required_type(IntPtr raw);

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_extension_point_set_required_type(IntPtr raw, IntPtr type);

		public GLib.GType RequiredType { 
			get {
				IntPtr raw_ret = g_io_extension_point_get_required_type(Handle);
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
			set {
				g_io_extension_point_set_required_type(Handle, value.Val);
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_implement(IntPtr extension_point_name, IntPtr type, IntPtr extension_name, int priority);

		public static GLib.IOExtension Implement(string extension_point_name, GLib.GType type, string extension_name, int priority) {
			IntPtr native_extension_point_name = GLib.Marshaller.StringToPtrGStrdup (extension_point_name);
			IntPtr native_extension_name = GLib.Marshaller.StringToPtrGStrdup (extension_name);
			IntPtr raw_ret = g_io_extension_point_implement(native_extension_point_name, type.Val, native_extension_name, priority);
			GLib.IOExtension ret = raw_ret == IntPtr.Zero ? null : (GLib.IOExtension) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.IOExtension), false);
			GLib.Marshaller.Free (native_extension_point_name);
			GLib.Marshaller.Free (native_extension_name);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_lookup(IntPtr name);

		public static GLib.IOExtensionPoint Lookup(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = g_io_extension_point_lookup(native_name);
			GLib.IOExtensionPoint ret = raw_ret == IntPtr.Zero ? null : (GLib.IOExtensionPoint) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.IOExtensionPoint), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_extension_point_register(IntPtr name);

		public static GLib.IOExtensionPoint Register(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = g_io_extension_point_register(native_name);
			GLib.IOExtensionPoint ret = raw_ret == IntPtr.Zero ? null : (GLib.IOExtensionPoint) GLib.Opaque.GetOpaque (raw_ret, typeof (GLib.IOExtensionPoint), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		public IOExtensionPoint(IntPtr raw) : base(raw) {}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
