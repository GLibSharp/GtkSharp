// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLibSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate bool SettingsBindGetMappingNative(IntPtr value, IntPtr variant, IntPtr user_data);

	internal class SettingsBindGetMappingInvoker {

		SettingsBindGetMappingNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~SettingsBindGetMappingInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal SettingsBindGetMappingInvoker (SettingsBindGetMappingNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal SettingsBindGetMappingInvoker (SettingsBindGetMappingNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal SettingsBindGetMappingInvoker (SettingsBindGetMappingNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal GLib.SettingsBindGetMapping Handler {
			get {
				return new GLib.SettingsBindGetMapping(InvokeNative);
			}
		}

		bool InvokeNative (GLib.Value value, GLib.Variant variant)
		{
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			bool __result = native_cb (native_value, variant == null ? IntPtr.Zero : variant.Handle, __data);
			Marshal.FreeHGlobal (native_value);
			return __result;
		}
	}

	internal class SettingsBindGetMappingWrapper {

		public bool NativeCallback (IntPtr value, IntPtr variant, IntPtr user_data)
		{
			try {
				bool __ret = managed ((GLib.Value) Marshal.PtrToStructure (value, typeof (GLib.Value)), new GLib.Variant(variant));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal SettingsBindGetMappingNative NativeDelegate;
		GLib.SettingsBindGetMapping managed;

		public SettingsBindGetMappingWrapper (GLib.SettingsBindGetMapping managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new SettingsBindGetMappingNative (NativeCallback);
		}

		public static GLib.SettingsBindGetMapping GetManagedDelegate (SettingsBindGetMappingNative native)
		{
			if (native == null)
				return null;
			SettingsBindGetMappingWrapper wrapper = (SettingsBindGetMappingWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
