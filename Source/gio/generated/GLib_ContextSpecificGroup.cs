// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ContextSpecificGroup : IEquatable<ContextSpecificGroup> {

		private IntPtr _table;
		public GLib.Mutex Lock;
		public GLib.Cond Cond;
		public bool RequestedState;
		public IntPtr RequestedFunc;
		public bool EffectiveState;

		public static GLib.ContextSpecificGroup Zero = new GLib.ContextSpecificGroup ();

		public static GLib.ContextSpecificGroup New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return GLib.ContextSpecificGroup.Zero;
			return (GLib.ContextSpecificGroup) Marshal.PtrToStructure (raw, typeof (GLib.ContextSpecificGroup));
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_context_specific_group_emit(IntPtr raw, uint signal_id);

		public void Emit(uint signal_id) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			g_context_specific_group_emit(this_as_native, signal_id);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_context_specific_group_get(IntPtr raw, IntPtr type, long context_offset, IntPtr start_func);

		public IntPtr Get(GLib.GType type, long context_offset, IntPtr start_func) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = g_context_specific_group_get(this_as_native, type.Val, context_offset, start_func);
			IntPtr ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_context_specific_group_remove(IntPtr raw, IntPtr context, IntPtr instance, IntPtr stop_func);

		public void Remove(GLib.MainContext context, IntPtr instance, IntPtr stop_func) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			g_context_specific_group_remove(this_as_native, context == null ? IntPtr.Zero : context.Handle, instance, stop_func);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		static void ReadNative (IntPtr native, ref GLib.ContextSpecificGroup target)
		{
			target = New (native);
		}

		public bool Equals (ContextSpecificGroup other)
		{
			return true && _table.Equals (other._table) && Lock.Equals (other.Lock) && Cond.Equals (other.Cond) && RequestedState.Equals (other.RequestedState) && RequestedFunc.Equals (other.RequestedFunc) && EffectiveState.Equals (other.EffectiveState);
		}

		public override bool Equals (object other)
		{
			return other is ContextSpecificGroup && Equals ((ContextSpecificGroup) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _table.GetHashCode () ^ Lock.GetHashCode () ^ Cond.GetHashCode () ^ RequestedState.GetHashCode () ^ RequestedFunc.GetHashCode () ^ EffectiveState.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
