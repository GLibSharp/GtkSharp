// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FileDescriptorBasedAdapter : GLib.GInterfaceAdapter, GLib.IFileDescriptorBased {

		GLib.Object implementor;

		public FileDescriptorBasedAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_file_descriptor_based_get_type();

		private static GLib.GType _gtype = new GLib.GType (g_file_descriptor_based_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static IFileDescriptorBased GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static IFileDescriptorBased GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj as IFileDescriptorBased == null)
				return new FileDescriptorBasedAdapter (obj.Handle);
			else
				return obj as IFileDescriptorBased;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int g_file_descriptor_based_get_fd(IntPtr raw);

		public int Fd { 
			get {
				int raw_ret = g_file_descriptor_based_get_fd(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
