// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IOModuleScope : GLib.Opaque {

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_module_scope_block(IntPtr raw, IntPtr basename);

		public void Block(string basename) {
			IntPtr native_basename = GLib.Marshaller.StringToPtrGStrdup (basename);
			g_io_module_scope_block(Handle, native_basename);
			GLib.Marshaller.Free (native_basename);
		}

		public IOModuleScope(IntPtr raw) : base(raw) {}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_module_scope_new(int flags);

		public IOModuleScope (GLib.IOModuleScopeFlags flags) 
		{
			Raw = g_io_module_scope_new((int) flags);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_module_scope_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			g_io_module_scope_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				g_io_module_scope_free (handle);
				return false;
			}
		}

		~IOModuleScope ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
