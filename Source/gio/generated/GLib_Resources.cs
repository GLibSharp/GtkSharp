// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Resources {

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_resources_enumerate_children(IntPtr path, int lookup_flags, out IntPtr error);

		public static unsafe string EnumerateChildren(string path, GLib.ResourceLookupFlags lookup_flags) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_resources_enumerate_children(native_path, (int) lookup_flags, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool g_resources_get_info(IntPtr path, int lookup_flags, out UIntPtr size, out uint flags, out IntPtr error);

		public static unsafe bool GetInfo(string path, GLib.ResourceLookupFlags lookup_flags, out ulong size, out uint flags) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			UIntPtr native_size;
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_resources_get_info(native_path, (int) lookup_flags, out native_size, out flags, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_path);
			size = (ulong) native_size;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_resources_lookup_data(IntPtr path, int lookup_flags, out IntPtr error);

		public static unsafe GLib.Bytes LookupData(string path, GLib.ResourceLookupFlags lookup_flags) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_resources_lookup_data(native_path, (int) lookup_flags, out error);
			GLib.Bytes ret = new GLib.Bytes(raw_ret);
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_resources_open_stream(IntPtr path, int lookup_flags, out IntPtr error);

		public static unsafe GLib.InputStream OpenStream(string path, GLib.ResourceLookupFlags lookup_flags) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_resources_open_stream(native_path, (int) lookup_flags, out error);
			GLib.InputStream ret = GLib.Object.GetObject(raw_ret) as GLib.InputStream;
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_resources_register(IntPtr resource);

		public static void Register(GLib.Resource resource) {
			g_resources_register(resource == null ? IntPtr.Zero : resource.Handle);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_resources_unregister(IntPtr resource);

		public static void Unregister(GLib.Resource resource) {
			g_resources_unregister(resource == null ? IntPtr.Zero : resource.Handle);
		}

#endregion
	}
}
