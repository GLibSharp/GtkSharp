// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FileIOStream : GLib.IOStream, GLib.ISeekable {

		public FileIOStream (IntPtr raw) : base(raw) {}

		protected FileIOStream() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static TellNativeDelegate Tell_cb_delegate;
		static TellNativeDelegate TellVMCallback {
			get {
				if (Tell_cb_delegate == null)
					Tell_cb_delegate = new TellNativeDelegate (Tell_cb);
				return Tell_cb_delegate;
			}
		}

		static void OverrideTell (GLib.GType gtype)
		{
			OverrideTell (gtype, TellVMCallback);
		}

		static void OverrideTell (GLib.GType gtype, TellNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("tell"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate long TellNativeDelegate (IntPtr inst);

		static long Tell_cb (IntPtr inst)
		{
			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				long __result;
				__result = __obj.OnTell ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideTell")]
		protected virtual long OnTell ()
		{
			return InternalTell ();
		}

		private long InternalTell ()
		{
			TellNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("tell"));
				unmanaged = (TellNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(TellNativeDelegate));
			}
			if (unmanaged == null) return 0;

			long __result = unmanaged (this.Handle);
			return __result;
		}

		static CanSeekNativeDelegate CanSeek_cb_delegate;
		static CanSeekNativeDelegate CanSeekVMCallback {
			get {
				if (CanSeek_cb_delegate == null)
					CanSeek_cb_delegate = new CanSeekNativeDelegate (CanSeek_cb);
				return CanSeek_cb_delegate;
			}
		}

		static void OverrideCanSeek (GLib.GType gtype)
		{
			OverrideCanSeek (gtype, CanSeekVMCallback);
		}

		static void OverrideCanSeek (GLib.GType gtype, CanSeekNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("can_seek"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CanSeekNativeDelegate (IntPtr inst);

		static bool CanSeek_cb (IntPtr inst)
		{
			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				bool __result;
				__result = __obj.OnCanSeek ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideCanSeek")]
		protected virtual bool OnCanSeek ()
		{
			return InternalCanSeek ();
		}

		private bool InternalCanSeek ()
		{
			CanSeekNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("can_seek"));
				unmanaged = (CanSeekNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CanSeekNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SeekNativeDelegate Seek_cb_delegate;
		static SeekNativeDelegate SeekVMCallback {
			get {
				if (Seek_cb_delegate == null)
					Seek_cb_delegate = new SeekNativeDelegate (Seek_cb);
				return Seek_cb_delegate;
			}
		}

		static void OverrideSeek (GLib.GType gtype)
		{
			OverrideSeek (gtype, SeekVMCallback);
		}

		static void OverrideSeek (GLib.GType gtype, SeekNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("seek"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SeekNativeDelegate (IntPtr inst, long offset, int type, IntPtr cancellable, out IntPtr error);

		static bool Seek_cb (IntPtr inst, long offset, int type, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				bool __result;
				__result = __obj.OnSeek (offset, (GLib.SeekType) type, GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideSeek")]
		protected virtual bool OnSeek (long offset, GLib.SeekType type, GLib.Cancellable cancellable)
		{
			return InternalSeek (offset, type, cancellable);
		}

		private bool InternalSeek (long offset, GLib.SeekType type, GLib.Cancellable cancellable)
		{
			SeekNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("seek"));
				unmanaged = (SeekNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SeekNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			bool __result = unmanaged (this.Handle, offset, (int) type, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			return __result;
		}

		static CanTruncateNativeDelegate CanTruncate_cb_delegate;
		static CanTruncateNativeDelegate CanTruncateVMCallback {
			get {
				if (CanTruncate_cb_delegate == null)
					CanTruncate_cb_delegate = new CanTruncateNativeDelegate (CanTruncate_cb);
				return CanTruncate_cb_delegate;
			}
		}

		static void OverrideCanTruncate (GLib.GType gtype)
		{
			OverrideCanTruncate (gtype, CanTruncateVMCallback);
		}

		static void OverrideCanTruncate (GLib.GType gtype, CanTruncateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("can_truncate"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CanTruncateNativeDelegate (IntPtr inst);

		static bool CanTruncate_cb (IntPtr inst)
		{
			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				bool __result;
				__result = __obj.OnCanTruncate ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideCanTruncate")]
		protected virtual bool OnCanTruncate ()
		{
			return InternalCanTruncate ();
		}

		private bool InternalCanTruncate ()
		{
			CanTruncateNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("can_truncate"));
				unmanaged = (CanTruncateNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CanTruncateNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static TruncateFnNativeDelegate TruncateFn_cb_delegate;
		static TruncateFnNativeDelegate TruncateFnVMCallback {
			get {
				if (TruncateFn_cb_delegate == null)
					TruncateFn_cb_delegate = new TruncateFnNativeDelegate (TruncateFn_cb);
				return TruncateFn_cb_delegate;
			}
		}

		static void OverrideTruncateFn (GLib.GType gtype)
		{
			OverrideTruncateFn (gtype, TruncateFnVMCallback);
		}

		static void OverrideTruncateFn (GLib.GType gtype, TruncateFnNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("truncate_fn"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TruncateFnNativeDelegate (IntPtr inst, long size, IntPtr cancellable, out IntPtr error);

		static bool TruncateFn_cb (IntPtr inst, long size, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				bool __result;
				__result = __obj.OnTruncateFn (size, GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideTruncateFn")]
		protected virtual bool OnTruncateFn (long size, GLib.Cancellable cancellable)
		{
			return InternalTruncateFn (size, cancellable);
		}

		private bool InternalTruncateFn (long size, GLib.Cancellable cancellable)
		{
			TruncateFnNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("truncate_fn"));
				unmanaged = (TruncateFnNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(TruncateFnNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			bool __result = unmanaged (this.Handle, size, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			return __result;
		}

		static QueryInfoNativeDelegate QueryInfo_cb_delegate;
		static QueryInfoNativeDelegate QueryInfoVMCallback {
			get {
				if (QueryInfo_cb_delegate == null)
					QueryInfo_cb_delegate = new QueryInfoNativeDelegate (QueryInfo_cb);
				return QueryInfo_cb_delegate;
			}
		}

		static void OverrideQueryInfo (GLib.GType gtype)
		{
			OverrideQueryInfo (gtype, QueryInfoVMCallback);
		}

		static void OverrideQueryInfo (GLib.GType gtype, QueryInfoNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr QueryInfoNativeDelegate (IntPtr inst, IntPtr attributes, IntPtr cancellable, out IntPtr error);

		static IntPtr QueryInfo_cb (IntPtr inst, IntPtr attributes, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				GLib.FileInfo __result;
				__result = __obj.OnQueryInfo (GLib.Marshaller.Utf8PtrToString (attributes), GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideQueryInfo")]
		protected virtual GLib.FileInfo OnQueryInfo (string attributes, GLib.Cancellable cancellable)
		{
			return InternalQueryInfo (attributes, cancellable);
		}

		private GLib.FileInfo InternalQueryInfo (string attributes, GLib.Cancellable cancellable)
		{
			QueryInfoNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info"));
				unmanaged = (QueryInfoNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(QueryInfoNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr native_attributes = GLib.Marshaller.StringToPtrGStrdup (attributes);
			IntPtr error = IntPtr.Zero;
			IntPtr __result = unmanaged (this.Handle, native_attributes, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.Marshaller.Free (native_attributes);
			return GLib.Object.GetObject(__result) as GLib.FileInfo;
		}

		static QueryInfoAsyncNativeDelegate QueryInfoAsync_cb_delegate;
		static QueryInfoAsyncNativeDelegate QueryInfoAsyncVMCallback {
			get {
				if (QueryInfoAsync_cb_delegate == null)
					QueryInfoAsync_cb_delegate = new QueryInfoAsyncNativeDelegate (QueryInfoAsync_cb);
				return QueryInfoAsync_cb_delegate;
			}
		}

		static void OverrideQueryInfoAsync (GLib.GType gtype)
		{
			OverrideQueryInfoAsync (gtype, QueryInfoAsyncVMCallback);
		}

		static void OverrideQueryInfoAsync (GLib.GType gtype, QueryInfoAsyncNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info_async"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void QueryInfoAsyncNativeDelegate (IntPtr inst, IntPtr attributes, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		static void QueryInfoAsync_cb (IntPtr inst, IntPtr attributes, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data)
		{
			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				GLibSharp.AsyncReadyCallbackInvoker cb_invoker = new GLibSharp.AsyncReadyCallbackInvoker (cb, user_data);
				__obj.OnQueryInfoAsync (GLib.Marshaller.Utf8PtrToString (attributes), io_priority, GLib.Object.GetObject(cancellable) as GLib.Cancellable, cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideQueryInfoAsync")]
		protected virtual void OnQueryInfoAsync (string attributes, int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			InternalQueryInfoAsync (attributes, io_priority, cancellable, cb);
		}

		private void InternalQueryInfoAsync (string attributes, int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb)
		{
			QueryInfoAsyncNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info_async"));
				unmanaged = (QueryInfoAsyncNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(QueryInfoAsyncNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_attributes = GLib.Marshaller.StringToPtrGStrdup (attributes);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			unmanaged (this.Handle, native_attributes, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_attributes);
		}

		static QueryInfoFinishNativeDelegate QueryInfoFinish_cb_delegate;
		static QueryInfoFinishNativeDelegate QueryInfoFinishVMCallback {
			get {
				if (QueryInfoFinish_cb_delegate == null)
					QueryInfoFinish_cb_delegate = new QueryInfoFinishNativeDelegate (QueryInfoFinish_cb);
				return QueryInfoFinish_cb_delegate;
			}
		}

		static void OverrideQueryInfoFinish (GLib.GType gtype)
		{
			OverrideQueryInfoFinish (gtype, QueryInfoFinishVMCallback);
		}

		static void OverrideQueryInfoFinish (GLib.GType gtype, QueryInfoFinishNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info_finish"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr QueryInfoFinishNativeDelegate (IntPtr inst, IntPtr result, out IntPtr error);

		static IntPtr QueryInfoFinish_cb (IntPtr inst, IntPtr result, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				GLib.FileInfo __result;
				__result = __obj.OnQueryInfoFinish (GLib.AsyncResultAdapter.GetObject (result, false));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideQueryInfoFinish")]
		protected virtual GLib.FileInfo OnQueryInfoFinish (GLib.IAsyncResult result)
		{
			return InternalQueryInfoFinish (result);
		}

		private GLib.FileInfo InternalQueryInfoFinish (GLib.IAsyncResult result)
		{
			QueryInfoFinishNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("query_info_finish"));
				unmanaged = (QueryInfoFinishNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(QueryInfoFinishNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			IntPtr error = IntPtr.Zero;
			IntPtr __result = unmanaged (this.Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			return GLib.Object.GetObject(__result) as GLib.FileInfo;
		}

		static GetEtagNativeDelegate GetEtag_cb_delegate;
		static GetEtagNativeDelegate GetEtagVMCallback {
			get {
				if (GetEtag_cb_delegate == null)
					GetEtag_cb_delegate = new GetEtagNativeDelegate (GetEtag_cb);
				return GetEtag_cb_delegate;
			}
		}

		static void OverrideGetEtag (GLib.GType gtype)
		{
			OverrideGetEtag (gtype, GetEtagVMCallback);
		}

		static void OverrideGetEtag (GLib.GType gtype, GetEtagNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_etag"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetEtagNativeDelegate (IntPtr inst);

		static IntPtr GetEtag_cb (IntPtr inst)
		{
			try {
				FileIOStream __obj = GLib.Object.GetObject (inst, false) as FileIOStream;
				string __result;
				__result = __obj.OnGetEtag ();
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.FileIOStream), ConnectionMethod="OverrideGetEtag")]
		protected virtual string OnGetEtag ()
		{
			return InternalGetEtag ();
		}

		private string InternalGetEtag ()
		{
			GetEtagNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_etag"));
				unmanaged = (GetEtagNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetEtagNativeDelegate));
			}
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Marshaller.PtrToStringGFree(__result);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("tell"
							, GLib.IOStream.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // tell
							, null
							, "can_seek"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("can_seek"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // can_seek
							, "tell"
							, "seek"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("seek"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // seek
							, "can_seek"
							, "can_truncate"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("can_truncate"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // can_truncate
							, "seek"
							, "truncate_fn"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("truncate_fn"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // truncate_fn
							, "can_truncate"
							, "query_info"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("query_info"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // query_info
							, "truncate_fn"
							, "query_info_async"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("query_info_async"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // query_info_async
							, "query_info"
							, "query_info_finish"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("query_info_finish"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // query_info_finish
							, "query_info_async"
							, "get_etag"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_etag"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_etag
							, "query_info_finish"
							, "_g_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_g_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _g_reserved1
							, "get_etag"
							, "_g_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_g_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _g_reserved2
							, "_g_reserved1"
							, "_g_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_g_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _g_reserved3
							, "_g_reserved2"
							, "_g_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_g_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _g_reserved4
							, "_g_reserved3"
							, "_g_reserved5"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_g_reserved5"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _g_reserved5
							, "_g_reserved4"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_file_io_stream_get_etag(IntPtr raw);

		public string Etag { 
			get {
				IntPtr raw_ret = g_file_io_stream_get_etag(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_file_io_stream_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_file_io_stream_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_file_io_stream_query_info(IntPtr raw, IntPtr attributes, IntPtr cancellable, out IntPtr error);

		public unsafe GLib.FileInfo QueryInfo(string attributes, GLib.Cancellable cancellable) {
			IntPtr native_attributes = GLib.Marshaller.StringToPtrGStrdup (attributes);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_file_io_stream_query_info(Handle, native_attributes, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			GLib.FileInfo ret = GLib.Object.GetObject(raw_ret) as GLib.FileInfo;
			GLib.Marshaller.Free (native_attributes);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_file_io_stream_query_info_async(IntPtr raw, IntPtr attributes, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void QueryInfoAsync(string attributes, int io_priority, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_attributes = GLib.Marshaller.StringToPtrGStrdup (attributes);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_file_io_stream_query_info_async(Handle, native_attributes, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_attributes);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr g_file_io_stream_query_info_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe GLib.FileInfo QueryInfoFinish(GLib.IAsyncResult result) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = g_file_io_stream_query_info_finish(Handle, result == null ? IntPtr.Zero : ((result is GLib.Object) ? (result as GLib.Object).Handle : (result as GLib.AsyncResultAdapter).Handle), out error);
			GLib.FileInfo ret = GLib.Object.GetObject(raw_ret) as GLib.FileInfo;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_seekable_can_seek(IntPtr raw);

		public bool CanSeek { 
			get {
				bool raw_ret = g_seekable_can_seek(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_seekable_can_truncate(IntPtr raw);

		public bool CanTruncate() {
			bool raw_ret = g_seekable_can_truncate(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_seekable_seek(IntPtr raw, long offset, int type, IntPtr cancellable, out IntPtr error);

		public bool Seek(long offset, GLib.SeekType type, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_seekable_seek(Handle, offset, (int) type, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern long g_seekable_tell(IntPtr raw);

		public long Position { 
			get {
				long raw_ret = g_seekable_tell(Handle);
				long ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool g_seekable_truncate(IntPtr raw, long offset, IntPtr cancellable, out IntPtr error);

		public bool Truncate(long offset, GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_seekable_truncate(Handle, offset, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.IOStream.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
