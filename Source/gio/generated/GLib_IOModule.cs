// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IOModule : GLib.Object {

		public IOModule (IntPtr raw) : base(raw) {}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_module_new(IntPtr filename);

		public IOModule (string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IOModule)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			Raw = g_io_module_new(native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_module_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_io_module_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_module_load(IntPtr raw);

		public void Load() {
			g_io_module_load(Handle);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_module_query();

		public static string Query() {
			IntPtr raw_ret = g_io_module_query();
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_module_unload(IntPtr raw);

		public void Unload() {
			g_io_module_unload(Handle);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_io_modules_load_all_in_directory(IntPtr dirname);

		public static GLib.IOModule[] LoadAllInDirectory(string dirname) {
			IntPtr native_dirname = GLib.Marshaller.StringToPtrGStrdup (dirname);
			IntPtr raw_ret = g_io_modules_load_all_in_directory(native_dirname);
			GLib.IOModule[] ret = (GLib.IOModule[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(GLib.IOModule));
			GLib.Marshaller.Free (native_dirname);
			return ret;
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void g_io_modules_scan_all_in_directory(IntPtr dirname);

		public static void ScanAllInDirectory(string dirname) {
			IntPtr native_dirname = GLib.Marshaller.StringToPtrGStrdup (dirname);
			g_io_modules_scan_all_in_directory(native_dirname);
			GLib.Marshaller.Free (native_dirname);
		}

#endregion
	}
}
