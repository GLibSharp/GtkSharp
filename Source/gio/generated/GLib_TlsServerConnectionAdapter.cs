// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TlsServerConnectionAdapter : GLib.GInterfaceAdapter, GLib.ITlsServerConnection {

		[StructLayout (LayoutKind.Sequential)]
		struct GTlsServerConnectionInterface {
		}

		static GTlsServerConnectionInterface iface;

		static TlsServerConnectionAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (TlsServerConnectionAdapter));
		}

		static void Initialize (IntPtr ptr, IntPtr data)
		{
		}

		GLib.Object implementor;

		public TlsServerConnectionAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public TlsServerConnectionAdapter (ITlsServerConnectionImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public TlsServerConnectionAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gio-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr g_tls_server_connection_get_type();

		private static GLib.GType _gtype = new GLib.GType (g_tls_server_connection_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ITlsServerConnection GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ITlsServerConnection GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ITlsServerConnectionImplementor)
				return new TlsServerConnectionAdapter (obj as ITlsServerConnectionImplementor);
			else if (obj as ITlsServerConnection == null)
				return new TlsServerConnectionAdapter (obj.Handle);
			else
				return obj as ITlsServerConnection;
		}

		public ITlsServerConnectionImplementor Implementor {
			get {
				return implementor as ITlsServerConnectionImplementor;
			}
		}

#endregion
	}
}
