<Type Name="Toolbar" FullName="Gtk.Toolbar">
  <TypeSignature Language="C#" Maintainer="Duncan Mak" Value="public class Toolbar : Gtk.Container, Gtk.IOrientable, Gtk.IToolShell" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Toolbar extends Gtk.Container implements class GLib.IWrapper, class Gtk.IOrientable, class Gtk.IToolShell" />
  <AssemblyInfo>
    <AssemblyName>gtk-sharp</AssemblyName>
    <AssemblyPublicKey>
    </AssemblyPublicKey>
  </AssemblyInfo>
  <ThreadSafetyStatement>Gtk# is thread aware, but not thread safe; See the <link location="node:gtk-sharp/programming/threads">Gtk# Thread Programming</link> for details.</ThreadSafetyStatement>
  <Base>
    <BaseTypeName>Gtk.Container</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Gtk.IOrientable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Gtk.IToolShell</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Create bars of buttons and other widgets.</summary>
    <remarks>
      <para>A <see cref="T:Gtk.Toolbar" /> is created with a call to <see cref="C:Gtk.Toolbar()" />.</para>
      <para>
        Buttons with text and/or images are added with <see cref="M:Gtk.Toolbar.AppendItem(System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc)" />,
		<see cref="M:Gtk.Toolbar.PrependItem(System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc)" />,
		and <see cref="M:Gtk.Toolbar.InsertItem(System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc,System.IntPtr,System.Int32)" />.
      </para>
      <para>
        Any of <see cref="T:Gtk.ToggleButton" />, <see cref="T:Gtk.RadioButton" />, or an arbitrary widget can be added to the toolbar with
		<see cref="M:Gtk.Toolbar.AppendElement(Gtk.ToolbarChildType,Gtk.Widget,System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc)" />,
		<see cref="M:Gtk.Toolbar.PrependElement(Gtk.ToolbarChildType,Gtk.Widget,System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc)" />,
		and <see cref="M:Gtk.Toolbar.InsertElement(Gtk.ToolbarChildType,Gtk.Widget,System.String,System.String,System.String,Gtk.Widget,Gtk.SignalFunc,System.IntPtr,System.Int32)" />.
      </para>
      <para>
        Widgets can be visibly grouped by adding gaps between widgets using <see cref="M:Gtk.Toolbar.AppendSpace()" />, <see cref="M:Gtk.Toolbar.PrependSpace()" />, and <see cref="M:Gtk.Toolbar.InsertSpace(System.Int32)" />.
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Toolbar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters />
      <Docs>
        <summary>Creates a new toolbar.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Toolbar (IntPtr raw);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int raw) cil managed" />
      <MemberType>Constructor</MemberType>
      <ReturnValue />
      <Parameters>
        <Parameter Name="raw" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="raw">Pointer to the C object.</param>
        <summary>Internal constructor</summary>
        <remarks>
          <para>This is an internal constructor, and should not be used by user code.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EllipsizeMode">
      <MemberSignature Language="C#" Value="public Pango.EllipsizeMode EllipsizeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Pango.EllipsizeMode EllipsizeMode" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Pango.EllipsizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="FocusHomeOrEnd">
      <MemberSignature Language="C#" Value="public event Gtk.FocusHomeOrEndHandler FocusHomeOrEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.FocusHomeOrEndHandler FocusHomeOrEnd" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("focus-home-or-end")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.FocusHomeOrEndHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="GetDropIndex">
      <MemberSignature Language="C#" Value="public int GetDropIndex (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetDropIndex(int32 x, int32 y) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <summary>
	   Returns the position corresponding to the indicated point on
	   the toolbar. 
	</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>
	  This is useful when dragging items to the toolbar:
	   this function returns the position a new item should be
	   inserted. <paramref name="x" /> and <paramref name="y" /> are in 
	   toolbar coordinates.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="GetItemIndex">
      <MemberSignature Language="C#" Value="public int GetItemIndex (Gtk.ToolItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemIndex(class Gtk.ToolItem item) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Gtk.ToolItem" />
      </Parameters>
      <Docs>
        <param name="item">a <see cref="T:Gtk.ToolItem" /></param>
        <summary>
	  Returns the position of <paramref name="item" /> on the toolbar, 
	  starting from 0.
	</summary>
        <returns>a <see cref="T:System.Int32" /></returns>
        <remarks>
	  It is an error if <paramref name="item" /> is not a child of 
	  the toolbar.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="GetNthItem">
      <MemberSignature Language="C#" Value="public Gtk.ToolItem GetNthItem (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Gtk.ToolItem GetNthItem(int32 n) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ToolItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">a <see cref="T:System.Int32" /></param>
        <summary>Returns the <paramref name="n" />th item on the toolbar,
	  or <see langword="null" /> if the toolbar does not contain an 
	  <paramref name="n" />th item.</summary>
        <returns>a <see cref="T:Gtk.ToolItem" /></returns>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Gtk.IToolShell.IconSize">
      <MemberSignature Language="C#" Value="Gtk.IconSize Gtk.IToolShell.IconSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.IconSize Gtk.IToolShell.IconSize" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.IconSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="Gtk.IToolShell.Orientation">
      <MemberSignature Language="C#" Value="Gtk.Orientation Gtk.IToolShell.Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.Orientation Gtk.IToolShell.Orientation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="Gtk.IToolShell.ReliefStyle">
      <MemberSignature Language="C#" Value="Gtk.ReliefStyle Gtk.IToolShell.ReliefStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.ReliefStyle Gtk.IToolShell.ReliefStyle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ReliefStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="Gtk.IToolShell.Style">
      <MemberSignature Language="C#" Value="Gtk.ToolbarStyle Gtk.IToolShell.Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.ToolbarStyle Gtk.IToolShell.Style" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ToolbarStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="GType">
      <MemberSignature Language="C#" Value="public static GLib.GType GType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype GLib.GType GType" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>GLib.GType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>GType Property.</summary>
        <value>a <see cref="T:GLib.GType" /></value>
        <remarks>Returns the native <see cref="T:GLib.GType" /> value for <see cref="T:Gtk.Toolbar" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IconSize">
      <MemberSignature Language="C#" Value="public Gtk.IconSize IconSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.IconSize IconSize" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("icon-size")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.IconSize</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>This function sets the size of stock icons in the toolbar. You can call it both before you add the icons and after they have been added. The size you set will override user preferences for the default icon size.</summary>
        <value>The icon size for the toolbar.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IconSizeSet">
      <MemberSignature Language="C#" Value="public bool IconSizeSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IconSizeSet" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("icon-size-set")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates if an Icon size is set.</summary>
        <value>a <see cref="T:System.Boolean" />.</value>
        <remarks />
        <since version="Gtk# 2.10" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (Gtk.ToolItem item, int pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(class Gtk.ToolItem item, int32 pos) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="Gtk.ToolItem" />
        <Parameter Name="pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">a <see cref="T:Gtk.ToolItem" /></param>
        <param name="pos">a <see cref="T:System.Int32" /></param>
        <summary>
	  Insert a <see cref="T:Gtk.ToolItem" /> into the toolbar at position 
	  <paramref name="pos" />. 
	</summary>
        <remarks>
	  If <paramref name="pos" /> is 0 the item is prepended to the start 
	  of the toolbar. 
	  If <paramref name="pos" /> is negative, the item is appended to the 
	  end of the toolbar.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override Gtk.Container.ContainerChild this[Gtk.Widget child] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.Container/ContainerChild Item(class Gtk.Widget)" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Container+ContainerChild</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="Gtk.Widget" />
      </Parameters>
      <Docs>
        <param name="child">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="NItems">
      <MemberSignature Language="C#" Value="public int NItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NItems" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The number of items on the toolbar.</summary>
        <value>a <see cref="T:System.Int32" /></value>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="OnFocusHomeOrEnd">
      <MemberSignature Language="C#" Value="protected virtual bool OnFocusHomeOrEnd (bool p0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFocusHomeOrEnd(bool p0) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideFocusHomeOrEnd", Type=typeof(Gtk.Toolbar))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="p0">To be added.</param>
        <summary>Default handler for the <see cref="M:Gtk.Toolbar.FocusHomeOrEnd" /> event.</summary>
        <returns>To be added.</returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Toolbar.FocusHomeOrEnd" /> event.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="OnOrientationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnOrientationChanged (Gtk.Orientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOrientationChanged(valuetype Gtk.Orientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideOrientationChanged", Type=typeof(Gtk.Toolbar))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="Gtk.Orientation" />
      </Parameters>
      <Docs>
        <param name="orientation">a <see cref="T:Gtk.Orientation" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Toolbar.OrientationChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Toolbar.OrientationChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopupContextMenu">
      <MemberSignature Language="C#" Value="protected virtual bool OnPopupContextMenu (int x, int y, int button_number);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnPopupContextMenu(int32 x, int32 y, int32 button_number) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverridePopupContextMenu", Type=typeof(Gtk.Toolbar))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="button_number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">a <see cref="T:System.Int32" /></param>
        <param name="y">a <see cref="T:System.Int32" /></param>
        <param name="button_number">a <see cref="T:System.Int32" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Toolbar.PopupContextMenu" /> event.</summary>
        <returns>a <see cref="T:System.Boolean" /></returns>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Toolbar.PopupContextMenu" /> event.</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (Gtk.ToolbarStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(valuetype Gtk.ToolbarStyle style) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.DefaultSignalHandler(ConnectionMethod="OverrideStyleChanged", Type=typeof(Gtk.Toolbar))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="style" Type="Gtk.ToolbarStyle" />
      </Parameters>
      <Docs>
        <param name="style">a <see cref="T:Gtk.ToolbarStyle" /></param>
        <summary>Default handler for the <see cref="M:Gtk.Toolbar.StyleChanged" /> event.</summary>
        <remarks>Override this method in a subclass to provide a default handler for the <see cref="M:Gtk.Toolbar.StyleChanged" /> event.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public Gtk.Orientation Orientation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.Orientation Orientation" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("orientation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.Orientation</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Sets the <see cref="T:Gtk.Orientation" /> of the toolbar to either <see cref="T:Gtk.Orientation.Horizontal" /> or <see cref="T:Gtk.Orientation.Vertical" />.</summary>
        <value>The orientation of the toolbar.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="OrientationChanged">
      <MemberSignature Language="C#" Value="public event Gtk.OrientationChangedHandler OrientationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.OrientationChangedHandler OrientationChanged" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("orientation-changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.OrientationChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Used if you wish to perform an action when ever the style of a toolbar is adjusted.</summary>
        <remarks>For example, this would be a useful signal to connect to if you want to display more items on the toolbar when it is in icon-only mode; each item takes less space on the bar.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopupContextMenu">
      <MemberSignature Language="C#" Value="public event Gtk.PopupContextMenuHandler PopupContextMenu;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.PopupContextMenuHandler PopupContextMenu" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("popup-context-menu")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.PopupContextMenuHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Emitted when the user right-clicks the toolbar or uses the
	  keybinding to display a popup menu.</summary>
        <remarks>
	  Application developers should handle this signal if they want
	  to display a context menu on the toolbar.
	</remarks>
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="RebuildMenu">
      <MemberSignature Language="C#" Value="public void RebuildMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RebuildMenu() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="ReliefStyle">
      <MemberSignature Language="C#" Value="public Gtk.ReliefStyle ReliefStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.ReliefStyle ReliefStyle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ReliefStyle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The relief style of buttons on the toolbar.</summary>
        <value>a <see cref="T:Gtk.ReliefStyle" /></value>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="SetDropHighlightItem">
      <MemberSignature Language="C#" Value="public void SetDropHighlightItem (Gtk.ToolItem tool_item, int index_);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDropHighlightItem(class Gtk.ToolItem tool_item, int32 index_) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tool_item" Type="Gtk.ToolItem" />
        <Parameter Name="index_" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tool_item">a <see cref="T:Gtk.ToolItem" /></param>
        <param name="index_">a <see cref="T:System.Int32" /></param>
        <summary>To be added</summary>
        <remarks>To be added</remarks>
        <since version="Gtk# 2.6" />
      </Docs>
    </Member>
    <Member MemberName="ShowArrow">
      <MemberSignature Language="C#" Value="public bool ShowArrow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowArrow" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("show-arrow")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether to show an arrow if the toolbar doesn't fit.</summary>
        <value>a <see cref="T:System.Boolean" /></value>
        <remarks />
        <since version="Gtk# 2.4" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public Gtk.ToolbarStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.ToolbarStyle Style" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.ToolbarStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event Gtk.StyleChangedHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Gtk.StyleChangedHandler StyleChanged" />
      <MemberType>Event</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Signal("style-changed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.StyleChangedHandler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Used if you wish to perform an action when the orientation of a toolbar is changed.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public float TextAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TextAlignment" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="TextOrientation">
      <MemberSignature Language="C#" Value="public Gtk.Orientation TextOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.Orientation TextOrientation" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="TextSizeGroup">
      <MemberSignature Language="C#" Value="public Gtk.SizeGroup TextSizeGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Gtk.SizeGroup TextSizeGroup" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>Gtk.SizeGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <since version="Gtk# 3.0" />
      </Docs>
    </Member>
    <Member MemberName="ToolbarStyle">
      <MemberSignature Language="C#" Value="public Gtk.ToolbarStyle ToolbarStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Gtk.ToolbarStyle ToolbarStyle" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>GLib.Property("toolbar-style")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Gtk.ToolbarStyle</ReturnType>
      </ReturnValue>
      <Parameters>
      </Parameters>
      <Docs>
        <summary>Alters the view of toolbar to display either icons only, text only, or both.</summary>
        <value>The current style of toolbar.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnsetIconSize">
      <MemberSignature Language="C#" Value="public void UnsetIconSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnsetIconSize() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          Unsets toolbar icon size set with <see cref="P:Gtk.Toolbar.IconSize" />.
	</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnsetStyle">
      <MemberSignature Language="C#" Value="public void UnsetStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnsetStyle() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unsets a toolbar style set with <see cref="P:Gtk.Toolbar.ToolbarStyle" />.</summary>
        <remarks>Unsets a toolbar style set with <see cref="P:Gtk.Toolbar.ToolbarStyle" />, so that user preferences will be used to determine the toolbar style.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
