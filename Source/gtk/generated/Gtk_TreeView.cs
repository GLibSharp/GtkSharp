// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TreeView : Gtk.Container, Gtk.IScrollable {

		public TreeView (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_new();

		public TreeView () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TreeView)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_tree_view_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_new_with_model(IntPtr model);

		public TreeView (Gtk.ITreeModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (TreeView)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (model != null) {
					names.Add ("model");
					vals.Add (new GLib.Value (model));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_tree_view_new_with_model(model == null ? IntPtr.Zero : ((model is GLib.Object) ? (model as GLib.Object).Handle : (model as Gtk.TreeModelAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_model(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_model(IntPtr raw, IntPtr model);

		[GLib.Property ("model")]
		public Gtk.ITreeModel Model {
			get  {
				IntPtr raw_ret = gtk_tree_view_get_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				gtk_tree_view_set_model(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as Gtk.TreeModelAdapter).Handle));
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_headers_visible(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_headers_visible(IntPtr raw, bool headers_visible);

		[GLib.Property ("headers-visible")]
		public bool HeadersVisible {
			get  {
				bool raw_ret = gtk_tree_view_get_headers_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_headers_visible(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_headers_clickable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_headers_clickable(IntPtr raw, bool setting);

		[GLib.Property ("headers-clickable")]
		public bool HeadersClickable {
			get  {
				bool raw_ret = gtk_tree_view_get_headers_clickable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_headers_clickable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_expander_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_expander_column(IntPtr raw, IntPtr column);

		[GLib.Property ("expander-column")]
		public Gtk.TreeViewColumn ExpanderColumn {
			get  {
				IntPtr raw_ret = gtk_tree_view_get_expander_column(Handle);
				Gtk.TreeViewColumn ret = GLib.Object.GetObject(raw_ret) as Gtk.TreeViewColumn;
				return ret;
			}
			set  {
				gtk_tree_view_set_expander_column(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_reorderable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_reorderable(IntPtr raw, bool reorderable);

		[GLib.Property ("reorderable")]
		public bool Reorderable {
			get  {
				bool raw_ret = gtk_tree_view_get_reorderable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_reorderable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_rules_hint(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_rules_hint(IntPtr raw, bool setting);

		[Obsolete]
		[GLib.Property ("rules-hint")]
		public bool RulesHint {
			get  {
				bool raw_ret = gtk_tree_view_get_rules_hint(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_rules_hint(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_enable_search(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_enable_search(IntPtr raw, bool enable_search);

		[GLib.Property ("enable-search")]
		public bool EnableSearch {
			get  {
				bool raw_ret = gtk_tree_view_get_enable_search(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_enable_search(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_get_search_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_column(IntPtr raw, int column);

		[GLib.Property ("search-column")]
		public int SearchColumn {
			get  {
				int raw_ret = gtk_tree_view_get_search_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_search_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_fixed_height_mode(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_fixed_height_mode(IntPtr raw, bool enable);

		[GLib.Property ("fixed-height-mode")]
		public bool FixedHeightMode {
			get  {
				bool raw_ret = gtk_tree_view_get_fixed_height_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_fixed_height_mode(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_hover_selection(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_hover_selection(IntPtr raw, bool hover);

		[GLib.Property ("hover-selection")]
		public bool HoverSelection {
			get  {
				bool raw_ret = gtk_tree_view_get_hover_selection(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_hover_selection(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_hover_expand(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_hover_expand(IntPtr raw, bool expand);

		[GLib.Property ("hover-expand")]
		public bool HoverExpand {
			get  {
				bool raw_ret = gtk_tree_view_get_hover_expand(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_hover_expand(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_show_expanders(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_show_expanders(IntPtr raw, bool enabled);

		[GLib.Property ("show-expanders")]
		public bool ShowExpanders {
			get  {
				bool raw_ret = gtk_tree_view_get_show_expanders(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_show_expanders(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_get_level_indentation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_level_indentation(IntPtr raw, int indentation);

		[GLib.Property ("level-indentation")]
		public int LevelIndentation {
			get  {
				int raw_ret = gtk_tree_view_get_level_indentation(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_level_indentation(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_rubber_banding(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_rubber_banding(IntPtr raw, bool enable);

		[GLib.Property ("rubber-banding")]
		public bool RubberBanding {
			get  {
				bool raw_ret = gtk_tree_view_get_rubber_banding(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_rubber_banding(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_get_grid_lines(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_grid_lines(IntPtr raw, int grid_lines);

		[GLib.Property ("enable-grid-lines")]
		public Gtk.TreeViewGridLines EnableGridLines {
			get  {
				int raw_ret = gtk_tree_view_get_grid_lines(Handle);
				Gtk.TreeViewGridLines ret = (Gtk.TreeViewGridLines) raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_grid_lines(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_enable_tree_lines(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_enable_tree_lines(IntPtr raw, bool enabled);

		[GLib.Property ("enable-tree-lines")]
		public bool EnableTreeLines {
			get  {
				bool raw_ret = gtk_tree_view_get_enable_tree_lines(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_enable_tree_lines(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_get_tooltip_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_tooltip_column(IntPtr raw, int column);

		[GLib.Property ("tooltip-column")]
		public int TooltipColumn {
			get  {
				int raw_ret = gtk_tree_view_get_tooltip_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_tooltip_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_activate_on_single_click(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_activate_on_single_click(IntPtr raw, bool single);

		[GLib.Property ("activate-on-single-click")]
		public bool ActivateOnSingleClick {
			get  {
				bool raw_ret = gtk_tree_view_get_activate_on_single_click(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_tree_view_set_activate_on_single_click(Handle, value);
			}
		}

		[GLib.Property ("expander-size")]
		public int ExpanderSize {
			get {
				GLib.Value val = GetProperty ("expander-size");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("vertical-separator")]
		public int VerticalSeparator {
			get {
				GLib.Value val = GetProperty ("vertical-separator");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("horizontal-separator")]
		public int HorizontalSeparator {
			get {
				GLib.Value val = GetProperty ("horizontal-separator");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("allow-rules")]
		public bool AllowRules {
			get {
				GLib.Value val = GetProperty ("allow-rules");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("indent-expanders")]
		public bool IndentExpanders {
			get {
				GLib.Value val = GetProperty ("indent-expanders");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("even-row-color")]
		public Gdk.Color EvenRowColor {
			get {
				GLib.Value val = GetProperty ("even-row-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("odd-row-color")]
		public Gdk.Color OddRowColor {
			get {
				GLib.Value val = GetProperty ("odd-row-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("grid-line-width")]
		public int GridLineWidth {
			get {
				GLib.Value val = GetProperty ("grid-line-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("tree-line-width")]
		public int TreeLineWidth {
			get {
				GLib.Value val = GetProperty ("tree-line-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("grid-line-pattern")]
		public string GridLinePattern {
			get {
				GLib.Value val = GetProperty ("grid-line-pattern");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("tree-line-pattern")]
		public string TreeLinePattern {
			get {
				GLib.Value val = GetProperty ("tree-line-pattern");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Signal("row-collapsed")]
		public event Gtk.RowCollapsedHandler RowCollapsed {
			add {
				this.AddSignalHandler ("row-collapsed", value, typeof (Gtk.RowCollapsedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-collapsed", value);
			}
		}

		[GLib.Signal("select-cursor-row")]
		public event Gtk.SelectCursorRowHandler SelectCursorRow {
			add {
				this.AddSignalHandler ("select-cursor-row", value, typeof (Gtk.SelectCursorRowArgs));
			}
			remove {
				this.RemoveSignalHandler ("select-cursor-row", value);
			}
		}

		[GLib.Signal("select-all")]
		public event Gtk.SelectAllHandler SelectAll {
			add {
				this.AddSignalHandler ("select-all", value, typeof (Gtk.SelectAllArgs));
			}
			remove {
				this.RemoveSignalHandler ("select-all", value);
			}
		}

		[GLib.Signal("move-cursor")]
		public event Gtk.MoveCursorHandler MoveCursor {
			add {
				this.AddSignalHandler ("move-cursor", value, typeof (Gtk.MoveCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-cursor", value);
			}
		}

		[GLib.Signal("test-expand-row")]
		public event Gtk.TestExpandRowHandler TestExpandRow {
			add {
				this.AddSignalHandler ("test-expand-row", value, typeof (Gtk.TestExpandRowArgs));
			}
			remove {
				this.RemoveSignalHandler ("test-expand-row", value);
			}
		}

		[GLib.Signal("toggle-cursor-row")]
		public event Gtk.ToggleCursorRowHandler ToggleCursorRow {
			add {
				this.AddSignalHandler ("toggle-cursor-row", value, typeof (Gtk.ToggleCursorRowArgs));
			}
			remove {
				this.RemoveSignalHandler ("toggle-cursor-row", value);
			}
		}

		[GLib.Signal("cursor-changed")]
		public event System.EventHandler CursorChanged {
			add {
				this.AddSignalHandler ("cursor-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("cursor-changed", value);
			}
		}

		[GLib.Signal("start-interactive-search")]
		public event Gtk.StartInteractiveSearchHandler StartInteractiveSearch {
			add {
				this.AddSignalHandler ("start-interactive-search", value, typeof (Gtk.StartInteractiveSearchArgs));
			}
			remove {
				this.RemoveSignalHandler ("start-interactive-search", value);
			}
		}

		[GLib.Signal("test-collapse-row")]
		public event Gtk.TestCollapseRowHandler TestCollapseRow {
			add {
				this.AddSignalHandler ("test-collapse-row", value, typeof (Gtk.TestCollapseRowArgs));
			}
			remove {
				this.RemoveSignalHandler ("test-collapse-row", value);
			}
		}

		[GLib.Signal("row-expanded")]
		public event Gtk.RowExpandedHandler RowExpanded {
			add {
				this.AddSignalHandler ("row-expanded", value, typeof (Gtk.RowExpandedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-expanded", value);
			}
		}

		[GLib.Signal("expand-collapse-cursor-row")]
		public event Gtk.ExpandCollapseCursorRowHandler ExpandCollapseCursorRow {
			add {
				this.AddSignalHandler ("expand-collapse-cursor-row", value, typeof (Gtk.ExpandCollapseCursorRowArgs));
			}
			remove {
				this.RemoveSignalHandler ("expand-collapse-cursor-row", value);
			}
		}

		[GLib.Signal("select-cursor-parent")]
		public event Gtk.SelectCursorParentHandler SelectCursorParent {
			add {
				this.AddSignalHandler ("select-cursor-parent", value, typeof (Gtk.SelectCursorParentArgs));
			}
			remove {
				this.RemoveSignalHandler ("select-cursor-parent", value);
			}
		}

		[GLib.Signal("columns-changed")]
		public event System.EventHandler ColumnsChanged {
			add {
				this.AddSignalHandler ("columns-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("columns-changed", value);
			}
		}

		[GLib.Signal("unselect-all")]
		public event Gtk.UnselectAllHandler UnselectAll {
			add {
				this.AddSignalHandler ("unselect-all", value, typeof (Gtk.UnselectAllArgs));
			}
			remove {
				this.RemoveSignalHandler ("unselect-all", value);
			}
		}

		[GLib.Signal("row-activated")]
		public event Gtk.RowActivatedHandler RowActivated {
			add {
				this.AddSignalHandler ("row-activated", value, typeof (Gtk.RowActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("row-activated", value);
			}
		}

		static RowActivatedNativeDelegate RowActivated_cb_delegate;
		static RowActivatedNativeDelegate RowActivatedVMCallback {
			get {
				if (RowActivated_cb_delegate == null)
					RowActivated_cb_delegate = new RowActivatedNativeDelegate (RowActivated_cb);
				return RowActivated_cb_delegate;
			}
		}

		static void OverrideRowActivated (GLib.GType gtype)
		{
			OverrideRowActivated (gtype, RowActivatedVMCallback);
		}

		static void OverrideRowActivated (GLib.GType gtype, RowActivatedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("row_activated"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowActivatedNativeDelegate (IntPtr inst, IntPtr path, IntPtr column);

		static void RowActivated_cb (IntPtr inst, IntPtr path, IntPtr column)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				__obj.OnRowActivated (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), GLib.Object.GetObject(column) as Gtk.TreeViewColumn);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideRowActivated")]
		protected virtual void OnRowActivated (Gtk.TreePath path, Gtk.TreeViewColumn column)
		{
			InternalRowActivated (path, column);
		}

		private void InternalRowActivated (Gtk.TreePath path, Gtk.TreeViewColumn column)
		{
			RowActivatedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("row_activated"));
				unmanaged = (RowActivatedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(RowActivatedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle);
		}

		static TestExpandRowNativeDelegate TestExpandRow_cb_delegate;
		static TestExpandRowNativeDelegate TestExpandRowVMCallback {
			get {
				if (TestExpandRow_cb_delegate == null)
					TestExpandRow_cb_delegate = new TestExpandRowNativeDelegate (TestExpandRow_cb);
				return TestExpandRow_cb_delegate;
			}
		}

		static void OverrideTestExpandRow (GLib.GType gtype)
		{
			OverrideTestExpandRow (gtype, TestExpandRowVMCallback);
		}

		static void OverrideTestExpandRow (GLib.GType gtype, TestExpandRowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("test_expand_row"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TestExpandRowNativeDelegate (IntPtr inst, IntPtr iter, IntPtr path);

		static bool TestExpandRow_cb (IntPtr inst, IntPtr iter, IntPtr path)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnTestExpandRow (Gtk.TreeIter.New (iter), path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideTestExpandRow")]
		protected virtual bool OnTestExpandRow (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			return InternalTestExpandRow (iter, path);
		}

		private bool InternalTestExpandRow (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			TestExpandRowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("test_expand_row"));
				unmanaged = (TestExpandRowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(TestExpandRowNativeDelegate));
			}
			if (unmanaged == null) return false;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool __result = unmanaged (this.Handle, native_iter, path == null ? IntPtr.Zero : path.Handle);
			Marshal.FreeHGlobal (native_iter);
			return __result;
		}

		static TestCollapseRowNativeDelegate TestCollapseRow_cb_delegate;
		static TestCollapseRowNativeDelegate TestCollapseRowVMCallback {
			get {
				if (TestCollapseRow_cb_delegate == null)
					TestCollapseRow_cb_delegate = new TestCollapseRowNativeDelegate (TestCollapseRow_cb);
				return TestCollapseRow_cb_delegate;
			}
		}

		static void OverrideTestCollapseRow (GLib.GType gtype)
		{
			OverrideTestCollapseRow (gtype, TestCollapseRowVMCallback);
		}

		static void OverrideTestCollapseRow (GLib.GType gtype, TestCollapseRowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("test_collapse_row"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TestCollapseRowNativeDelegate (IntPtr inst, IntPtr iter, IntPtr path);

		static bool TestCollapseRow_cb (IntPtr inst, IntPtr iter, IntPtr path)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnTestCollapseRow (Gtk.TreeIter.New (iter), path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideTestCollapseRow")]
		protected virtual bool OnTestCollapseRow (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			return InternalTestCollapseRow (iter, path);
		}

		private bool InternalTestCollapseRow (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			TestCollapseRowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("test_collapse_row"));
				unmanaged = (TestCollapseRowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(TestCollapseRowNativeDelegate));
			}
			if (unmanaged == null) return false;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			bool __result = unmanaged (this.Handle, native_iter, path == null ? IntPtr.Zero : path.Handle);
			Marshal.FreeHGlobal (native_iter);
			return __result;
		}

		static RowExpandedNativeDelegate RowExpanded_cb_delegate;
		static RowExpandedNativeDelegate RowExpandedVMCallback {
			get {
				if (RowExpanded_cb_delegate == null)
					RowExpanded_cb_delegate = new RowExpandedNativeDelegate (RowExpanded_cb);
				return RowExpanded_cb_delegate;
			}
		}

		static void OverrideRowExpanded (GLib.GType gtype)
		{
			OverrideRowExpanded (gtype, RowExpandedVMCallback);
		}

		static void OverrideRowExpanded (GLib.GType gtype, RowExpandedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("row_expanded"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowExpandedNativeDelegate (IntPtr inst, IntPtr iter, IntPtr path);

		static void RowExpanded_cb (IntPtr inst, IntPtr iter, IntPtr path)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				__obj.OnRowExpanded (Gtk.TreeIter.New (iter), path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideRowExpanded")]
		protected virtual void OnRowExpanded (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			InternalRowExpanded (iter, path);
		}

		private void InternalRowExpanded (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			RowExpandedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("row_expanded"));
				unmanaged = (RowExpandedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(RowExpandedNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			unmanaged (this.Handle, native_iter, path == null ? IntPtr.Zero : path.Handle);
			Marshal.FreeHGlobal (native_iter);
		}

		static RowCollapsedNativeDelegate RowCollapsed_cb_delegate;
		static RowCollapsedNativeDelegate RowCollapsedVMCallback {
			get {
				if (RowCollapsed_cb_delegate == null)
					RowCollapsed_cb_delegate = new RowCollapsedNativeDelegate (RowCollapsed_cb);
				return RowCollapsed_cb_delegate;
			}
		}

		static void OverrideRowCollapsed (GLib.GType gtype)
		{
			OverrideRowCollapsed (gtype, RowCollapsedVMCallback);
		}

		static void OverrideRowCollapsed (GLib.GType gtype, RowCollapsedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("row_collapsed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RowCollapsedNativeDelegate (IntPtr inst, IntPtr iter, IntPtr path);

		static void RowCollapsed_cb (IntPtr inst, IntPtr iter, IntPtr path)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				__obj.OnRowCollapsed (Gtk.TreeIter.New (iter), path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideRowCollapsed")]
		protected virtual void OnRowCollapsed (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			InternalRowCollapsed (iter, path);
		}

		private void InternalRowCollapsed (Gtk.TreeIter iter, Gtk.TreePath path)
		{
			RowCollapsedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("row_collapsed"));
				unmanaged = (RowCollapsedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(RowCollapsedNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			unmanaged (this.Handle, native_iter, path == null ? IntPtr.Zero : path.Handle);
			Marshal.FreeHGlobal (native_iter);
		}

		static ColumnsChangedNativeDelegate ColumnsChanged_cb_delegate;
		static ColumnsChangedNativeDelegate ColumnsChangedVMCallback {
			get {
				if (ColumnsChanged_cb_delegate == null)
					ColumnsChanged_cb_delegate = new ColumnsChangedNativeDelegate (ColumnsChanged_cb);
				return ColumnsChanged_cb_delegate;
			}
		}

		static void OverrideColumnsChanged (GLib.GType gtype)
		{
			OverrideColumnsChanged (gtype, ColumnsChangedVMCallback);
		}

		static void OverrideColumnsChanged (GLib.GType gtype, ColumnsChangedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("columns_changed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColumnsChangedNativeDelegate (IntPtr inst);

		static void ColumnsChanged_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				__obj.OnColumnsChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideColumnsChanged")]
		protected virtual void OnColumnsChanged ()
		{
			InternalColumnsChanged ();
		}

		private void InternalColumnsChanged ()
		{
			ColumnsChangedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("columns_changed"));
				unmanaged = (ColumnsChangedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ColumnsChangedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static CursorChangedNativeDelegate CursorChanged_cb_delegate;
		static CursorChangedNativeDelegate CursorChangedVMCallback {
			get {
				if (CursorChanged_cb_delegate == null)
					CursorChanged_cb_delegate = new CursorChangedNativeDelegate (CursorChanged_cb);
				return CursorChanged_cb_delegate;
			}
		}

		static void OverrideCursorChanged (GLib.GType gtype)
		{
			OverrideCursorChanged (gtype, CursorChangedVMCallback);
		}

		static void OverrideCursorChanged (GLib.GType gtype, CursorChangedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("cursor_changed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CursorChangedNativeDelegate (IntPtr inst);

		static void CursorChanged_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				__obj.OnCursorChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideCursorChanged")]
		protected virtual void OnCursorChanged ()
		{
			InternalCursorChanged ();
		}

		private void InternalCursorChanged ()
		{
			CursorChangedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("cursor_changed"));
				unmanaged = (CursorChangedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CursorChangedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static MoveCursorNativeDelegate MoveCursor_cb_delegate;
		static MoveCursorNativeDelegate MoveCursorVMCallback {
			get {
				if (MoveCursor_cb_delegate == null)
					MoveCursor_cb_delegate = new MoveCursorNativeDelegate (MoveCursor_cb);
				return MoveCursor_cb_delegate;
			}
		}

		static void OverrideMoveCursor (GLib.GType gtype)
		{
			OverrideMoveCursor (gtype, MoveCursorVMCallback);
		}

		static void OverrideMoveCursor (GLib.GType gtype, MoveCursorNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("move_cursor"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveCursorNativeDelegate (IntPtr inst, int step, int count);

		static bool MoveCursor_cb (IntPtr inst, int step, int count)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnMoveCursor ((Gtk.MovementStep) step, count);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideMoveCursor")]
		protected virtual bool OnMoveCursor (Gtk.MovementStep step, int count)
		{
			return InternalMoveCursor (step, count);
		}

		private bool InternalMoveCursor (Gtk.MovementStep step, int count)
		{
			MoveCursorNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("move_cursor"));
				unmanaged = (MoveCursorNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(MoveCursorNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, (int) step, count);
			return __result;
		}

		static SelectAllNativeDelegate SelectAll_cb_delegate;
		static SelectAllNativeDelegate SelectAllVMCallback {
			get {
				if (SelectAll_cb_delegate == null)
					SelectAll_cb_delegate = new SelectAllNativeDelegate (SelectAll_cb);
				return SelectAll_cb_delegate;
			}
		}

		static void OverrideSelectAll (GLib.GType gtype)
		{
			OverrideSelectAll (gtype, SelectAllVMCallback);
		}

		static void OverrideSelectAll (GLib.GType gtype, SelectAllNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("select_all"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SelectAllNativeDelegate (IntPtr inst);

		static bool SelectAll_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnSelectAll ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideSelectAll")]
		protected virtual bool OnSelectAll ()
		{
			return InternalSelectAll ();
		}

		private bool InternalSelectAll ()
		{
			SelectAllNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("select_all"));
				unmanaged = (SelectAllNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SelectAllNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static UnselectAllNativeDelegate UnselectAll_cb_delegate;
		static UnselectAllNativeDelegate UnselectAllVMCallback {
			get {
				if (UnselectAll_cb_delegate == null)
					UnselectAll_cb_delegate = new UnselectAllNativeDelegate (UnselectAll_cb);
				return UnselectAll_cb_delegate;
			}
		}

		static void OverrideUnselectAll (GLib.GType gtype)
		{
			OverrideUnselectAll (gtype, UnselectAllVMCallback);
		}

		static void OverrideUnselectAll (GLib.GType gtype, UnselectAllNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("unselect_all"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool UnselectAllNativeDelegate (IntPtr inst);

		static bool UnselectAll_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnUnselectAll ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideUnselectAll")]
		protected virtual bool OnUnselectAll ()
		{
			return InternalUnselectAll ();
		}

		private bool InternalUnselectAll ()
		{
			UnselectAllNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("unselect_all"));
				unmanaged = (UnselectAllNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(UnselectAllNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static SelectCursorRowNativeDelegate SelectCursorRow_cb_delegate;
		static SelectCursorRowNativeDelegate SelectCursorRowVMCallback {
			get {
				if (SelectCursorRow_cb_delegate == null)
					SelectCursorRow_cb_delegate = new SelectCursorRowNativeDelegate (SelectCursorRow_cb);
				return SelectCursorRow_cb_delegate;
			}
		}

		static void OverrideSelectCursorRow (GLib.GType gtype)
		{
			OverrideSelectCursorRow (gtype, SelectCursorRowVMCallback);
		}

		static void OverrideSelectCursorRow (GLib.GType gtype, SelectCursorRowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_row"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SelectCursorRowNativeDelegate (IntPtr inst, bool start_editing);

		static bool SelectCursorRow_cb (IntPtr inst, bool start_editing)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnSelectCursorRow (start_editing);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideSelectCursorRow")]
		protected virtual bool OnSelectCursorRow (bool start_editing)
		{
			return InternalSelectCursorRow (start_editing);
		}

		private bool InternalSelectCursorRow (bool start_editing)
		{
			SelectCursorRowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_row"));
				unmanaged = (SelectCursorRowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SelectCursorRowNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, start_editing);
			return __result;
		}

		static ToggleCursorRowNativeDelegate ToggleCursorRow_cb_delegate;
		static ToggleCursorRowNativeDelegate ToggleCursorRowVMCallback {
			get {
				if (ToggleCursorRow_cb_delegate == null)
					ToggleCursorRow_cb_delegate = new ToggleCursorRowNativeDelegate (ToggleCursorRow_cb);
				return ToggleCursorRow_cb_delegate;
			}
		}

		static void OverrideToggleCursorRow (GLib.GType gtype)
		{
			OverrideToggleCursorRow (gtype, ToggleCursorRowVMCallback);
		}

		static void OverrideToggleCursorRow (GLib.GType gtype, ToggleCursorRowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("toggle_cursor_row"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ToggleCursorRowNativeDelegate (IntPtr inst);

		static bool ToggleCursorRow_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnToggleCursorRow ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideToggleCursorRow")]
		protected virtual bool OnToggleCursorRow ()
		{
			return InternalToggleCursorRow ();
		}

		private bool InternalToggleCursorRow ()
		{
			ToggleCursorRowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("toggle_cursor_row"));
				unmanaged = (ToggleCursorRowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ToggleCursorRowNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static ExpandCollapseCursorRowNativeDelegate ExpandCollapseCursorRow_cb_delegate;
		static ExpandCollapseCursorRowNativeDelegate ExpandCollapseCursorRowVMCallback {
			get {
				if (ExpandCollapseCursorRow_cb_delegate == null)
					ExpandCollapseCursorRow_cb_delegate = new ExpandCollapseCursorRowNativeDelegate (ExpandCollapseCursorRow_cb);
				return ExpandCollapseCursorRow_cb_delegate;
			}
		}

		static void OverrideExpandCollapseCursorRow (GLib.GType gtype)
		{
			OverrideExpandCollapseCursorRow (gtype, ExpandCollapseCursorRowVMCallback);
		}

		static void OverrideExpandCollapseCursorRow (GLib.GType gtype, ExpandCollapseCursorRowNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("expand_collapse_cursor_row"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ExpandCollapseCursorRowNativeDelegate (IntPtr inst, bool logical, bool expand, bool open_all);

		static bool ExpandCollapseCursorRow_cb (IntPtr inst, bool logical, bool expand, bool open_all)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnExpandCollapseCursorRow (logical, expand, open_all);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideExpandCollapseCursorRow")]
		protected virtual bool OnExpandCollapseCursorRow (bool logical, bool expand, bool open_all)
		{
			return InternalExpandCollapseCursorRow (logical, expand, open_all);
		}

		private bool InternalExpandCollapseCursorRow (bool logical, bool expand, bool open_all)
		{
			ExpandCollapseCursorRowNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("expand_collapse_cursor_row"));
				unmanaged = (ExpandCollapseCursorRowNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ExpandCollapseCursorRowNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, logical, expand, open_all);
			return __result;
		}

		static SelectCursorParentNativeDelegate SelectCursorParent_cb_delegate;
		static SelectCursorParentNativeDelegate SelectCursorParentVMCallback {
			get {
				if (SelectCursorParent_cb_delegate == null)
					SelectCursorParent_cb_delegate = new SelectCursorParentNativeDelegate (SelectCursorParent_cb);
				return SelectCursorParent_cb_delegate;
			}
		}

		static void OverrideSelectCursorParent (GLib.GType gtype)
		{
			OverrideSelectCursorParent (gtype, SelectCursorParentVMCallback);
		}

		static void OverrideSelectCursorParent (GLib.GType gtype, SelectCursorParentNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_parent"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SelectCursorParentNativeDelegate (IntPtr inst);

		static bool SelectCursorParent_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnSelectCursorParent ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideSelectCursorParent")]
		protected virtual bool OnSelectCursorParent ()
		{
			return InternalSelectCursorParent ();
		}

		private bool InternalSelectCursorParent ()
		{
			SelectCursorParentNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_parent"));
				unmanaged = (SelectCursorParentNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SelectCursorParentNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static StartInteractiveSearchNativeDelegate StartInteractiveSearch_cb_delegate;
		static StartInteractiveSearchNativeDelegate StartInteractiveSearchVMCallback {
			get {
				if (StartInteractiveSearch_cb_delegate == null)
					StartInteractiveSearch_cb_delegate = new StartInteractiveSearchNativeDelegate (StartInteractiveSearch_cb);
				return StartInteractiveSearch_cb_delegate;
			}
		}

		static void OverrideStartInteractiveSearch (GLib.GType gtype)
		{
			OverrideStartInteractiveSearch (gtype, StartInteractiveSearchVMCallback);
		}

		static void OverrideStartInteractiveSearch (GLib.GType gtype, StartInteractiveSearchNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("start_interactive_search"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool StartInteractiveSearchNativeDelegate (IntPtr inst);

		static bool StartInteractiveSearch_cb (IntPtr inst)
		{
			try {
				TreeView __obj = GLib.Object.GetObject (inst, false) as TreeView;
				bool __result;
				__result = __obj.OnStartInteractiveSearch ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.TreeView), ConnectionMethod="OverrideStartInteractiveSearch")]
		protected virtual bool OnStartInteractiveSearch ()
		{
			return InternalStartInteractiveSearch ();
		}

		private bool InternalStartInteractiveSearch ()
		{
			StartInteractiveSearchNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("start_interactive_search"));
				unmanaged = (StartInteractiveSearchNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(StartInteractiveSearchNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("row_activated"
							, Gtk.Container.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // row_activated
							, null
							, "test_expand_row"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("test_expand_row"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // test_expand_row
							, "row_activated"
							, "test_collapse_row"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("test_collapse_row"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // test_collapse_row
							, "test_expand_row"
							, "row_expanded"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("row_expanded"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // row_expanded
							, "test_collapse_row"
							, "row_collapsed"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("row_collapsed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // row_collapsed
							, "row_expanded"
							, "columns_changed"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("columns_changed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // columns_changed
							, "row_collapsed"
							, "cursor_changed"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("cursor_changed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // cursor_changed
							, "columns_changed"
							, "move_cursor"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("move_cursor"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // move_cursor
							, "cursor_changed"
							, "select_all"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("select_all"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // select_all
							, "move_cursor"
							, "unselect_all"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("unselect_all"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // unselect_all
							, "select_all"
							, "select_cursor_row"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("select_cursor_row"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // select_cursor_row
							, "unselect_all"
							, "toggle_cursor_row"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("toggle_cursor_row"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // toggle_cursor_row
							, "select_cursor_row"
							, "expand_collapse_cursor_row"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("expand_collapse_cursor_row"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // expand_collapse_cursor_row
							, "toggle_cursor_row"
							, "select_cursor_parent"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("select_cursor_parent"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // select_cursor_parent
							, "expand_collapse_cursor_row"
							, "start_interactive_search"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("start_interactive_search"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // start_interactive_search
							, "select_cursor_parent"
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "start_interactive_search"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, "_gtk_reserved5"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved5"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved5
							, "_gtk_reserved4"
							, "_gtk_reserved6"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved6"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved6
							, "_gtk_reserved5"
							, "_gtk_reserved7"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved7"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved7
							, "_gtk_reserved6"
							, "_gtk_reserved8"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved8"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved8
							, "_gtk_reserved7"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_append_column(IntPtr raw, IntPtr column);

		public int AppendColumn(Gtk.TreeViewColumn column) {
			int raw_ret = gtk_tree_view_append_column(Handle, column == null ? IntPtr.Zero : column.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_collapse_all(IntPtr raw);

		public void CollapseAll() {
			gtk_tree_view_collapse_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_collapse_row(IntPtr raw, IntPtr path);

		public bool CollapseRow(Gtk.TreePath path) {
			bool raw_ret = gtk_tree_view_collapse_row(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_columns_autosize(IntPtr raw);

		public void ColumnsAutosize() {
			gtk_tree_view_columns_autosize(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_bin_window_to_tree_coords(IntPtr raw, int bx, int by, out int tx, out int ty);

		public void ConvertBinWindowToTreeCoords(int bx, int by, out int tx, out int ty) {
			gtk_tree_view_convert_bin_window_to_tree_coords(Handle, bx, by, out tx, out ty);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_bin_window_to_widget_coords(IntPtr raw, int bx, int by, out int wx, out int wy);

		public void ConvertBinWindowToWidgetCoords(int bx, int by, out int wx, out int wy) {
			gtk_tree_view_convert_bin_window_to_widget_coords(Handle, bx, by, out wx, out wy);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_tree_to_bin_window_coords(IntPtr raw, int tx, int ty, out int bx, out int by);

		public void ConvertTreeToBinWindowCoords(int tx, int ty, out int bx, out int by) {
			gtk_tree_view_convert_tree_to_bin_window_coords(Handle, tx, ty, out bx, out by);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_tree_to_widget_coords(IntPtr raw, int tx, int ty, out int wx, out int wy);

		public void ConvertTreeToWidgetCoords(int tx, int ty, out int wx, out int wy) {
			gtk_tree_view_convert_tree_to_widget_coords(Handle, tx, ty, out wx, out wy);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_widget_to_bin_window_coords(IntPtr raw, int wx, int wy, out int bx, out int by);

		public void ConvertWidgetToBinWindowCoords(int wx, int wy, out int bx, out int by) {
			gtk_tree_view_convert_widget_to_bin_window_coords(Handle, wx, wy, out bx, out by);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_convert_widget_to_tree_coords(IntPtr raw, int wx, int wy, out int tx, out int ty);

		public void ConvertWidgetToTreeCoords(int wx, int wy, out int tx, out int ty) {
			gtk_tree_view_convert_widget_to_tree_coords(Handle, wx, wy, out tx, out ty);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_create_row_drag_icon(IntPtr raw, IntPtr path);

		public Cairo.Surface CreateRowDragIcon(Gtk.TreePath path) {
			IntPtr raw_ret = gtk_tree_view_create_row_drag_icon(Handle, path == null ? IntPtr.Zero : path.Handle);
			Cairo.Surface ret = Cairo.Surface.Lookup (raw_ret, true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_enable_model_drag_dest(IntPtr raw, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragDest(Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_tree_view_enable_model_drag_dest(Handle, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_enable_model_drag_source(IntPtr raw, int start_button_mask, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragSource(Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_tree_view_enable_model_drag_source(Handle, (int) start_button_mask, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_expand_all(IntPtr raw);

		public void ExpandAll() {
			gtk_tree_view_expand_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_expand_row(IntPtr raw, IntPtr path, bool open_all);

		public bool ExpandRow(Gtk.TreePath path, bool open_all) {
			bool raw_ret = gtk_tree_view_expand_row(Handle, path == null ? IntPtr.Zero : path.Handle, open_all);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_expand_to_path(IntPtr raw, IntPtr path);

		public void ExpandToPath(Gtk.TreePath path) {
			gtk_tree_view_expand_to_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_get_background_area(IntPtr raw, IntPtr path, IntPtr column, IntPtr rect);

		public Gdk.Rectangle GetBackgroundArea(Gtk.TreePath path, Gtk.TreeViewColumn column) {
			Gdk.Rectangle rect;
			IntPtr native_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
			gtk_tree_view_get_background_area(Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle, native_rect);
			rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_rect, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_rect);
			return rect;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_bin_window(IntPtr raw);

		public Gdk.Window BinWindow { 
			get {
				IntPtr raw_ret = gtk_tree_view_get_bin_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_get_cell_area(IntPtr raw, IntPtr path, IntPtr column, IntPtr rect);

		public Gdk.Rectangle GetCellArea(Gtk.TreePath path, Gtk.TreeViewColumn column) {
			Gdk.Rectangle rect;
			IntPtr native_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
			gtk_tree_view_get_cell_area(Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle, native_rect);
			rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_rect, typeof (Gdk.Rectangle));
			Marshal.FreeHGlobal (native_rect);
			return rect;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_column(IntPtr raw, int n);

		public Gtk.TreeViewColumn GetColumn(int n) {
			IntPtr raw_ret = gtk_tree_view_get_column(Handle, n);
			Gtk.TreeViewColumn ret = GLib.Object.GetObject(raw_ret) as Gtk.TreeViewColumn;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_columns(IntPtr raw);

		public Gtk.TreeViewColumn[] Columns { 
			get {
				IntPtr raw_ret = gtk_tree_view_get_columns(Handle);
				Gtk.TreeViewColumn[] ret = (Gtk.TreeViewColumn[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Gtk.TreeViewColumn));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_get_cursor(IntPtr raw, out IntPtr path, out IntPtr focus_column);

		public void GetCursor(out Gtk.TreePath path, out Gtk.TreeViewColumn focus_column) {
			IntPtr native_path;
			IntPtr native_focus_column;
			gtk_tree_view_get_cursor(Handle, out native_path, out native_focus_column);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			focus_column = GLib.Object.GetObject(native_focus_column) as Gtk.TreeViewColumn;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_dest_row_at_pos(IntPtr raw, int drag_x, int drag_y, out IntPtr path, out int pos);

		public bool GetDestRowAtPos(int drag_x, int drag_y, out Gtk.TreePath path, out Gtk.TreeViewDropPosition pos) {
			IntPtr native_path;
			int native_pos;
			bool raw_ret = gtk_tree_view_get_dest_row_at_pos(Handle, drag_x, drag_y, out native_path, out native_pos);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.TreeViewDropPosition) native_pos;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_get_drag_dest_row(IntPtr raw, out IntPtr path, out int pos);

		public void GetDragDestRow(out Gtk.TreePath path, out Gtk.TreeViewDropPosition pos) {
			IntPtr native_path;
			int native_pos;
			gtk_tree_view_get_drag_dest_row(Handle, out native_path, out native_pos);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.TreeViewDropPosition) native_pos;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_tree_view_get_n_columns(IntPtr raw);

		public uint NColumns { 
			get {
				uint raw_ret = gtk_tree_view_get_n_columns(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewRowSeparatorFuncNative gtk_tree_view_get_row_separator_func(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_row_separator_func(IntPtr raw, GtkSharp.TreeViewRowSeparatorFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public Gtk.TreeViewRowSeparatorFunc RowSeparatorFunc { 
			get {
				GtkSharp.TreeViewRowSeparatorFuncNative raw_ret = gtk_tree_view_get_row_separator_func(Handle);
				Gtk.TreeViewRowSeparatorFunc ret = GtkSharp.TreeViewRowSeparatorFuncWrapper.GetManagedDelegate (raw_ret);
				return ret;
			}
			set {
				GtkSharp.TreeViewRowSeparatorFuncWrapper value_wrapper = new GtkSharp.TreeViewRowSeparatorFuncWrapper (value);
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_view_set_row_separator_func(Handle, value_wrapper.NativeDelegate, data, destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_search_entry(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_entry(IntPtr raw, IntPtr entry);

		public Gtk.Entry SearchEntry { 
			get {
				IntPtr raw_ret = gtk_tree_view_get_search_entry(Handle);
				Gtk.Entry ret = GLib.Object.GetObject(raw_ret) as Gtk.Entry;
				return ret;
			}
			set {
				gtk_tree_view_set_search_entry(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewSearchEqualFuncNative gtk_tree_view_get_search_equal_func(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_equal_func(IntPtr raw, GtkSharp.TreeViewSearchEqualFuncNative search_equal_func, IntPtr search_user_data, GLib.DestroyNotify search_destroy);

		public Gtk.TreeViewSearchEqualFunc SearchEqualFunc { 
			get {
				GtkSharp.TreeViewSearchEqualFuncNative raw_ret = gtk_tree_view_get_search_equal_func(Handle);
				Gtk.TreeViewSearchEqualFunc ret = GtkSharp.TreeViewSearchEqualFuncWrapper.GetManagedDelegate (raw_ret);
				return ret;
			}
			set {
				GtkSharp.TreeViewSearchEqualFuncWrapper value_wrapper = new GtkSharp.TreeViewSearchEqualFuncWrapper (value);
				IntPtr search_user_data;
				GLib.DestroyNotify search_destroy;
				if (value == null) {
					search_user_data = IntPtr.Zero;
					search_destroy = null;
				} else {
					search_user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					search_destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_view_set_search_equal_func(Handle, value_wrapper.NativeDelegate, search_user_data, search_destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern GtkSharp.TreeViewSearchPositionFuncNative gtk_tree_view_get_search_position_func(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_search_position_func(IntPtr raw, GtkSharp.TreeViewSearchPositionFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		public Gtk.TreeViewSearchPositionFunc SearchPositionFunc { 
			get {
				GtkSharp.TreeViewSearchPositionFuncNative raw_ret = gtk_tree_view_get_search_position_func(Handle);
				Gtk.TreeViewSearchPositionFunc ret = GtkSharp.TreeViewSearchPositionFuncWrapper.GetManagedDelegate (raw_ret);
				return ret;
			}
			set {
				GtkSharp.TreeViewSearchPositionFuncWrapper value_wrapper = new GtkSharp.TreeViewSearchPositionFuncWrapper (value);
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_view_set_search_position_func(Handle, value_wrapper.NativeDelegate, data, destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_selection(IntPtr raw);

		public Gtk.TreeSelection Selection { 
			get {
				IntPtr raw_ret = gtk_tree_view_get_selection(Handle);
				Gtk.TreeSelection ret = GLib.Object.GetObject(raw_ret) as Gtk.TreeSelection;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_tooltip_context(IntPtr raw, ref int x, ref int y, bool keyboard_tip, out IntPtr model, out IntPtr path, IntPtr iter);

		public bool GetTooltipContext(ref int x, ref int y, bool keyboard_tip, out Gtk.ITreeModel model, out Gtk.TreePath path, out Gtk.TreeIter iter) {
			IntPtr native_model;
			IntPtr native_path;
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			bool raw_ret = gtk_tree_view_get_tooltip_context(Handle, ref x, ref y, keyboard_tip, out native_model, out native_path, native_iter);
			bool ret = raw_ret;
			model = Gtk.TreeModelAdapter.GetObject (native_model, false);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), false);
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_view_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_tree_view_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_get_visible_range(IntPtr raw, out IntPtr start_path, out IntPtr end_path);

		public bool GetVisibleRange(out Gtk.TreePath start_path, out Gtk.TreePath end_path) {
			IntPtr native_start_path;
			IntPtr native_end_path;
			bool raw_ret = gtk_tree_view_get_visible_range(Handle, out native_start_path, out native_end_path);
			bool ret = raw_ret;
			start_path = native_start_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_start_path, typeof (Gtk.TreePath), true);
			end_path = native_end_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_end_path, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_get_visible_rect(IntPtr raw, IntPtr visible_rect);

		public Gdk.Rectangle VisibleRect { 
			get {
				Gdk.Rectangle visible_rect;
				IntPtr native_visible_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
				gtk_tree_view_get_visible_rect(Handle, native_visible_rect);
				visible_rect = (Gdk.Rectangle) Marshal.PtrToStructure (native_visible_rect, typeof (Gdk.Rectangle));
				Marshal.FreeHGlobal (native_visible_rect);
				return visible_rect;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_insert_column(IntPtr raw, IntPtr column, int position);

		public int InsertColumn(Gtk.TreeViewColumn column, int position) {
			int raw_ret = gtk_tree_view_insert_column(Handle, column == null ? IntPtr.Zero : column.Handle, position);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_is_blank_at_pos(IntPtr raw, int x, int y, IntPtr path, IntPtr column, out int cell_x, out int cell_y);

		public bool IsBlankAtPos(int x, int y, Gtk.TreePath path, Gtk.TreeViewColumn column, out int cell_x, out int cell_y) {
			bool raw_ret = gtk_tree_view_is_blank_at_pos(Handle, x, y, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle, out cell_x, out cell_y);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_is_rubber_banding_active(IntPtr raw);

		public bool IsRubberBandingActive { 
			get {
				bool raw_ret = gtk_tree_view_is_rubber_banding_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_map_expanded_rows(IntPtr raw, GtkSharp.TreeViewMappingFuncNative func, IntPtr data);

		public void MapExpandedRows(Gtk.TreeViewMappingFunc func) {
			GtkSharp.TreeViewMappingFuncWrapper func_wrapper = new GtkSharp.TreeViewMappingFuncWrapper (func);
			gtk_tree_view_map_expanded_rows(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_move_column_after(IntPtr raw, IntPtr column, IntPtr base_column);

		public void MoveColumnAfter(Gtk.TreeViewColumn column, Gtk.TreeViewColumn base_column) {
			gtk_tree_view_move_column_after(Handle, column == null ? IntPtr.Zero : column.Handle, base_column == null ? IntPtr.Zero : base_column.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_tree_view_remove_column(IntPtr raw, IntPtr column);

		public int RemoveColumn(Gtk.TreeViewColumn column) {
			int raw_ret = gtk_tree_view_remove_column(Handle, column == null ? IntPtr.Zero : column.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_row_activated(IntPtr raw, IntPtr path, IntPtr column);

		public void ActivateRow(Gtk.TreePath path, Gtk.TreeViewColumn column) {
			gtk_tree_view_row_activated(Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_view_row_expanded(IntPtr raw, IntPtr path);

		public bool GetRowExpanded(Gtk.TreePath path) {
			bool raw_ret = gtk_tree_view_row_expanded(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_scroll_to_cell(IntPtr raw, IntPtr path, IntPtr column, bool use_align, float row_align, float col_align);

		public void ScrollToCell(Gtk.TreePath path, Gtk.TreeViewColumn column, bool use_align, float row_align, float col_align) {
			gtk_tree_view_scroll_to_cell(Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle, use_align, row_align, col_align);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_scroll_to_point(IntPtr raw, int tree_x, int tree_y);

		public void ScrollToPoint(int tree_x, int tree_y) {
			gtk_tree_view_scroll_to_point(Handle, tree_x, tree_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_column_drag_function(IntPtr raw, GtkSharp.TreeViewColumnDropFuncNative func, IntPtr user_data, GLib.DestroyNotify destroy);

		public Gtk.TreeViewColumnDropFunc ColumnDragFunction { 
			set {
				GtkSharp.TreeViewColumnDropFuncWrapper value_wrapper = new GtkSharp.TreeViewColumnDropFuncWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					user_data = IntPtr.Zero;
					destroy = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_view_set_column_drag_function(Handle, value_wrapper.NativeDelegate, user_data, destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_cursor(IntPtr raw, IntPtr path, IntPtr focus_column, bool start_editing);

		public void SetCursor(Gtk.TreePath path, Gtk.TreeViewColumn focus_column, bool start_editing) {
			gtk_tree_view_set_cursor(Handle, path == null ? IntPtr.Zero : path.Handle, focus_column == null ? IntPtr.Zero : focus_column.Handle, start_editing);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_cursor_on_cell(IntPtr raw, IntPtr path, IntPtr focus_column, IntPtr focus_cell, bool start_editing);

		public void SetCursorOnCell(Gtk.TreePath path, Gtk.TreeViewColumn focus_column, Gtk.CellRenderer focus_cell, bool start_editing) {
			gtk_tree_view_set_cursor_on_cell(Handle, path == null ? IntPtr.Zero : path.Handle, focus_column == null ? IntPtr.Zero : focus_column.Handle, focus_cell == null ? IntPtr.Zero : focus_cell.Handle, start_editing);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_destroy_count_func(IntPtr raw, GtkSharp.TreeDestroyCountFuncNative func, IntPtr data, GLib.DestroyNotify destroy);

		[Obsolete]
		public Gtk.TreeDestroyCountFunc DestroyCountFunc { 
			set {
				GtkSharp.TreeDestroyCountFuncWrapper value_wrapper = new GtkSharp.TreeDestroyCountFuncWrapper (value);
				IntPtr data;
				GLib.DestroyNotify destroy;
				if (value == null) {
					data = IntPtr.Zero;
					destroy = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value_wrapper);
					destroy = GLib.DestroyHelper.NotifyHandler;
				}
				gtk_tree_view_set_destroy_count_func(Handle, value_wrapper.NativeDelegate, data, destroy);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_drag_dest_row(IntPtr raw, IntPtr path, int pos);

		public void SetDragDestRow(Gtk.TreePath path, Gtk.TreeViewDropPosition pos) {
			gtk_tree_view_set_drag_dest_row(Handle, path == null ? IntPtr.Zero : path.Handle, (int) pos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_tooltip_cell(IntPtr raw, IntPtr tooltip, IntPtr path, IntPtr column, IntPtr cell);

		public void SetTooltipCell(Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.TreeViewColumn column, Gtk.CellRenderer cell) {
			gtk_tree_view_set_tooltip_cell(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle, column == null ? IntPtr.Zero : column.Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_set_tooltip_row(IntPtr raw, IntPtr tooltip, IntPtr path);

		public void SetTooltipRow(Gtk.Tooltip tooltip, Gtk.TreePath path) {
			gtk_tree_view_set_tooltip_row(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_unset_rows_drag_dest(IntPtr raw);

		public void UnsetRowsDragDest() {
			gtk_tree_view_unset_rows_drag_dest(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_view_unset_rows_drag_source(IntPtr raw);

		public void UnsetRowsDragSource() {
			gtk_tree_view_unset_rows_drag_source(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_scrollable_get_border(IntPtr raw, IntPtr border);

		public bool GetBorder(Gtk.Border border) {
			IntPtr native_border = GLib.Marshaller.StructureToPtrAlloc (border);
			bool raw_ret = gtk_scrollable_get_border(Handle, native_border);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_border);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hadjustment(IntPtr raw, IntPtr hadjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vadjustment(IntPtr raw, IntPtr vadjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_hscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("hscroll-policy")]
		public Gtk.ScrollablePolicy HscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_hscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_hscroll_policy(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_vscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("vscroll-policy")]
		public Gtk.ScrollablePolicy VscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_vscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_vscroll_policy(Handle, (int) value);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gtk.Container.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
