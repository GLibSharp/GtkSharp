// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Tooltip : GLib.Object {

		public Tooltip (IntPtr raw) : base(raw) {}

		protected Tooltip() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tooltip_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_tooltip_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_custom(IntPtr raw, IntPtr custom_widget);

		public Gtk.Widget Custom { 
			set {
				gtk_tooltip_set_custom(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf Icon { 
			set {
				gtk_tooltip_set_icon(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon_from_gicon(IntPtr raw, IntPtr gicon, int size);

		public void SetIconFromGicon(GLib.IIcon gicon, Gtk.IconSize size) {
			gtk_tooltip_set_icon_from_gicon(Handle, gicon == null ? IntPtr.Zero : ((gicon is GLib.Object) ? (gicon as GLib.Object).Handle : (gicon as GLib.IconAdapter).Handle), (int) size);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon_from_icon_name(IntPtr raw, IntPtr icon_name, int size);

		public void SetIconFromIconName(string icon_name, Gtk.IconSize size) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_tooltip_set_icon_from_icon_name(Handle, native_icon_name, (int) size);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_icon_from_stock(IntPtr raw, IntPtr stock_id, int size);

		[Obsolete]
		public void SetIconFromStock(string stock_id, Gtk.IconSize size) {
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_tooltip_set_icon_from_stock(Handle, native_stock_id, (int) size);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_markup(IntPtr raw, IntPtr markup);

		public string Markup { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_tooltip_set_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_text(IntPtr raw, IntPtr text);

		public string Text { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_tooltip_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_set_tip_area(IntPtr raw, IntPtr value);

		public Gdk.Rectangle TipArea { 
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_tooltip_set_tip_area(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tooltip_trigger_tooltip_query(IntPtr display);

		public static void TriggerTooltipQuery(Gdk.Display display) {
			gtk_tooltip_trigger_tooltip_query(display == null ? IntPtr.Zero : display.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
