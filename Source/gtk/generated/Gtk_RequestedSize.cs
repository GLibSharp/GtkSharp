// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct RequestedSize : IEquatable<RequestedSize> {

		private IntPtr _data;
		public int MinimumSize;
		public int NaturalSize;

		public static Gtk.RequestedSize Zero = new Gtk.RequestedSize ();

		public static Gtk.RequestedSize New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.RequestedSize.Zero;
			return (Gtk.RequestedSize) Marshal.PtrToStructure (raw, typeof (Gtk.RequestedSize));
		}

		public bool Equals (RequestedSize other)
		{
			return true && _data.Equals (other._data) && MinimumSize.Equals (other.MinimumSize) && NaturalSize.Equals (other.NaturalSize);
		}

		public override bool Equals (object other)
		{
			return other is RequestedSize && Equals ((RequestedSize) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _data.GetHashCode () ^ MinimumSize.GetHashCode () ^ NaturalSize.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
