// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ShortcutsShortcut : Gtk.Box {

		public ShortcutsShortcut (IntPtr raw) : base(raw) {}

		protected ShortcutsShortcut() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("accelerator")]
		public string Accelerator {
			get {
				GLib.Value val = GetProperty ("accelerator");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("accelerator", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("icon")]
		public GLib.IIcon Icon {
			get {
				GLib.Value val = GetProperty ("icon");
				GLib.IIcon ret = GLib.IconAdapter.GetObject ((GLib.Object) val);
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("icon-set")]
		public bool IconSet {
			get {
				GLib.Value val = GetProperty ("icon-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon-set", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("title")]
		public string Title {
			get {
				GLib.Value val = GetProperty ("title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("title", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("subtitle")]
		public string Subtitle {
			get {
				GLib.Value val = GetProperty ("subtitle");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("subtitle", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("subtitle-set")]
		public bool SubtitleSet {
			get {
				GLib.Value val = GetProperty ("subtitle-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("subtitle-set", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("accel-size-group")]
		public Gtk.SizeGroup AccelSizeGroup {
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("accel-size-group", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("title-size-group")]
		public Gtk.SizeGroup TitleSizeGroup {
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("title-size-group", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("direction")]
		public Gtk.TextDirection Direction {
			get {
				GLib.Value val = GetProperty ("direction");
				Gtk.TextDirection ret = (Gtk.TextDirection) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("direction", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("shortcut-type")]
		public Gtk.ShortcutType ShortcutType {
			get {
				GLib.Value val = GetProperty ("shortcut-type");
				Gtk.ShortcutType ret = (Gtk.ShortcutType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("shortcut-type", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("action-name")]
		public string ActionName {
			get {
				GLib.Value val = GetProperty ("action-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("action-name", val);
				val.Dispose ();
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (Gtk.Box.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_shortcuts_shortcut_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_shortcuts_shortcut_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gtk.Box.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
