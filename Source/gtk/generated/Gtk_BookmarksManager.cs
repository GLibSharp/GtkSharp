// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct BookmarksManager : IEquatable<BookmarksManager> {

		private IntPtr _bookmarks;
		private IntPtr _bookmarks_monitor;
		public GLib.FileMonitor BookmarksMonitor {
			get {
				return GLib.Object.GetObject(_bookmarks_monitor) as GLib.FileMonitor;
			}
			set {
				_bookmarks_monitor = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private UIntPtr bookmarks_monitor_changed_id;
		public ulong BookmarksMonitorChangedId {
			get {
				return (ulong) bookmarks_monitor_changed_id;
			}
			set {
				bookmarks_monitor_changed_id = new UIntPtr (value);
			}
		}
		private IntPtr _changed_func_data;
		private GtkSharp.BookmarksChangedFuncNative _changed_func;
		public Gtk.BookmarksChangedFunc ChangedFunc {
			get {
				return GtkSharp.BookmarksChangedFuncWrapper.GetManagedDelegate (_changed_func);
			}
		}

		public static Gtk.BookmarksManager Zero = new Gtk.BookmarksManager ();

		public static Gtk.BookmarksManager New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.BookmarksManager.Zero;
			return (Gtk.BookmarksManager) Marshal.PtrToStructure (raw, typeof (Gtk.BookmarksManager));
		}

		public bool Equals (BookmarksManager other)
		{
			return true && _bookmarks.Equals (other._bookmarks) && BookmarksMonitor.Equals (other.BookmarksMonitor) && BookmarksMonitorChangedId.Equals (other.BookmarksMonitorChangedId) && _changed_func_data.Equals (other._changed_func_data) && ChangedFunc.Equals (other.ChangedFunc);
		}

		public override bool Equals (object other)
		{
			return other is BookmarksManager && Equals ((BookmarksManager) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _bookmarks.GetHashCode () ^ BookmarksMonitor.GetHashCode () ^ BookmarksMonitorChangedId.GetHashCode () ^ _changed_func_data.GetHashCode () ^ ChangedFunc.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
