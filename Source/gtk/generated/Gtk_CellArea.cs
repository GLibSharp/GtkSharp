// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CellArea : GLib.InitiallyUnowned {

		public CellArea (IntPtr raw) : base(raw) {}

		protected CellArea() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static AddNativeDelegate Add_cb_delegate;
		static AddNativeDelegate AddVMCallback {
			get {
				if (Add_cb_delegate == null)
					Add_cb_delegate = new AddNativeDelegate (Add_cb);
				return Add_cb_delegate;
			}
		}

		static void OverrideAdd (GLib.GType gtype)
		{
			OverrideAdd (gtype, AddVMCallback);
		}

		static void OverrideAdd (GLib.GType gtype, AddNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("add"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AddNativeDelegate (IntPtr inst, IntPtr renderer);

		static void Add_cb (IntPtr inst, IntPtr renderer)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnAdd (GLib.Object.GetObject(renderer) as Gtk.CellRenderer);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideAdd")]
		protected virtual void OnAdd (Gtk.CellRenderer renderer)
		{
			InternalAdd (renderer);
		}

		private void InternalAdd (Gtk.CellRenderer renderer)
		{
			AddNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("add"));
				unmanaged = (AddNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(AddNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
		}

		static RemoveNativeDelegate Remove_cb_delegate;
		static RemoveNativeDelegate RemoveVMCallback {
			get {
				if (Remove_cb_delegate == null)
					Remove_cb_delegate = new RemoveNativeDelegate (Remove_cb);
				return Remove_cb_delegate;
			}
		}

		static void OverrideRemove (GLib.GType gtype)
		{
			OverrideRemove (gtype, RemoveVMCallback);
		}

		static void OverrideRemove (GLib.GType gtype, RemoveNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("_remove"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RemoveNativeDelegate (IntPtr inst, IntPtr renderer);

		static void Remove_cb (IntPtr inst, IntPtr renderer)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnRemove (GLib.Object.GetObject(renderer) as Gtk.CellRenderer);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideRemove")]
		protected virtual void OnRemove (Gtk.CellRenderer renderer)
		{
			InternalRemove (renderer);
		}

		private void InternalRemove (Gtk.CellRenderer renderer)
		{
			RemoveNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("_remove"));
				unmanaged = (RemoveNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(RemoveNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
		}

		static ForeachNativeDelegate Foreach_cb_delegate;
		static ForeachNativeDelegate ForeachVMCallback {
			get {
				if (Foreach_cb_delegate == null)
					Foreach_cb_delegate = new ForeachNativeDelegate (Foreach_cb);
				return Foreach_cb_delegate;
			}
		}

		static void OverrideForeach (GLib.GType gtype)
		{
			OverrideForeach (gtype, ForeachVMCallback);
		}

		static void OverrideForeach (GLib.GType gtype, ForeachNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("for_each"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ForeachNativeDelegate (IntPtr inst, GtkSharp.CellCallbackNative cb, IntPtr callback_data);

		static void Foreach_cb (IntPtr inst, GtkSharp.CellCallbackNative cb, IntPtr callback_data)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				GtkSharp.CellCallbackInvoker cb_invoker = new GtkSharp.CellCallbackInvoker (cb, callback_data);
				__obj.OnForeach (cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideForeach")]
		protected virtual void OnForeach (Gtk.CellCallback cb)
		{
			InternalForeach (cb);
		}

		private void InternalForeach (Gtk.CellCallback cb)
		{
			ForeachNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("for_each"));
				unmanaged = (ForeachNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ForeachNativeDelegate));
			}
			if (unmanaged == null) return;

			GtkSharp.CellCallbackWrapper cb_wrapper = new GtkSharp.CellCallbackWrapper (cb);
			unmanaged (this.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		static ForeachAllocNativeDelegate ForeachAlloc_cb_delegate;
		static ForeachAllocNativeDelegate ForeachAllocVMCallback {
			get {
				if (ForeachAlloc_cb_delegate == null)
					ForeachAlloc_cb_delegate = new ForeachAllocNativeDelegate (ForeachAlloc_cb);
				return ForeachAlloc_cb_delegate;
			}
		}

		static void OverrideForeachAlloc (GLib.GType gtype)
		{
			OverrideForeachAlloc (gtype, ForeachAllocVMCallback);
		}

		static void OverrideForeachAlloc (GLib.GType gtype, ForeachAllocNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("foreach_alloc"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ForeachAllocNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cell_area, IntPtr background_area, GtkSharp.CellAllocCallbackNative cb, IntPtr callback_data);

		static void ForeachAlloc_cb (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cell_area, IntPtr background_area, GtkSharp.CellAllocCallbackNative cb, IntPtr callback_data)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				GtkSharp.CellAllocCallbackInvoker cb_invoker = new GtkSharp.CellAllocCallbackInvoker (cb, callback_data);
				__obj.OnForeachAlloc (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, (Gdk.Rectangle) Marshal.PtrToStructure (cell_area, typeof (Gdk.Rectangle)), (Gdk.Rectangle) Marshal.PtrToStructure (background_area, typeof (Gdk.Rectangle)), cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideForeachAlloc")]
		protected virtual void OnForeachAlloc (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle background_area, Gtk.CellAllocCallback cb)
		{
			InternalForeachAlloc (context, widget, cell_area, background_area, cb);
		}

		private void InternalForeachAlloc (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle background_area, Gtk.CellAllocCallback cb)
		{
			ForeachAllocNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("foreach_alloc"));
				unmanaged = (ForeachAllocNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ForeachAllocNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			GtkSharp.CellAllocCallbackWrapper cb_wrapper = new GtkSharp.CellAllocCallbackWrapper (cb);
			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, native_background_area, cb_wrapper.NativeDelegate, IntPtr.Zero);
			Marshal.FreeHGlobal (native_cell_area);
			Marshal.FreeHGlobal (native_background_area);
		}

		static EventNativeDelegate Event_cb_delegate;
		static EventNativeDelegate EventVMCallback {
			get {
				if (Event_cb_delegate == null)
					Event_cb_delegate = new EventNativeDelegate (Event_cb);
				return Event_cb_delegate;
			}
		}

		static void OverrideEvent (GLib.GType gtype)
		{
			OverrideEvent (gtype, EventVMCallback);
		}

		static void OverrideEvent (GLib.GType gtype, EventNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("evnt"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int EventNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, IntPtr evnt, IntPtr cell_area, int flags);

		static int Event_cb (IntPtr inst, IntPtr context, IntPtr widget, IntPtr evnt, IntPtr cell_area, int flags)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				int __result;
				__result = __obj.OnEvent (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, Gdk.Event.GetEvent (evnt), (Gdk.Rectangle) Marshal.PtrToStructure (cell_area, typeof (Gdk.Rectangle)), (Gtk.CellRendererState) flags);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideEvent")]
		protected virtual int OnEvent (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Event evnt, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			return InternalEvent (context, widget, evnt, cell_area, flags);
		}

		private int InternalEvent (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Event evnt, Gdk.Rectangle cell_area, Gtk.CellRendererState flags)
		{
			EventNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("evnt"));
				unmanaged = (EventNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(EventNativeDelegate));
			}
			if (unmanaged == null) return 0;

			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			int __result = unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, native_cell_area, (int) flags);
			Marshal.FreeHGlobal (native_cell_area);
			return __result;
		}

		static RenderNativeDelegate Render_cb_delegate;
		static RenderNativeDelegate RenderVMCallback {
			get {
				if (Render_cb_delegate == null)
					Render_cb_delegate = new RenderNativeDelegate (Render_cb);
				return Render_cb_delegate;
			}
		}

		static void OverrideRender (GLib.GType gtype)
		{
			OverrideRender (gtype, RenderVMCallback);
		}

		static void OverrideRender (GLib.GType gtype, RenderNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("render"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cr, IntPtr background_area, IntPtr cell_area, int flags, bool paint_focus);

		static void Render_cb (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cr, IntPtr background_area, IntPtr cell_area, int flags, bool paint_focus)
		{
			Cairo.Context mycr = null;

			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				mycr = new Cairo.Context (cr, false);
				__obj.OnRender (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, mycr, (Gdk.Rectangle) Marshal.PtrToStructure (background_area, typeof (Gdk.Rectangle)), (Gdk.Rectangle) Marshal.PtrToStructure (cell_area, typeof (Gdk.Rectangle)), (Gtk.CellRendererState) flags, paint_focus);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			} finally {
				var disposable_cr = mycr as IDisposable;
				if (disposable_cr != null)
					disposable_cr.Dispose ();
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideRender")]
		protected virtual void OnRender (Gtk.CellAreaContext context, Gtk.Widget widget, Cairo.Context cr, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool paint_focus)
		{
			InternalRender (context, widget, cr, background_area, cell_area, flags, paint_focus);
		}

		private void InternalRender (Gtk.CellAreaContext context, Gtk.Widget widget, Cairo.Context cr, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool paint_focus)
		{
			RenderNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("render"));
				unmanaged = (RenderNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(RenderNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, cr == null ? IntPtr.Zero : cr.Handle, native_background_area, native_cell_area, (int) flags, paint_focus);
			Marshal.FreeHGlobal (native_background_area);
			Marshal.FreeHGlobal (native_cell_area);
		}

		static ApplyAttributesNativeDelegate ApplyAttributes_cb_delegate;
		static ApplyAttributesNativeDelegate ApplyAttributesVMCallback {
			get {
				if (ApplyAttributes_cb_delegate == null)
					ApplyAttributes_cb_delegate = new ApplyAttributesNativeDelegate (ApplyAttributes_cb);
				return ApplyAttributes_cb_delegate;
			}
		}

		static void OverrideApplyAttributes (GLib.GType gtype)
		{
			OverrideApplyAttributes (gtype, ApplyAttributesVMCallback);
		}

		static void OverrideApplyAttributes (GLib.GType gtype, ApplyAttributesNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("apply_attributes"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ApplyAttributesNativeDelegate (IntPtr inst, IntPtr tree_model, IntPtr iter, bool is_expander, bool is_expanded);

		static void ApplyAttributes_cb (IntPtr inst, IntPtr tree_model, IntPtr iter, bool is_expander, bool is_expanded)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnApplyAttributes (Gtk.TreeModelAdapter.GetObject (tree_model, false), Gtk.TreeIter.New (iter), is_expander, is_expanded);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideApplyAttributes")]
		protected virtual void OnApplyAttributes (Gtk.ITreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded)
		{
			InternalApplyAttributes (tree_model, iter, is_expander, is_expanded);
		}

		private void InternalApplyAttributes (Gtk.ITreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded)
		{
			ApplyAttributesNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("apply_attributes"));
				unmanaged = (ApplyAttributesNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ApplyAttributesNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			unmanaged (this.Handle, tree_model == null ? IntPtr.Zero : ((tree_model is GLib.Object) ? (tree_model as GLib.Object).Handle : (tree_model as Gtk.TreeModelAdapter).Handle), native_iter, is_expander, is_expanded);
			Marshal.FreeHGlobal (native_iter);
		}

		static CreateContextNativeDelegate CreateContext_cb_delegate;
		static CreateContextNativeDelegate CreateContextVMCallback {
			get {
				if (CreateContext_cb_delegate == null)
					CreateContext_cb_delegate = new CreateContextNativeDelegate (CreateContext_cb);
				return CreateContext_cb_delegate;
			}
		}

		static void OverrideCreateContext (GLib.GType gtype)
		{
			OverrideCreateContext (gtype, CreateContextVMCallback);
		}

		static void OverrideCreateContext (GLib.GType gtype, CreateContextNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("create_context"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CreateContextNativeDelegate (IntPtr inst);

		static IntPtr CreateContext_cb (IntPtr inst)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				Gtk.CellAreaContext __result;
				__result = __obj.OnCreateContext ();
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideCreateContext")]
		protected virtual Gtk.CellAreaContext OnCreateContext ()
		{
			return InternalCreateContext ();
		}

		private Gtk.CellAreaContext InternalCreateContext ()
		{
			CreateContextNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("create_context"));
				unmanaged = (CreateContextNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CreateContextNativeDelegate));
			}
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle);
			return GLib.Object.GetObject(__result) as Gtk.CellAreaContext;
		}

		static CopyContextNativeDelegate CopyContext_cb_delegate;
		static CopyContextNativeDelegate CopyContextVMCallback {
			get {
				if (CopyContext_cb_delegate == null)
					CopyContext_cb_delegate = new CopyContextNativeDelegate (CopyContext_cb);
				return CopyContext_cb_delegate;
			}
		}

		static void OverrideCopyContext (GLib.GType gtype)
		{
			OverrideCopyContext (gtype, CopyContextVMCallback);
		}

		static void OverrideCopyContext (GLib.GType gtype, CopyContextNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("copy_context"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr CopyContextNativeDelegate (IntPtr inst, IntPtr context);

		static IntPtr CopyContext_cb (IntPtr inst, IntPtr context)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				Gtk.CellAreaContext __result;
				__result = __obj.OnCopyContext (GLib.Object.GetObject(context) as Gtk.CellAreaContext);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideCopyContext")]
		protected virtual Gtk.CellAreaContext OnCopyContext (Gtk.CellAreaContext context)
		{
			return InternalCopyContext (context);
		}

		private Gtk.CellAreaContext InternalCopyContext (Gtk.CellAreaContext context)
		{
			CopyContextNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("copy_context"));
				unmanaged = (CopyContextNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(CopyContextNativeDelegate));
			}
			if (unmanaged == null) return null;

			IntPtr __result = unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle);
			return GLib.Object.GetObject(__result) as Gtk.CellAreaContext;
		}

		static GetRequestModeNativeDelegate GetRequestMode_cb_delegate;
		static GetRequestModeNativeDelegate GetRequestModeVMCallback {
			get {
				if (GetRequestMode_cb_delegate == null)
					GetRequestMode_cb_delegate = new GetRequestModeNativeDelegate (GetRequestMode_cb);
				return GetRequestMode_cb_delegate;
			}
		}

		static void OverrideGetRequestMode (GLib.GType gtype)
		{
			OverrideGetRequestMode (gtype, GetRequestModeVMCallback);
		}

		static void OverrideGetRequestMode (GLib.GType gtype, GetRequestModeNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_request_mode"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetRequestModeNativeDelegate (IntPtr inst);

		static int GetRequestMode_cb (IntPtr inst)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				Gtk.SizeRequestMode __result;
				__result = __obj.OnGetRequestMode ();
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetRequestMode")]
		protected virtual Gtk.SizeRequestMode OnGetRequestMode ()
		{
			return InternalGetRequestMode ();
		}

		private Gtk.SizeRequestMode InternalGetRequestMode ()
		{
			GetRequestModeNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_request_mode"));
				unmanaged = (GetRequestModeNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetRequestModeNativeDelegate));
			}
			if (unmanaged == null) return (Gtk.SizeRequestMode) 0;

			int __result = unmanaged (this.Handle);
			return (Gtk.SizeRequestMode) __result;
		}

		static GetPreferredWidthNativeDelegate GetPreferredWidth_cb_delegate;
		static GetPreferredWidthNativeDelegate GetPreferredWidthVMCallback {
			get {
				if (GetPreferredWidth_cb_delegate == null)
					GetPreferredWidth_cb_delegate = new GetPreferredWidthNativeDelegate (GetPreferredWidth_cb);
				return GetPreferredWidth_cb_delegate;
			}
		}

		static void OverrideGetPreferredWidth (GLib.GType gtype)
		{
			OverrideGetPreferredWidth (gtype, GetPreferredWidthVMCallback);
		}

		static void OverrideGetPreferredWidth (GLib.GType gtype, GetPreferredWidthNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_width"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredWidthNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, out int minimum_width, out int natural_width);

		static void GetPreferredWidth_cb (IntPtr inst, IntPtr context, IntPtr widget, out int minimum_width, out int natural_width)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnGetPreferredWidth (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, out minimum_width, out natural_width);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetPreferredWidth")]
		protected virtual void OnGetPreferredWidth (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_width, out int natural_width)
		{
			InternalGetPreferredWidth (context, widget, out minimum_width, out natural_width);
		}

		private void InternalGetPreferredWidth (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_width, out int natural_width)
		{
			GetPreferredWidthNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_width"));
				unmanaged = (GetPreferredWidthNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetPreferredWidthNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, out minimum_width, out natural_width);
		}

		static GetPreferredHeightForWidthNativeDelegate GetPreferredHeightForWidth_cb_delegate;
		static GetPreferredHeightForWidthNativeDelegate GetPreferredHeightForWidthVMCallback {
			get {
				if (GetPreferredHeightForWidth_cb_delegate == null)
					GetPreferredHeightForWidth_cb_delegate = new GetPreferredHeightForWidthNativeDelegate (GetPreferredHeightForWidth_cb);
				return GetPreferredHeightForWidth_cb_delegate;
			}
		}

		static void OverrideGetPreferredHeightForWidth (GLib.GType gtype)
		{
			OverrideGetPreferredHeightForWidth (gtype, GetPreferredHeightForWidthVMCallback);
		}

		static void OverrideGetPreferredHeightForWidth (GLib.GType gtype, GetPreferredHeightForWidthNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_height_for_width"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredHeightForWidthNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, int width, out int minimum_height, out int natural_height);

		static void GetPreferredHeightForWidth_cb (IntPtr inst, IntPtr context, IntPtr widget, int width, out int minimum_height, out int natural_height)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnGetPreferredHeightForWidth (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, width, out minimum_height, out natural_height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetPreferredHeightForWidth")]
		protected virtual void OnGetPreferredHeightForWidth (Gtk.CellAreaContext context, Gtk.Widget widget, int width, out int minimum_height, out int natural_height)
		{
			InternalGetPreferredHeightForWidth (context, widget, width, out minimum_height, out natural_height);
		}

		private void InternalGetPreferredHeightForWidth (Gtk.CellAreaContext context, Gtk.Widget widget, int width, out int minimum_height, out int natural_height)
		{
			GetPreferredHeightForWidthNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_height_for_width"));
				unmanaged = (GetPreferredHeightForWidthNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetPreferredHeightForWidthNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, width, out minimum_height, out natural_height);
		}

		static GetPreferredHeightNativeDelegate GetPreferredHeight_cb_delegate;
		static GetPreferredHeightNativeDelegate GetPreferredHeightVMCallback {
			get {
				if (GetPreferredHeight_cb_delegate == null)
					GetPreferredHeight_cb_delegate = new GetPreferredHeightNativeDelegate (GetPreferredHeight_cb);
				return GetPreferredHeight_cb_delegate;
			}
		}

		static void OverrideGetPreferredHeight (GLib.GType gtype)
		{
			OverrideGetPreferredHeight (gtype, GetPreferredHeightVMCallback);
		}

		static void OverrideGetPreferredHeight (GLib.GType gtype, GetPreferredHeightNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_height"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredHeightNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, out int minimum_height, out int natural_height);

		static void GetPreferredHeight_cb (IntPtr inst, IntPtr context, IntPtr widget, out int minimum_height, out int natural_height)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnGetPreferredHeight (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, out minimum_height, out natural_height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetPreferredHeight")]
		protected virtual void OnGetPreferredHeight (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_height, out int natural_height)
		{
			InternalGetPreferredHeight (context, widget, out minimum_height, out natural_height);
		}

		private void InternalGetPreferredHeight (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_height, out int natural_height)
		{
			GetPreferredHeightNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_height"));
				unmanaged = (GetPreferredHeightNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetPreferredHeightNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, out minimum_height, out natural_height);
		}

		static GetPreferredWidthForHeightNativeDelegate GetPreferredWidthForHeight_cb_delegate;
		static GetPreferredWidthForHeightNativeDelegate GetPreferredWidthForHeightVMCallback {
			get {
				if (GetPreferredWidthForHeight_cb_delegate == null)
					GetPreferredWidthForHeight_cb_delegate = new GetPreferredWidthForHeightNativeDelegate (GetPreferredWidthForHeight_cb);
				return GetPreferredWidthForHeight_cb_delegate;
			}
		}

		static void OverrideGetPreferredWidthForHeight (GLib.GType gtype)
		{
			OverrideGetPreferredWidthForHeight (gtype, GetPreferredWidthForHeightVMCallback);
		}

		static void OverrideGetPreferredWidthForHeight (GLib.GType gtype, GetPreferredWidthForHeightNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_width_for_height"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetPreferredWidthForHeightNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, int height, out int minimum_width, out int natural_width);

		static void GetPreferredWidthForHeight_cb (IntPtr inst, IntPtr context, IntPtr widget, int height, out int minimum_width, out int natural_width)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnGetPreferredWidthForHeight (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, height, out minimum_width, out natural_width);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetPreferredWidthForHeight")]
		protected virtual void OnGetPreferredWidthForHeight (Gtk.CellAreaContext context, Gtk.Widget widget, int height, out int minimum_width, out int natural_width)
		{
			InternalGetPreferredWidthForHeight (context, widget, height, out minimum_width, out natural_width);
		}

		private void InternalGetPreferredWidthForHeight (Gtk.CellAreaContext context, Gtk.Widget widget, int height, out int minimum_width, out int natural_width)
		{
			GetPreferredWidthForHeightNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_preferred_width_for_height"));
				unmanaged = (GetPreferredWidthForHeightNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetPreferredWidthForHeightNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, height, out minimum_width, out natural_width);
		}

		static SetCellPropertyNativeDelegate SetCellProperty_cb_delegate;
		static SetCellPropertyNativeDelegate SetCellPropertyVMCallback {
			get {
				if (SetCellProperty_cb_delegate == null)
					SetCellProperty_cb_delegate = new SetCellPropertyNativeDelegate (SetCellProperty_cb);
				return SetCellProperty_cb_delegate;
			}
		}

		static void OverrideSetCellProperty (GLib.GType gtype)
		{
			OverrideSetCellProperty (gtype, SetCellPropertyVMCallback);
		}

		static void OverrideSetCellProperty (GLib.GType gtype, SetCellPropertyNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("set_cell_property"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetCellPropertyNativeDelegate (IntPtr inst, IntPtr renderer, uint property_id, IntPtr value, IntPtr pspec);

		static void SetCellProperty_cb (IntPtr inst, IntPtr renderer, uint property_id, IntPtr value, IntPtr pspec)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnSetCellProperty (GLib.Object.GetObject(renderer) as Gtk.CellRenderer, property_id, (GLib.Value) Marshal.PtrToStructure (value, typeof (GLib.Value)), pspec);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideSetCellProperty")]
		protected virtual void OnSetCellProperty (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, IntPtr pspec)
		{
			InternalSetCellProperty (renderer, property_id, value, pspec);
		}

		private void InternalSetCellProperty (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, IntPtr pspec)
		{
			SetCellPropertyNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("set_cell_property"));
				unmanaged = (SetCellPropertyNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SetCellPropertyNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			unmanaged (this.Handle, renderer == null ? IntPtr.Zero : renderer.Handle, property_id, native_value, pspec);
			Marshal.FreeHGlobal (native_value);
		}

		static GetCellPropertyNativeDelegate GetCellProperty_cb_delegate;
		static GetCellPropertyNativeDelegate GetCellPropertyVMCallback {
			get {
				if (GetCellProperty_cb_delegate == null)
					GetCellProperty_cb_delegate = new GetCellPropertyNativeDelegate (GetCellProperty_cb);
				return GetCellProperty_cb_delegate;
			}
		}

		static void OverrideGetCellProperty (GLib.GType gtype)
		{
			OverrideGetCellProperty (gtype, GetCellPropertyVMCallback);
		}

		static void OverrideGetCellProperty (GLib.GType gtype, GetCellPropertyNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_cell_property"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void GetCellPropertyNativeDelegate (IntPtr inst, IntPtr renderer, uint property_id, IntPtr value, IntPtr pspec);

		static void GetCellProperty_cb (IntPtr inst, IntPtr renderer, uint property_id, IntPtr value, IntPtr pspec)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				__obj.OnGetCellProperty (GLib.Object.GetObject(renderer) as Gtk.CellRenderer, property_id, (GLib.Value) Marshal.PtrToStructure (value, typeof (GLib.Value)), pspec);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideGetCellProperty")]
		protected virtual void OnGetCellProperty (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, IntPtr pspec)
		{
			InternalGetCellProperty (renderer, property_id, value, pspec);
		}

		private void InternalGetCellProperty (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, IntPtr pspec)
		{
			GetCellPropertyNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_cell_property"));
				unmanaged = (GetCellPropertyNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetCellPropertyNativeDelegate));
			}
			if (unmanaged == null) return;

			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			unmanaged (this.Handle, renderer == null ? IntPtr.Zero : renderer.Handle, property_id, native_value, pspec);
			Marshal.FreeHGlobal (native_value);
		}

		static FocusNativeDelegate Focus_cb_delegate;
		static FocusNativeDelegate FocusVMCallback {
			get {
				if (Focus_cb_delegate == null)
					Focus_cb_delegate = new FocusNativeDelegate (Focus_cb);
				return Focus_cb_delegate;
			}
		}

		static void OverrideFocus (GLib.GType gtype)
		{
			OverrideFocus (gtype, FocusVMCallback);
		}

		static void OverrideFocus (GLib.GType gtype, FocusNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("focus"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool FocusNativeDelegate (IntPtr inst, int direction);

		static bool Focus_cb (IntPtr inst, int direction)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				bool __result;
				__result = __obj.OnFocus ((Gtk.DirectionType) direction);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideFocus")]
		protected virtual bool OnFocus (Gtk.DirectionType direction)
		{
			return InternalFocus (direction);
		}

		private bool InternalFocus (Gtk.DirectionType direction)
		{
			FocusNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("focus"));
				unmanaged = (FocusNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(FocusNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, (int) direction);
			return __result;
		}

		static IsActivatableNativeDelegate IsActivatable_cb_delegate;
		static IsActivatableNativeDelegate IsActivatableVMCallback {
			get {
				if (IsActivatable_cb_delegate == null)
					IsActivatable_cb_delegate = new IsActivatableNativeDelegate (IsActivatable_cb);
				return IsActivatable_cb_delegate;
			}
		}

		static void OverrideIsActivatable (GLib.GType gtype)
		{
			OverrideIsActivatable (gtype, IsActivatableVMCallback);
		}

		static void OverrideIsActivatable (GLib.GType gtype, IsActivatableNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("is_activatable"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool IsActivatableNativeDelegate (IntPtr inst);

		static bool IsActivatable_cb (IntPtr inst)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				bool __result;
				__result = __obj.OnIsActivatable ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideIsActivatable")]
		protected virtual bool OnIsActivatable ()
		{
			return InternalIsActivatable ();
		}

		private bool InternalIsActivatable ()
		{
			IsActivatableNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("is_activatable"));
				unmanaged = (IsActivatableNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(IsActivatableNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}

		static ActivateNativeDelegate Activate_cb_delegate;
		static ActivateNativeDelegate ActivateVMCallback {
			get {
				if (Activate_cb_delegate == null)
					Activate_cb_delegate = new ActivateNativeDelegate (Activate_cb);
				return Activate_cb_delegate;
			}
		}

		static void OverrideActivate (GLib.GType gtype)
		{
			OverrideActivate (gtype, ActivateVMCallback);
		}

		static void OverrideActivate (GLib.GType gtype, ActivateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("activate"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ActivateNativeDelegate (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cell_area, int flags, bool edit_only);

		static bool Activate_cb (IntPtr inst, IntPtr context, IntPtr widget, IntPtr cell_area, int flags, bool edit_only)
		{
			try {
				CellArea __obj = GLib.Object.GetObject (inst, false) as CellArea;
				bool __result;
				__result = __obj.OnActivate (GLib.Object.GetObject(context) as Gtk.CellAreaContext, GLib.Object.GetObject(widget) as Gtk.Widget, (Gdk.Rectangle) Marshal.PtrToStructure (cell_area, typeof (Gdk.Rectangle)), (Gtk.CellRendererState) flags, edit_only);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.CellArea), ConnectionMethod="OverrideActivate")]
		protected virtual bool OnActivate (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool edit_only)
		{
			return InternalActivate (context, widget, cell_area, flags, edit_only);
		}

		private bool InternalActivate (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool edit_only)
		{
			ActivateNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("activate"));
				unmanaged = (ActivateNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ActivateNativeDelegate));
			}
			if (unmanaged == null) return false;

			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			bool __result = unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, (int) flags, edit_only);
			Marshal.FreeHGlobal (native_cell_area);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("add"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // add
							, null
							, "remove"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("remove"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // remove
							, "add"
							, "foreach"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("foreach"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // foreach
							, "remove"
							, "foreach_alloc"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("foreach_alloc"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // foreach_alloc
							, "foreach"
							, "event"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("event"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // event
							, "foreach_alloc"
							, "render"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("render"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // render
							, "event"
							, "apply_attributes"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("apply_attributes"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // apply_attributes
							, "render"
							, "create_context"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("create_context"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // create_context
							, "apply_attributes"
							, "copy_context"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("copy_context"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // copy_context
							, "create_context"
							, "get_request_mode"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_request_mode"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_request_mode
							, "copy_context"
							, "get_preferred_width"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_preferred_width"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_preferred_width
							, "get_request_mode"
							, "get_preferred_height_for_width"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_preferred_height_for_width"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_preferred_height_for_width
							, "get_preferred_width"
							, "get_preferred_height"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_preferred_height"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_preferred_height
							, "get_preferred_height_for_width"
							, "get_preferred_width_for_height"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_preferred_width_for_height"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_preferred_width_for_height
							, "get_preferred_height"
							, "set_cell_property"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("set_cell_property"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // set_cell_property
							, "get_preferred_width_for_height"
							, "get_cell_property"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("get_cell_property"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_cell_property
							, "set_cell_property"
							, "focus"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("focus"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // focus
							, "get_cell_property"
							, "is_activatable"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("is_activatable"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // is_activatable
							, "focus"
							, "activate"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("activate"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // activate
							, "is_activatable"
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "activate"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, "_gtk_reserved5"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved5"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved5
							, "_gtk_reserved4"
							, "_gtk_reserved6"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved6"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved6
							, "_gtk_reserved5"
							, "_gtk_reserved7"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved7"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved7
							, "_gtk_reserved6"
							, "_gtk_reserved8"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved8"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved8
							, "_gtk_reserved7"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_activate(IntPtr raw, IntPtr context, IntPtr widget, IntPtr cell_area, int flags, bool edit_only);

		public bool Activate(Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool edit_only) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			bool raw_ret = gtk_cell_area_activate(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, (int) flags, edit_only);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_cell_area);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_activate_cell(IntPtr raw, IntPtr widget, IntPtr renderer, IntPtr evnt, IntPtr cell_area, int flags);

		public bool ActivateCell(Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Event evnt, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			bool raw_ret = gtk_cell_area_activate_cell(Handle, widget == null ? IntPtr.Zero : widget.Handle, renderer == null ? IntPtr.Zero : renderer.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, native_cell_area, (int) flags);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_cell_area);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_add(IntPtr raw, IntPtr renderer);

		public void Add(Gtk.CellRenderer renderer) {
			gtk_cell_area_add(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_add_focus_sibling(IntPtr raw, IntPtr renderer, IntPtr sibling);

		public void AddFocusSibling(Gtk.CellRenderer renderer, Gtk.CellRenderer sibling) {
			gtk_cell_area_add_focus_sibling(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, sibling == null ? IntPtr.Zero : sibling.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_apply_attributes(IntPtr raw, IntPtr tree_model, IntPtr iter, bool is_expander, bool is_expanded);

		public void ApplyAttributes(Gtk.ITreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_cell_area_apply_attributes(Handle, tree_model == null ? IntPtr.Zero : ((tree_model is GLib.Object) ? (tree_model as GLib.Object).Handle : (tree_model as Gtk.TreeModelAdapter).Handle), native_iter, is_expander, is_expanded);
			Marshal.FreeHGlobal (native_iter);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_attribute_connect(IntPtr raw, IntPtr renderer, IntPtr attribute, int column);

		public void AttributeConnect(Gtk.CellRenderer renderer, string attribute, int column) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_area_attribute_connect(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_attribute_disconnect(IntPtr raw, IntPtr renderer, IntPtr attribute);

		public void AttributeDisconnect(Gtk.CellRenderer renderer, string attribute) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_area_attribute_disconnect(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_attribute);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_cell_area_attribute_get_column(IntPtr raw, IntPtr renderer, IntPtr attribute);

		public int AttributeGetColumn(Gtk.CellRenderer renderer, string attribute) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			int raw_ret = gtk_cell_area_attribute_get_column(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_attribute);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_attribute);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_cell_get_property(IntPtr raw, IntPtr renderer, IntPtr property_name, IntPtr value);

		public void CellGetProperty(Gtk.CellRenderer renderer, string property_name, GLib.Value value) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_cell_area_cell_get_property(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_property_name, native_value);
			GLib.Marshaller.Free (native_property_name);
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_cell_get_valist(IntPtr raw, IntPtr renderer, IntPtr first_property_name, IntPtr var_args);

		public void CellGetValist(Gtk.CellRenderer renderer, string first_property_name, IntPtr var_args) {
			IntPtr native_first_property_name = GLib.Marshaller.StringToPtrGStrdup (first_property_name);
			gtk_cell_area_cell_get_valist(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_first_property_name, var_args);
			GLib.Marshaller.Free (native_first_property_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_cell_set_property(IntPtr raw, IntPtr renderer, IntPtr property_name, IntPtr value);

		public void CellSetProperty(Gtk.CellRenderer renderer, string property_name, GLib.Value value) {
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			gtk_cell_area_cell_set_property(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_property_name, native_value);
			GLib.Marshaller.Free (native_property_name);
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_cell_set_valist(IntPtr raw, IntPtr renderer, IntPtr first_property_name, IntPtr var_args);

		public void CellSetValist(Gtk.CellRenderer renderer, string first_property_name, IntPtr var_args) {
			IntPtr native_first_property_name = GLib.Marshaller.StringToPtrGStrdup (first_property_name);
			gtk_cell_area_cell_set_valist(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_first_property_name, var_args);
			GLib.Marshaller.Free (native_first_property_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_copy_context(IntPtr raw, IntPtr context);

		public Gtk.CellAreaContext CopyContext(Gtk.CellAreaContext context) {
			IntPtr raw_ret = gtk_cell_area_copy_context(Handle, context == null ? IntPtr.Zero : context.Handle);
			Gtk.CellAreaContext ret = GLib.Object.GetObject(raw_ret) as Gtk.CellAreaContext;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_create_context(IntPtr raw);

		public Gtk.CellAreaContext CreateContext() {
			IntPtr raw_ret = gtk_cell_area_create_context(Handle);
			Gtk.CellAreaContext ret = GLib.Object.GetObject(raw_ret) as Gtk.CellAreaContext;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_cell_area_event(IntPtr raw, IntPtr context, IntPtr widget, IntPtr evnt, IntPtr cell_area, int flags);

		public int Event(Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Event evnt, Gdk.Rectangle cell_area, Gtk.CellRendererState flags) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			int raw_ret = gtk_cell_area_event(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, native_cell_area, (int) flags);
			int ret = raw_ret;
			Marshal.FreeHGlobal (native_cell_area);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_focus(IntPtr raw, int direction);

		public bool Focus(Gtk.DirectionType direction) {
			bool raw_ret = gtk_cell_area_focus(Handle, (int) direction);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_foreach(IntPtr raw, GtkSharp.CellCallbackNative cb, IntPtr callback_data);

		public void Foreach(Gtk.CellCallback cb) {
			GtkSharp.CellCallbackWrapper cb_wrapper = new GtkSharp.CellCallbackWrapper (cb);
			gtk_cell_area_foreach(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_foreach_alloc(IntPtr raw, IntPtr context, IntPtr widget, IntPtr cell_area, IntPtr background_area, GtkSharp.CellAllocCallbackNative cb, IntPtr callback_data);

		public void ForeachAlloc(Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle background_area, Gtk.CellAllocCallback cb) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			GtkSharp.CellAllocCallbackWrapper cb_wrapper = new GtkSharp.CellAllocCallbackWrapper (cb);
			gtk_cell_area_foreach_alloc(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, native_background_area, cb_wrapper.NativeDelegate, IntPtr.Zero);
			Marshal.FreeHGlobal (native_cell_area);
			Marshal.FreeHGlobal (native_background_area);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_get_cell_allocation(IntPtr raw, IntPtr context, IntPtr widget, IntPtr renderer, IntPtr cell_area, IntPtr allocation);

		public void GetCellAllocation(Gtk.CellAreaContext context, Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Rectangle cell_area, Gdk.Rectangle allocation) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_allocation = GLib.Marshaller.StructureToPtrAlloc (allocation);
			gtk_cell_area_get_cell_allocation(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, renderer == null ? IntPtr.Zero : renderer.Handle, native_cell_area, native_allocation);
			Marshal.FreeHGlobal (native_cell_area);
			Marshal.FreeHGlobal (native_allocation);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_cell_at_position(IntPtr raw, IntPtr context, IntPtr widget, IntPtr cell_area, int x, int y, IntPtr alloc_area);

		public Gtk.CellRenderer GetCellAtPosition(Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, int x, int y, Gdk.Rectangle alloc_area) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_alloc_area = GLib.Marshaller.StructureToPtrAlloc (alloc_area);
			IntPtr raw_ret = gtk_cell_area_get_cell_at_position(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, x, y, native_alloc_area);
			Gtk.CellRenderer ret = GLib.Object.GetObject(raw_ret) as Gtk.CellRenderer;
			Marshal.FreeHGlobal (native_cell_area);
			Marshal.FreeHGlobal (native_alloc_area);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_current_path_string(IntPtr raw);

		public string CurrentPathString { 
			get {
				IntPtr raw_ret = gtk_cell_area_get_current_path_string(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_edit_widget(IntPtr raw);

		public Gtk.ICellEditable EditWidget { 
			get {
				IntPtr raw_ret = gtk_cell_area_get_edit_widget(Handle);
				Gtk.ICellEditable ret = Gtk.CellEditableAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_edited_cell(IntPtr raw);

		public Gtk.CellRenderer EditedCell { 
			get {
				IntPtr raw_ret = gtk_cell_area_get_edited_cell(Handle);
				Gtk.CellRenderer ret = GLib.Object.GetObject(raw_ret) as Gtk.CellRenderer;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_focus_cell(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_set_focus_cell(IntPtr raw, IntPtr renderer);

		public Gtk.CellRenderer FocusCell { 
			get {
				IntPtr raw_ret = gtk_cell_area_get_focus_cell(Handle);
				Gtk.CellRenderer ret = GLib.Object.GetObject(raw_ret) as Gtk.CellRenderer;
				return ret;
			}
			set {
				gtk_cell_area_set_focus_cell(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_focus_from_sibling(IntPtr raw, IntPtr renderer);

		public Gtk.CellRenderer GetFocusFromSibling(Gtk.CellRenderer renderer) {
			IntPtr raw_ret = gtk_cell_area_get_focus_from_sibling(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
			Gtk.CellRenderer ret = GLib.Object.GetObject(raw_ret) as Gtk.CellRenderer;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_focus_siblings(IntPtr raw, IntPtr renderer);

		public Gtk.CellRenderer[] GetFocusSiblings(Gtk.CellRenderer renderer) {
			IntPtr raw_ret = gtk_cell_area_get_focus_siblings(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
			Gtk.CellRenderer[] ret = (Gtk.CellRenderer[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(Gtk.CellRenderer));
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_get_preferred_height(IntPtr raw, IntPtr context, IntPtr widget, out int minimum_height, out int natural_height);

		public void GetPreferredHeight(Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_height, out int natural_height) {
			gtk_cell_area_get_preferred_height(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, out minimum_height, out natural_height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_get_preferred_height_for_width(IntPtr raw, IntPtr context, IntPtr widget, int width, out int minimum_height, out int natural_height);

		public void GetPreferredHeightForWidth(Gtk.CellAreaContext context, Gtk.Widget widget, int width, out int minimum_height, out int natural_height) {
			gtk_cell_area_get_preferred_height_for_width(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, width, out minimum_height, out natural_height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_get_preferred_width(IntPtr raw, IntPtr context, IntPtr widget, out int minimum_width, out int natural_width);

		public void GetPreferredWidth(Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_width, out int natural_width) {
			gtk_cell_area_get_preferred_width(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, out minimum_width, out natural_width);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_get_preferred_width_for_height(IntPtr raw, IntPtr context, IntPtr widget, int height, out int minimum_width, out int natural_width);

		public void GetPreferredWidthForHeight(Gtk.CellAreaContext context, Gtk.Widget widget, int height, out int minimum_width, out int natural_width) {
			gtk_cell_area_get_preferred_width_for_height(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, height, out minimum_width, out natural_width);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_cell_area_get_request_mode(IntPtr raw);

		public Gtk.SizeRequestMode RequestMode { 
			get {
				int raw_ret = gtk_cell_area_get_request_mode(Handle);
				Gtk.SizeRequestMode ret = (Gtk.SizeRequestMode) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_area_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_cell_area_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_has_renderer(IntPtr raw, IntPtr renderer);

		public bool HasRenderer(Gtk.CellRenderer renderer) {
			bool raw_ret = gtk_cell_area_has_renderer(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_inner_cell_area(IntPtr raw, IntPtr widget, IntPtr cell_area, IntPtr inner_area);

		public void InnerCellArea(Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle inner_area) {
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			IntPtr native_inner_area = GLib.Marshaller.StructureToPtrAlloc (inner_area);
			gtk_cell_area_inner_cell_area(Handle, widget == null ? IntPtr.Zero : widget.Handle, native_cell_area, native_inner_area);
			Marshal.FreeHGlobal (native_cell_area);
			Marshal.FreeHGlobal (native_inner_area);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_is_activatable(IntPtr raw);

		public bool IsActivatable { 
			get {
				bool raw_ret = gtk_cell_area_is_activatable(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_cell_area_is_focus_sibling(IntPtr raw, IntPtr renderer, IntPtr sibling);

		public bool IsFocusSibling(Gtk.CellRenderer renderer, Gtk.CellRenderer sibling) {
			bool raw_ret = gtk_cell_area_is_focus_sibling(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, sibling == null ? IntPtr.Zero : sibling.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_remove(IntPtr raw, IntPtr renderer);

		public void Remove(Gtk.CellRenderer renderer) {
			gtk_cell_area_remove(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_remove_focus_sibling(IntPtr raw, IntPtr renderer, IntPtr sibling);

		public void RemoveFocusSibling(Gtk.CellRenderer renderer, Gtk.CellRenderer sibling) {
			gtk_cell_area_remove_focus_sibling(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, sibling == null ? IntPtr.Zero : sibling.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_render(IntPtr raw, IntPtr context, IntPtr widget, IntPtr cr, IntPtr background_area, IntPtr cell_area, int flags, bool paint_focus);

		public void Render(Gtk.CellAreaContext context, Gtk.Widget widget, Cairo.Context cr, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool paint_focus) {
			IntPtr native_background_area = GLib.Marshaller.StructureToPtrAlloc (background_area);
			IntPtr native_cell_area = GLib.Marshaller.StructureToPtrAlloc (cell_area);
			gtk_cell_area_render(Handle, context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, cr == null ? IntPtr.Zero : cr.Handle, native_background_area, native_cell_area, (int) flags, paint_focus);
			Marshal.FreeHGlobal (native_background_area);
			Marshal.FreeHGlobal (native_cell_area);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_request_renderer(IntPtr raw, IntPtr renderer, int orientation, IntPtr widget, int for_size, out int minimum_size, out int natural_size);

		public void RequestRenderer(Gtk.CellRenderer renderer, Gtk.Orientation orientation, Gtk.Widget widget, int for_size, out int minimum_size, out int natural_size) {
			gtk_cell_area_request_renderer(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, (int) orientation, widget == null ? IntPtr.Zero : widget.Handle, for_size, out minimum_size, out natural_size);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_area_stop_editing(IntPtr raw, bool canceled);

		public void StopEditing(bool canceled) {
			gtk_cell_area_stop_editing(Handle, canceled);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
