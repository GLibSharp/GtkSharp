// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PrintJob : GLib.Object {

		public PrintJob (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_new(IntPtr title, IntPtr printer, IntPtr settings, IntPtr page_setup);

		public PrintJob (string title, Gtk.Printer printer, Gtk.PrintSettings settings, Gtk.PageSetup page_setup) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintJob)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("title");
				vals.Add (new GLib.Value (title));
				if (printer != null) {
					names.Add ("printer");
					vals.Add (new GLib.Value (printer));
				}
				if (settings != null) {
					names.Add ("settings");
					vals.Add (new GLib.Value (settings));
				}
				if (page_setup != null) {
					names.Add ("page_setup");
					vals.Add (new GLib.Value (page_setup));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			Raw = gtk_print_job_new(native_title, printer == null ? IntPtr.Zero : printer.Handle, settings == null ? IntPtr.Zero : settings.Handle, page_setup == null ? IntPtr.Zero : page_setup.Handle);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_title(IntPtr raw);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_print_job_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_printer(IntPtr raw);

		[GLib.Property ("printer")]
		public Gtk.Printer Printer {
			get  {
				IntPtr raw_ret = gtk_print_job_get_printer(Handle);
				Gtk.Printer ret = GLib.Object.GetObject(raw_ret) as Gtk.Printer;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_settings(IntPtr raw);

		[GLib.Property ("settings")]
		public Gtk.PrintSettings Settings {
			get  {
				IntPtr raw_ret = gtk_print_job_get_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
		}

		[GLib.Property ("page-setup")]
		public Gtk.PageSetup PageSetup {
			get {
				GLib.Value val = GetProperty ("page-setup");
				Gtk.PageSetup ret = (Gtk.PageSetup) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_job_get_track_print_status(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_track_print_status(IntPtr raw, bool track_status);

		[GLib.Property ("track-print-status")]
		public bool TrackPrintStatus {
			get  {
				bool raw_ret = gtk_print_job_get_track_print_status(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_print_job_set_track_print_status(Handle, value);
			}
		}

		[GLib.Signal("status-changed")]
		public event System.EventHandler StatusChanged {
			add {
				this.AddSignalHandler ("status-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("status-changed", value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_job_get_collate(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_collate(IntPtr raw, bool collate);

		public bool Collate { 
			get {
				bool raw_ret = gtk_print_job_get_collate(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_collate(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_print_job_get_n_up(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_n_up(IntPtr raw, uint n_up);

		public uint NUp { 
			get {
				uint raw_ret = gtk_print_job_get_n_up(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_n_up(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_n_up_layout(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_n_up_layout(IntPtr raw, int layout);

		public Gtk.NumberUpLayout NUpLayout { 
			get {
				int raw_ret = gtk_print_job_get_n_up_layout(Handle);
				Gtk.NumberUpLayout ret = (Gtk.NumberUpLayout) raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_n_up_layout(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_num_copies(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_num_copies(IntPtr raw, int num_copies);

		public int NumCopies { 
			get {
				int raw_ret = gtk_print_job_get_num_copies(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_num_copies(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_page_ranges(IntPtr raw, out int n_ranges);

		public Gtk.PageRange GetPageRanges(out int n_ranges) {
			IntPtr raw_ret = gtk_print_job_get_page_ranges(Handle, out n_ranges);
			Gtk.PageRange ret = Gtk.PageRange.New (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_page_set(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_page_set(IntPtr raw, int page_set);

		public Gtk.PageSet PageSet { 
			get {
				int raw_ret = gtk_print_job_get_page_set(Handle);
				Gtk.PageSet ret = (Gtk.PageSet) raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_page_set(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_pages(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_pages(IntPtr raw, int pages);

		public Gtk.PrintPages Pages { 
			get {
				int raw_ret = gtk_print_job_get_pages(Handle);
				Gtk.PrintPages ret = (Gtk.PrintPages) raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_pages(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_job_get_reverse(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_reverse(IntPtr raw, bool reverse);

		public bool Reverse { 
			get {
				bool raw_ret = gtk_print_job_get_reverse(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_reverse(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_job_get_rotate(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_rotate(IntPtr raw, bool rotate);

		public bool Rotate { 
			get {
				bool raw_ret = gtk_print_job_get_rotate(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_rotate(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_job_get_scale(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_scale(IntPtr raw, double scale);

		public double Scale { 
			get {
				double raw_ret = gtk_print_job_get_scale(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				gtk_print_job_set_scale(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_job_get_status(IntPtr raw);

		public Gtk.PrintStatus Status { 
			get {
				int raw_ret = gtk_print_job_get_status(Handle);
				Gtk.PrintStatus ret = (Gtk.PrintStatus) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gtk_print_job_get_surface(IntPtr raw, out IntPtr error);

		public unsafe Cairo.Surface GetSurface() {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gtk_print_job_get_surface(Handle, out error);
			Cairo.Surface ret = Cairo.Surface.Lookup (raw_ret, true);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_job_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_print_job_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_send(IntPtr raw, GtkSharp.PrintJobCompleteFuncNative cb, IntPtr user_data, GLib.DestroyNotify dnotify);

		public void Send(Gtk.PrintJobCompleteFunc cb) {
			GtkSharp.PrintJobCompleteFuncWrapper cb_wrapper = new GtkSharp.PrintJobCompleteFuncWrapper (cb);
			IntPtr user_data;
			GLib.DestroyNotify dnotify;
			if (cb == null) {
				user_data = IntPtr.Zero;
				dnotify = null;
			} else {
				user_data = (IntPtr) GCHandle.Alloc (cb_wrapper);
				dnotify = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_print_job_send(Handle, cb_wrapper.NativeDelegate, user_data, dnotify);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_job_set_page_ranges(IntPtr raw, IntPtr ranges, int n_ranges);

		public void SetPageRanges(Gtk.PageRange ranges, int n_ranges) {
			IntPtr native_ranges = GLib.Marshaller.StructureToPtrAlloc (ranges);
			gtk_print_job_set_page_ranges(Handle, native_ranges, n_ranges);
			Marshal.FreeHGlobal (native_ranges);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_print_job_set_source_fd(IntPtr raw, int fd, out IntPtr error);

		public unsafe bool SetSourceFd(int fd) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_print_job_set_source_fd(Handle, fd, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_print_job_set_source_file(IntPtr raw, IntPtr filename, out IntPtr error);

		public unsafe bool SetSourceFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_print_job_set_source_file(Handle, native_filename, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
