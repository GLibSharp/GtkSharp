// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate IntPtr CalendarDetailFuncNative(IntPtr calendar, uint year, uint month, uint day, IntPtr user_data);

	internal class CalendarDetailFuncInvoker {

		CalendarDetailFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~CalendarDetailFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal CalendarDetailFuncInvoker (CalendarDetailFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal CalendarDetailFuncInvoker (CalendarDetailFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal CalendarDetailFuncInvoker (CalendarDetailFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.CalendarDetailFunc Handler {
			get {
				return new Gtk.CalendarDetailFunc(InvokeNative);
			}
		}

		string InvokeNative (Gtk.Calendar calendar, uint year, uint month, uint day)
		{
			string __result = GLib.Marshaller.PtrToStringGFree(native_cb (calendar == null ? IntPtr.Zero : calendar.Handle, year, month, day, __data));
			return __result;
		}
	}

	internal class CalendarDetailFuncWrapper {

		public IntPtr NativeCallback (IntPtr calendar, uint year, uint month, uint day, IntPtr user_data)
		{
			try {
				string __ret = managed (GLib.Object.GetObject(calendar) as Gtk.Calendar, year, month, day);
				if (release_on_call)
					gch.Free ();
				return GLib.Marshaller.StringToPtrGStrdup(__ret);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal CalendarDetailFuncNative NativeDelegate;
		Gtk.CalendarDetailFunc managed;

		public CalendarDetailFuncWrapper (Gtk.CalendarDetailFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new CalendarDetailFuncNative (NativeCallback);
		}

		public static Gtk.CalendarDetailFunc GetManagedDelegate (CalendarDetailFuncNative native)
		{
			if (native == null)
				return null;
			CalendarDetailFuncWrapper wrapper = (CalendarDetailFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
