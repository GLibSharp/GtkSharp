// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AccelGroupEntry : IEquatable<AccelGroupEntry> {

		public Gtk.AccelKey Key;
		private IntPtr _closure;
		public int AccelPathQuark;

		public static Gtk.AccelGroupEntry Zero = new Gtk.AccelGroupEntry ();

		public static Gtk.AccelGroupEntry New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.AccelGroupEntry.Zero;
			return (Gtk.AccelGroupEntry) Marshal.PtrToStructure (raw, typeof (Gtk.AccelGroupEntry));
		}

		public bool Equals (AccelGroupEntry other)
		{
			return true && Key.Equals (other.Key) && _closure.Equals (other._closure) && AccelPathQuark.Equals (other.AccelPathQuark);
		}

		public override bool Equals (object other)
		{
			return other is AccelGroupEntry && Equals ((AccelGroupEntry) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Key.GetHashCode () ^ _closure.GetHashCode () ^ AccelPathQuark.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
