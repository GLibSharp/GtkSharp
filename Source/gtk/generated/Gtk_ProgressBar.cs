// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ProgressBar : Gtk.Widget, Gtk.IOrientable {

		public ProgressBar (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_new();

		public ProgressBar () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ProgressBar)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_progress_bar_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_progress_bar_get_inverted(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_inverted(IntPtr raw, bool inverted);

		[GLib.Property ("inverted")]
		public bool Inverted {
			get  {
				bool raw_ret = gtk_progress_bar_get_inverted(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_inverted(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_fraction(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_fraction(IntPtr raw, double fraction);

		[GLib.Property ("fraction")]
		public double Fraction {
			get  {
				double raw_ret = gtk_progress_bar_get_fraction(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_fraction(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_progress_bar_get_pulse_step(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_pulse_step(IntPtr raw, double fraction);

		[GLib.Property ("pulse-step")]
		public double PulseStep {
			get  {
				double raw_ret = gtk_progress_bar_get_pulse_step(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_pulse_step(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get  {
				IntPtr raw_ret = gtk_progress_bar_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_progress_bar_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_progress_bar_get_show_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_show_text(IntPtr raw, bool show_text);

		[GLib.Property ("show-text")]
		public bool ShowText {
			get  {
				bool raw_ret = gtk_progress_bar_get_show_text(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_show_text(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_progress_bar_get_ellipsize(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_set_ellipsize(IntPtr raw, int mode);

		[GLib.Property ("ellipsize")]
		public Pango.EllipsizeMode Ellipsize {
			get  {
				int raw_ret = gtk_progress_bar_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set  {
				gtk_progress_bar_set_ellipsize(Handle, (int) value);
			}
		}

		[GLib.Property ("xspacing")]
		public int Xspacing {
			get {
				GLib.Value val = GetProperty ("xspacing");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xspacing", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("yspacing")]
		public int Yspacing {
			get {
				GLib.Value val = GetProperty ("yspacing");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("yspacing", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("min-horizontal-bar-width")]
		public int MinHorizontalBarWidth {
			get {
				GLib.Value val = GetProperty ("min-horizontal-bar-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("min-horizontal-bar-width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("min-horizontal-bar-height")]
		public int MinHorizontalBarHeight {
			get {
				GLib.Value val = GetProperty ("min-horizontal-bar-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("min-horizontal-bar-height", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("min-vertical-bar-width")]
		public int MinVerticalBarWidth {
			get {
				GLib.Value val = GetProperty ("min-vertical-bar-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("min-vertical-bar-width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("min-vertical-bar-height")]
		public int MinVerticalBarHeight {
			get {
				GLib.Value val = GetProperty ("min-vertical-bar-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("min-vertical-bar-height", val);
				val.Dispose ();
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gtk_reserved1"
							, Gtk.Widget.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, null
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_progress_bar_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_progress_bar_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_progress_bar_pulse(IntPtr raw);

		public void Pulse() {
			gtk_progress_bar_pulse(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_orientable_get_orientation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_orientable_set_orientation(IntPtr raw, int orientation);

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get  {
				int raw_ret = gtk_orientable_get_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gtk_orientable_set_orientation(Handle, (int) value);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gtk.Widget.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
