// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	internal partial class Render {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_activity(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Activity(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_activity(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_arrow(IntPtr context, IntPtr cr, double angle, double x, double y, double size);

		public static void Arrow(Gtk.StyleContext context, Cairo.Context cr, double angle, double x, double y, double size) {
			gtk_render_arrow(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, angle, x, y, size);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_background(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Background(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_background(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_background_get_clip(IntPtr context, double x, double y, double width, double height, IntPtr out_clip);

		public static void BackgroundGetClip(Gtk.StyleContext context, double x, double y, double width, double height, Gdk.Rectangle out_clip) {
			IntPtr native_out_clip = GLib.Marshaller.StructureToPtrAlloc (out_clip);
			gtk_render_background_get_clip(context == null ? IntPtr.Zero : context.Handle, x, y, width, height, native_out_clip);
			Marshal.FreeHGlobal (native_out_clip);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_check(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Check(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_check(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_expander(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Expander(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_expander(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_extension(IntPtr context, IntPtr cr, double x, double y, double width, double height, int gap_side);

		public static void Extension(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side) {
			gtk_render_extension(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) gap_side);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_focus(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Focus(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_focus(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_frame(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Frame(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_frame(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_frame_gap(IntPtr context, IntPtr cr, double x, double y, double width, double height, int gap_side, double xy0_gap, double xy1_gap);

		public static void FrameGap(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap) {
			gtk_render_frame_gap(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) gap_side, xy0_gap, xy1_gap);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_handle(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Handle(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_handle(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_icon(IntPtr context, IntPtr cr, IntPtr pixbuf, double x, double y);

		public static void Icon(Gtk.StyleContext context, Cairo.Context cr, Gdk.Pixbuf pixbuf, double x, double y) {
			gtk_render_icon(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, x, y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_render_icon_pixbuf(IntPtr context, IntPtr source, int size);

		[Obsolete]
		public static Gdk.Pixbuf IconPixbuf(Gtk.StyleContext context, Gtk.IconSource source, Gtk.IconSize size) {
			IntPtr raw_ret = gtk_render_icon_pixbuf(context == null ? IntPtr.Zero : context.Handle, source == null ? IntPtr.Zero : source.Handle, (int) size);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret, true) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_icon_surface(IntPtr context, IntPtr cr, IntPtr surface, double x, double y);

		public static void IconSurface(Gtk.StyleContext context, Cairo.Context cr, Cairo.Surface surface, double x, double y) {
			gtk_render_icon_surface(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, surface.Handle, x, y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_insertion_cursor(IntPtr context, IntPtr cr, double x, double y, IntPtr layout, int index, int direction);

		public static void InsertionCursor(Gtk.StyleContext context, Cairo.Context cr, double x, double y, Pango.Layout layout, int index, Pango.Direction direction) {
			gtk_render_insertion_cursor(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, layout == null ? IntPtr.Zero : layout.Handle, index, (int) direction);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_layout(IntPtr context, IntPtr cr, double x, double y, IntPtr layout);

		public static void Layout(Gtk.StyleContext context, Cairo.Context cr, double x, double y, Pango.Layout layout) {
			gtk_render_layout(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, layout == null ? IntPtr.Zero : layout.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_line(IntPtr context, IntPtr cr, double x0, double y0, double x1, double y1);

		public static void Line(Gtk.StyleContext context, Cairo.Context cr, double x0, double y0, double x1, double y1) {
			gtk_render_line(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x0, y0, x1, y1);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_option(IntPtr context, IntPtr cr, double x, double y, double width, double height);

		public static void Option(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height) {
			gtk_render_option(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_render_slider(IntPtr context, IntPtr cr, double x, double y, double width, double height, int orientation);

		public static void Slider(Gtk.StyleContext context, Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation) {
			gtk_render_slider(context == null ? IntPtr.Zero : context.Handle, cr == null ? IntPtr.Zero : cr.Handle, x, y, width, height, (int) orientation);
		}

#endregion
	}
}
