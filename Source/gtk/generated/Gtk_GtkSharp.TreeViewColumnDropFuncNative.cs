// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate bool TreeViewColumnDropFuncNative(IntPtr tree_view, IntPtr column, IntPtr prev_column, IntPtr next_column, IntPtr data);

	internal class TreeViewColumnDropFuncInvoker {

		TreeViewColumnDropFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TreeViewColumnDropFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TreeViewColumnDropFuncInvoker (TreeViewColumnDropFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TreeViewColumnDropFuncInvoker (TreeViewColumnDropFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TreeViewColumnDropFuncInvoker (TreeViewColumnDropFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.TreeViewColumnDropFunc Handler {
			get {
				return new Gtk.TreeViewColumnDropFunc(InvokeNative);
			}
		}

		bool InvokeNative (Gtk.TreeView tree_view, Gtk.TreeViewColumn column, Gtk.TreeViewColumn prev_column, Gtk.TreeViewColumn next_column)
		{
			bool __result = native_cb (tree_view == null ? IntPtr.Zero : tree_view.Handle, column == null ? IntPtr.Zero : column.Handle, prev_column == null ? IntPtr.Zero : prev_column.Handle, next_column == null ? IntPtr.Zero : next_column.Handle, __data);
			return __result;
		}
	}

	internal class TreeViewColumnDropFuncWrapper {

		public bool NativeCallback (IntPtr tree_view, IntPtr column, IntPtr prev_column, IntPtr next_column, IntPtr data)
		{
			try {
				bool __ret = managed (GLib.Object.GetObject(tree_view) as Gtk.TreeView, GLib.Object.GetObject(column) as Gtk.TreeViewColumn, GLib.Object.GetObject(prev_column) as Gtk.TreeViewColumn, GLib.Object.GetObject(next_column) as Gtk.TreeViewColumn);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TreeViewColumnDropFuncNative NativeDelegate;
		Gtk.TreeViewColumnDropFunc managed;

		public TreeViewColumnDropFuncWrapper (Gtk.TreeViewColumnDropFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TreeViewColumnDropFuncNative (NativeCallback);
		}

		public static Gtk.TreeViewColumnDropFunc GetManagedDelegate (TreeViewColumnDropFuncNative native)
		{
			if (native == null)
				return null;
			TreeViewColumnDropFuncWrapper wrapper = (TreeViewColumnDropFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
