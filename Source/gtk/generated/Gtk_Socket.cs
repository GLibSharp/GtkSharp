// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Socket : Gtk.Container {

		public Socket (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_new();

		public Socket () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Socket)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_socket_new();
		}

		[GLib.Signal("plug-added")]
		public event System.EventHandler PlugAdded {
			add {
				this.AddSignalHandler ("plug-added", value);
			}
			remove {
				this.RemoveSignalHandler ("plug-added", value);
			}
		}

		[GLib.Signal("plug-removed")]
		public event Gtk.PlugRemovedHandler PlugRemoved {
			add {
				this.AddSignalHandler ("plug-removed", value, typeof (Gtk.PlugRemovedArgs));
			}
			remove {
				this.RemoveSignalHandler ("plug-removed", value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_socket_add_id(IntPtr raw, UIntPtr window);

		public void AddId(ulong window) {
			gtk_socket_add_id(Handle, new UIntPtr (window));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gtk_socket_get_id(IntPtr raw);

		public ulong Id { 
			get {
				UIntPtr raw_ret = gtk_socket_get_id(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_plug_window(IntPtr raw);

		public Gdk.Window PlugWindow { 
			get {
				IntPtr raw_ret = gtk_socket_get_plug_window(Handle);
				Gdk.Window ret = GLib.Object.GetObject(raw_ret) as Gdk.Window;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_socket_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_socket_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
