// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct RecentData : IEquatable<RecentData> {

		public string DisplayName;
		public string Description;
		public string MimeType;
		public string AppName;
		public string AppExec;
		public string Groups;
		public bool IsPrivate;

		public static Gtk.RecentData Zero = new Gtk.RecentData ();

		public static Gtk.RecentData New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.RecentData.Zero;
			return (Gtk.RecentData) Marshal.PtrToStructure (raw, typeof (Gtk.RecentData));
		}

		public bool Equals (RecentData other)
		{
			return true && DisplayName.Equals (other.DisplayName) && Description.Equals (other.Description) && MimeType.Equals (other.MimeType) && AppName.Equals (other.AppName) && AppExec.Equals (other.AppExec) && Groups.Equals (other.Groups) && IsPrivate.Equals (other.IsPrivate);
		}

		public override bool Equals (object other)
		{
			return other is RecentData && Equals ((RecentData) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ DisplayName.GetHashCode () ^ Description.GetHashCode () ^ MimeType.GetHashCode () ^ AppName.GetHashCode () ^ AppExec.GetHashCode () ^ Groups.GetHashCode () ^ IsPrivate.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
