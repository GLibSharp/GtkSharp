// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class CellEditableAdapter : GLib.GInterfaceAdapter, Gtk.ICellEditable {

		[StructLayout (LayoutKind.Sequential)]
		struct GtkCellEditableIface {
			IntPtr EditingDone;
			IntPtr WidgetRemoved;
			public StartEditingNativeDelegate StartEditing;
		}

		static GtkCellEditableIface iface;

		static CellEditableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (CellEditableAdapter));
			iface.StartEditing = new StartEditingNativeDelegate (StartEditing_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void StartEditingNativeDelegate (IntPtr inst, IntPtr evnt);

		static void StartEditing_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				ICellEditableImplementor __obj = GLib.Object.GetObject (inst, false) as ICellEditableImplementor;
				__obj.StartEditing (Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GtkCellEditableIface native_iface = (GtkCellEditableIface) Marshal.PtrToStructure (ifaceptr, typeof (GtkCellEditableIface));
			native_iface.StartEditing = iface.StartEditing;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public CellEditableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public CellEditableAdapter (ICellEditableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public CellEditableAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_editable_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_cell_editable_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ICellEditable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ICellEditable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ICellEditableImplementor)
				return new CellEditableAdapter (obj as ICellEditableImplementor);
			else if (obj as ICellEditable == null)
				return new CellEditableAdapter (obj.Handle);
			else
				return obj as ICellEditable;
		}

		public ICellEditableImplementor Implementor {
			get {
				return implementor as ICellEditableImplementor;
			}
		}

		[GLib.Signal("remove-widget")]
		public event System.EventHandler WidgetRemoved {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("remove-widget", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("remove-widget", value);
			}
		}

		[GLib.Signal("editing-done")]
		public event System.EventHandler EditingDone {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("editing-done", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("editing-done", value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_editing_done(IntPtr raw);

		public void FinishEditing() {
			gtk_cell_editable_editing_done(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_remove_widget(IntPtr raw);

		public void RemoveWidget() {
			gtk_cell_editable_remove_widget(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_editable_start_editing(IntPtr raw, IntPtr evnt);

		public void StartEditing(Gdk.Event evnt) {
			gtk_cell_editable_start_editing(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

#endregion
	}
}
