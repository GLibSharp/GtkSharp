// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AccelGroup : GLib.Object {

		public AccelGroup (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_new();

		public AccelGroup () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AccelGroup)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_accel_group_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_get_is_locked(IntPtr raw);

		[GLib.Property ("is-locked")]
		public bool IsLocked {
			get  {
				bool raw_ret = gtk_accel_group_get_is_locked(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_accel_group_get_modifier_mask(IntPtr raw);

		[GLib.Property ("modifier-mask")]
		public Gdk.ModifierType ModifierMask {
			get  {
				int raw_ret = gtk_accel_group_get_modifier_mask(Handle);
				Gdk.ModifierType ret = (Gdk.ModifierType) raw_ret;
				return ret;
			}
		}

		[GLib.Signal("accel-activate")]
		public event Gtk.AccelActivateHandler AccelActivate {
			add {
				this.AddSignalHandler ("accel-activate", value, typeof (Gtk.AccelActivateArgs));
			}
			remove {
				this.RemoveSignalHandler ("accel-activate", value);
			}
		}

		[GLib.Signal("accel-changed")]
		public event Gtk.AccelChangedHandler AccelChanged {
			add {
				this.AddSignalHandler ("accel-changed", value, typeof (Gtk.AccelChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("accel-changed", value);
			}
		}

		static AccelActivateNativeDelegate AccelActivate_cb_delegate;
		static AccelActivateNativeDelegate AccelActivateVMCallback {
			get {
				if (AccelActivate_cb_delegate == null)
					AccelActivate_cb_delegate = new AccelActivateNativeDelegate (AccelActivate_cb);
				return AccelActivate_cb_delegate;
			}
		}

		static void OverrideAccelActivate (GLib.GType gtype)
		{
			OverrideAccelActivate (gtype, AccelActivateVMCallback);
		}

		static void OverrideAccelActivate (GLib.GType gtype, AccelActivateNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "accel-activate", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool AccelActivateNativeDelegate (IntPtr inst, IntPtr acceleratable, uint keyval, int modifier);

		static bool AccelActivate_cb (IntPtr inst, IntPtr acceleratable, uint keyval, int modifier)
		{
			try {
				AccelGroup __obj = GLib.Object.GetObject (inst, false) as AccelGroup;
				bool __result;
				__result = __obj.OnAccelActivate (GLib.Object.GetObject (acceleratable), keyval, (Gdk.ModifierType) modifier);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AccelGroup), ConnectionMethod="OverrideAccelActivate")]
		protected virtual bool OnAccelActivate (GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier)
		{
			return InternalAccelActivate (acceleratable, keyval, modifier);
		}

		private bool InternalAccelActivate (GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.Boolean);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (acceleratable);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (keyval);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (modifier);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			bool result = (bool) ret;
			ret.Dispose ();
			return result;
		}

		static AccelChangedNativeDelegate AccelChanged_cb_delegate;
		static AccelChangedNativeDelegate AccelChangedVMCallback {
			get {
				if (AccelChanged_cb_delegate == null)
					AccelChanged_cb_delegate = new AccelChangedNativeDelegate (AccelChanged_cb);
				return AccelChanged_cb_delegate;
			}
		}

		static void OverrideAccelChanged (GLib.GType gtype)
		{
			OverrideAccelChanged (gtype, AccelChangedVMCallback);
		}

		static void OverrideAccelChanged (GLib.GType gtype, AccelChangedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("accel_changed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AccelChangedNativeDelegate (IntPtr inst, uint keyval, int modifier, IntPtr accel_closure);

		static void AccelChanged_cb (IntPtr inst, uint keyval, int modifier, IntPtr accel_closure)
		{
			try {
				AccelGroup __obj = GLib.Object.GetObject (inst, false) as AccelGroup;
				__obj.OnAccelChanged (keyval, (Gdk.ModifierType) modifier, accel_closure);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.AccelGroup), ConnectionMethod="OverrideAccelChanged")]
		protected virtual void OnAccelChanged (uint keyval, Gdk.ModifierType modifier, IntPtr accel_closure)
		{
			InternalAccelChanged (keyval, modifier, accel_closure);
		}

		private void InternalAccelChanged (uint keyval, Gdk.ModifierType modifier, IntPtr accel_closure)
		{
			AccelChangedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("accel_changed"));
				unmanaged = (AccelChangedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(AccelChangedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, keyval, (int) modifier, accel_closure);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("accel_changed"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // accel_changed
							, null
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "accel_changed"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_activate(IntPtr raw, int accel_quark, IntPtr acceleratable, uint accel_key, int accel_mods);

		public bool Activate(int accel_quark, GLib.Object acceleratable, uint accel_key, Gdk.ModifierType accel_mods) {
			bool raw_ret = gtk_accel_group_activate(Handle, accel_quark, acceleratable == null ? IntPtr.Zero : acceleratable.Handle, accel_key, (int) accel_mods);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_connect(IntPtr raw, uint accel_key, int accel_mods, int accel_flags, IntPtr closure);

		public void Connect(uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags, IntPtr closure) {
			gtk_accel_group_connect(Handle, accel_key, (int) accel_mods, (int) accel_flags, closure);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_connect_by_path(IntPtr raw, IntPtr accel_path, IntPtr closure);

		public void ConnectByPath(string accel_path, IntPtr closure) {
			IntPtr native_accel_path = GLib.Marshaller.StringToPtrGStrdup (accel_path);
			gtk_accel_group_connect_by_path(Handle, native_accel_path, closure);
			GLib.Marshaller.Free (native_accel_path);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_disconnect(IntPtr raw, IntPtr closure);

		public bool Disconnect(IntPtr closure) {
			bool raw_ret = gtk_accel_group_disconnect(Handle, closure);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_accel_group_disconnect_key(IntPtr raw, uint accel_key, int accel_mods);

		public bool DisconnectKey(uint accel_key, Gdk.ModifierType accel_mods) {
			bool raw_ret = gtk_accel_group_disconnect_key(Handle, accel_key, (int) accel_mods);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_find(IntPtr raw, GtkSharp.AccelGroupFindFuncNative find_func, IntPtr data);

		public Gtk.AccelKey Find(Gtk.AccelGroupFindFunc find_func) {
			GtkSharp.AccelGroupFindFuncWrapper find_func_wrapper = new GtkSharp.AccelGroupFindFuncWrapper (find_func);
			IntPtr raw_ret = gtk_accel_group_find(Handle, find_func_wrapper.NativeDelegate, IntPtr.Zero);
			Gtk.AccelKey ret = Gtk.AccelKey.New (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_from_accel_closure(IntPtr closure);

		public static Gtk.AccelGroup FromAccelClosure(IntPtr closure) {
			IntPtr raw_ret = gtk_accel_group_from_accel_closure(closure);
			Gtk.AccelGroup ret = GLib.Object.GetObject(raw_ret) as Gtk.AccelGroup;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_accel_group_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_lock(IntPtr raw);

		public void Lock() {
			gtk_accel_group_lock(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_accel_group_query(IntPtr raw, uint accel_key, int accel_mods, out uint n_entries);

		public Gtk.AccelGroupEntry Query(uint accel_key, Gdk.ModifierType accel_mods, out uint n_entries) {
			IntPtr raw_ret = gtk_accel_group_query(Handle, accel_key, (int) accel_mods, out n_entries);
			Gtk.AccelGroupEntry ret = Gtk.AccelGroupEntry.New (raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_accel_group_unlock(IntPtr raw);

		public void Unlock() {
			gtk_accel_group_unlock(Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
