// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class EventController : GLib.Object {

		public EventController (IntPtr raw) : base(raw) {}

		protected EventController() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_event_controller_get_widget(IntPtr raw);

		[GLib.Property ("widget")]
		public Gtk.Widget Widget {
			get  {
				IntPtr raw_ret = gtk_event_controller_get_widget(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_event_controller_get_propagation_phase(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_event_controller_set_propagation_phase(IntPtr raw, int phase);

		[GLib.Property ("propagation-phase")]
		public Gtk.PropagationPhase PropagationPhase {
			get  {
				int raw_ret = gtk_event_controller_get_propagation_phase(Handle);
				Gtk.PropagationPhase ret = (Gtk.PropagationPhase) raw_ret;
				return ret;
			}
			set  {
				gtk_event_controller_set_propagation_phase(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_event_controller_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_event_controller_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_event_controller_handle_event(IntPtr raw, IntPtr evnt);

		public bool HandleEvent(Gdk.Event evnt) {
			bool raw_ret = gtk_event_controller_handle_event(Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_event_controller_reset(IntPtr raw);

		public void Reset() {
			gtk_event_controller_reset(Handle);
		}

#endregion
	}
}
