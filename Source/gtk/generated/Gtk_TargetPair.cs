// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TargetPair : IEquatable<TargetPair> {

		private IntPtr _target;
		public Gdk.Atom Target {
			get {
				return _target == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (_target, typeof (Gdk.Atom), false);
			}
			set {
				_target = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public uint Flags;
		public uint Info;

		public static Gtk.TargetPair Zero = new Gtk.TargetPair ();

		public static Gtk.TargetPair New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.TargetPair.Zero;
			return (Gtk.TargetPair) Marshal.PtrToStructure (raw, typeof (Gtk.TargetPair));
		}

		public bool Equals (TargetPair other)
		{
			return true && Target.Equals (other.Target) && Flags.Equals (other.Flags) && Info.Equals (other.Info);
		}

		public override bool Equals (object other)
		{
			return other is TargetPair && Equals ((TargetPair) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Target.GetHashCode () ^ Flags.GetHashCode () ^ Info.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
