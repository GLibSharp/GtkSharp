// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Drag {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_begin(IntPtr widget, IntPtr targets, int actions, int button, IntPtr evnt);

		[Obsolete]
		public static Gdk.DragContext Begin(Gtk.Widget widget, Gtk.TargetList targets, Gdk.DragAction actions, int button, Gdk.Event evnt) {
			IntPtr raw_ret = gtk_drag_begin(widget == null ? IntPtr.Zero : widget.Handle, targets == null ? IntPtr.Zero : targets.Handle, (int) actions, button, evnt == null ? IntPtr.Zero : evnt.Handle);
			Gdk.DragContext ret = GLib.Object.GetObject(raw_ret) as Gdk.DragContext;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_begin_with_coordinates(IntPtr widget, IntPtr targets, int actions, int button, IntPtr evnt, int x, int y);

		public static Gdk.DragContext BeginWithCoordinates(Gtk.Widget widget, Gtk.TargetList targets, Gdk.DragAction actions, int button, Gdk.Event evnt, int x, int y) {
			IntPtr raw_ret = gtk_drag_begin_with_coordinates(widget == null ? IntPtr.Zero : widget.Handle, targets == null ? IntPtr.Zero : targets.Handle, (int) actions, button, evnt == null ? IntPtr.Zero : evnt.Handle, x, y);
			Gdk.DragContext ret = GLib.Object.GetObject(raw_ret) as Gdk.DragContext;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_cancel(IntPtr context);

		public static void Cancel(Gdk.DragContext context) {
			gtk_drag_cancel(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_drag_check_threshold(IntPtr widget, int start_x, int start_y, int current_x, int current_y);

		public static bool CheckThreshold(Gtk.Widget widget, int start_x, int start_y, int current_x, int current_y) {
			bool raw_ret = gtk_drag_check_threshold(widget == null ? IntPtr.Zero : widget.Handle, start_x, start_y, current_x, current_y);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_add_image_targets(IntPtr widget);

		public static void DestAddImageTargets(Gtk.Widget widget) {
			gtk_drag_dest_add_image_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_add_text_targets(IntPtr widget);

		public static void DestAddTextTargets(Gtk.Widget widget) {
			gtk_drag_dest_add_text_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_add_uri_targets(IntPtr widget);

		public static void DestAddUriTargets(Gtk.Widget widget) {
			gtk_drag_dest_add_uri_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_dest_find_target(IntPtr widget, IntPtr context, IntPtr target_list);

		public static Gdk.Atom DestFindTarget(Gtk.Widget widget, Gdk.DragContext context, Gtk.TargetList target_list) {
			IntPtr raw_ret = gtk_drag_dest_find_target(widget == null ? IntPtr.Zero : widget.Handle, context == null ? IntPtr.Zero : context.Handle, target_list == null ? IntPtr.Zero : target_list.Handle);
			Gdk.Atom ret = raw_ret == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Atom), false);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_dest_get_target_list(IntPtr widget);

		public static Gtk.TargetList DestGetTargetList(Gtk.Widget widget) {
			IntPtr raw_ret = gtk_drag_dest_get_target_list(widget == null ? IntPtr.Zero : widget.Handle);
			Gtk.TargetList ret = raw_ret == IntPtr.Zero ? null : (Gtk.TargetList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TargetList), false);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_drag_dest_get_track_motion(IntPtr widget);

		public static bool DestGetTrackMotion(Gtk.Widget widget) {
			bool raw_ret = gtk_drag_dest_get_track_motion(widget == null ? IntPtr.Zero : widget.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_set(IntPtr widget, int flags, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public static void DestSet(Gtk.Widget widget, Gtk.DestDefaults flags, Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_drag_dest_set(widget == null ? IntPtr.Zero : widget.Handle, (int) flags, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_set_proxy(IntPtr widget, IntPtr proxy_window, int protocol, bool use_coordinates);

		[Obsolete]
		public static void DestSetProxy(Gtk.Widget widget, Gdk.Window proxy_window, Gdk.DragProtocol protocol, bool use_coordinates) {
			gtk_drag_dest_set_proxy(widget == null ? IntPtr.Zero : widget.Handle, proxy_window == null ? IntPtr.Zero : proxy_window.Handle, (int) protocol, use_coordinates);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_set_target_list(IntPtr widget, IntPtr target_list);

		public static void DestSetTargetList(Gtk.Widget widget, Gtk.TargetList target_list) {
			gtk_drag_dest_set_target_list(widget == null ? IntPtr.Zero : widget.Handle, target_list == null ? IntPtr.Zero : target_list.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_set_track_motion(IntPtr widget, bool track_motion);

		public static void DestSetTrackMotion(Gtk.Widget widget, bool track_motion) {
			gtk_drag_dest_set_track_motion(widget == null ? IntPtr.Zero : widget.Handle, track_motion);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_dest_unset(IntPtr widget);

		public static void DestUnset(Gtk.Widget widget) {
			gtk_drag_dest_unset(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_finish(IntPtr context, bool success, bool del, uint time_);

		public static void Finish(Gdk.DragContext context, bool success, bool del, uint time_) {
			gtk_drag_finish(context == null ? IntPtr.Zero : context.Handle, success, del, time_);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_get_data(IntPtr widget, IntPtr context, IntPtr target, uint time_);

		public static void GetData(Gtk.Widget widget, Gdk.DragContext context, Gdk.Atom target, uint time_) {
			gtk_drag_get_data(widget == null ? IntPtr.Zero : widget.Handle, context == null ? IntPtr.Zero : context.Handle, target == null ? IntPtr.Zero : target.Handle, time_);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_get_source_widget(IntPtr context);

		public static Gtk.Widget GetSourceWidget(Gdk.DragContext context) {
			IntPtr raw_ret = gtk_drag_get_source_widget(context == null ? IntPtr.Zero : context.Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_highlight(IntPtr widget);

		public static void Highlight(Gtk.Widget widget) {
			gtk_drag_highlight(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_gicon(IntPtr context, IntPtr icon, int hot_x, int hot_y);

		public static void SetIconGicon(Gdk.DragContext context, GLib.IIcon icon, int hot_x, int hot_y) {
			gtk_drag_set_icon_gicon(context == null ? IntPtr.Zero : context.Handle, icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle), hot_x, hot_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_name(IntPtr context, IntPtr icon_name, int hot_x, int hot_y);

		public static void SetIconName(Gdk.DragContext context, string icon_name, int hot_x, int hot_y) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_drag_set_icon_name(context == null ? IntPtr.Zero : context.Handle, native_icon_name, hot_x, hot_y);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_pixbuf(IntPtr context, IntPtr pixbuf, int hot_x, int hot_y);

		public static void SetIconPixbuf(Gdk.DragContext context, Gdk.Pixbuf pixbuf, int hot_x, int hot_y) {
			gtk_drag_set_icon_pixbuf(context == null ? IntPtr.Zero : context.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, hot_x, hot_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_stock(IntPtr context, IntPtr stock_id, int hot_x, int hot_y);

		[Obsolete]
		public static void SetIconStock(Gdk.DragContext context, string stock_id, int hot_x, int hot_y) {
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_drag_set_icon_stock(context == null ? IntPtr.Zero : context.Handle, native_stock_id, hot_x, hot_y);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_surface(IntPtr context, IntPtr surface);

		public static void SetIconSurface(Gdk.DragContext context, Cairo.Surface surface) {
			gtk_drag_set_icon_surface(context == null ? IntPtr.Zero : context.Handle, surface.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_set_icon_widget(IntPtr context, IntPtr widget, int hot_x, int hot_y);

		public static void SetIconWidget(Gdk.DragContext context, Gtk.Widget widget, int hot_x, int hot_y) {
			gtk_drag_set_icon_widget(context == null ? IntPtr.Zero : context.Handle, widget == null ? IntPtr.Zero : widget.Handle, hot_x, hot_y);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_add_image_targets(IntPtr widget);

		public static void SourceAddImageTargets(Gtk.Widget widget) {
			gtk_drag_source_add_image_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_add_text_targets(IntPtr widget);

		public static void SourceAddTextTargets(Gtk.Widget widget) {
			gtk_drag_source_add_text_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_add_uri_targets(IntPtr widget);

		public static void SourceAddUriTargets(Gtk.Widget widget) {
			gtk_drag_source_add_uri_targets(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_drag_source_get_target_list(IntPtr widget);

		public static Gtk.TargetList SourceGetTargetList(Gtk.Widget widget) {
			IntPtr raw_ret = gtk_drag_source_get_target_list(widget == null ? IntPtr.Zero : widget.Handle);
			Gtk.TargetList ret = raw_ret == IntPtr.Zero ? null : (Gtk.TargetList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TargetList), false);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set(IntPtr widget, int start_button_mask, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public static void SourceSet(Gtk.Widget widget, Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_drag_source_set(widget == null ? IntPtr.Zero : widget.Handle, (int) start_button_mask, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set_icon_gicon(IntPtr widget, IntPtr icon);

		public static void SourceSetIconGicon(Gtk.Widget widget, GLib.IIcon icon) {
			gtk_drag_source_set_icon_gicon(widget == null ? IntPtr.Zero : widget.Handle, icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set_icon_name(IntPtr widget, IntPtr icon_name);

		public static void SourceSetIconName(Gtk.Widget widget, string icon_name) {
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			gtk_drag_source_set_icon_name(widget == null ? IntPtr.Zero : widget.Handle, native_icon_name);
			GLib.Marshaller.Free (native_icon_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set_icon_pixbuf(IntPtr widget, IntPtr pixbuf);

		public static void SourceSetIconPixbuf(Gtk.Widget widget, Gdk.Pixbuf pixbuf) {
			gtk_drag_source_set_icon_pixbuf(widget == null ? IntPtr.Zero : widget.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set_icon_stock(IntPtr widget, IntPtr stock_id);

		[Obsolete]
		public static void SourceSetIconStock(Gtk.Widget widget, string stock_id) {
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			gtk_drag_source_set_icon_stock(widget == null ? IntPtr.Zero : widget.Handle, native_stock_id);
			GLib.Marshaller.Free (native_stock_id);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_set_target_list(IntPtr widget, IntPtr target_list);

		public static void SourceSetTargetList(Gtk.Widget widget, Gtk.TargetList target_list) {
			gtk_drag_source_set_target_list(widget == null ? IntPtr.Zero : widget.Handle, target_list == null ? IntPtr.Zero : target_list.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_source_unset(IntPtr widget);

		public static void SourceUnset(Gtk.Widget widget) {
			gtk_drag_source_unset(widget == null ? IntPtr.Zero : widget.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_drag_unhighlight(IntPtr widget);

		public static void Unhighlight(Gtk.Widget widget) {
			gtk_drag_unhighlight(widget == null ? IntPtr.Zero : widget.Handle);
		}

#endregion
	}
}
