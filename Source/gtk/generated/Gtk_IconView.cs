// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class IconView : Gtk.Container, Gtk.ICellLayout, Gtk.IScrollable {

		public IconView (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_new();

		public IconView () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconView)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_icon_view_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_new_with_area(IntPtr area);

		public IconView (Gtk.CellArea area) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconView)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_icon_view_new_with_area(area == null ? IntPtr.Zero : area.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_new_with_model(IntPtr model);

		public IconView (Gtk.ITreeModel model) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconView)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (model != null) {
					names.Add ("model");
					vals.Add (new GLib.Value (model));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_icon_view_new_with_model(model == null ? IntPtr.Zero : ((model is GLib.Object) ? (model as GLib.Object).Handle : (model as Gtk.TreeModelAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_selection_mode(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_selection_mode(IntPtr raw, int mode);

		[GLib.Property ("selection-mode")]
		public Gtk.SelectionMode SelectionMode {
			get  {
				int raw_ret = gtk_icon_view_get_selection_mode(Handle);
				Gtk.SelectionMode ret = (Gtk.SelectionMode) raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_selection_mode(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_pixbuf_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_pixbuf_column(IntPtr raw, int column);

		[GLib.Property ("pixbuf-column")]
		public int PixbufColumn {
			get  {
				int raw_ret = gtk_icon_view_get_pixbuf_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_pixbuf_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_text_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_text_column(IntPtr raw, int column);

		[GLib.Property ("text-column")]
		public int TextColumn {
			get  {
				int raw_ret = gtk_icon_view_get_text_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_text_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_markup_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_markup_column(IntPtr raw, int column);

		[GLib.Property ("markup-column")]
		public int MarkupColumn {
			get  {
				int raw_ret = gtk_icon_view_get_markup_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_markup_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_model(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_model(IntPtr raw, IntPtr model);

		[GLib.Property ("model")]
		public Gtk.ITreeModel Model {
			get  {
				IntPtr raw_ret = gtk_icon_view_get_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				gtk_icon_view_set_model(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as Gtk.TreeModelAdapter).Handle));
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_columns(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_columns(IntPtr raw, int columns);

		[GLib.Property ("columns")]
		public int Columns {
			get  {
				int raw_ret = gtk_icon_view_get_columns(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_columns(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_width(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_item_width(IntPtr raw, int item_width);

		[GLib.Property ("item-width")]
		public int ItemWidth {
			get  {
				int raw_ret = gtk_icon_view_get_item_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_item_width(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_spacing(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_spacing(IntPtr raw, int spacing);

		[GLib.Property ("spacing")]
		public int Spacing {
			get  {
				int raw_ret = gtk_icon_view_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_row_spacing(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_row_spacing(IntPtr raw, int row_spacing);

		[GLib.Property ("row-spacing")]
		public int RowSpacing {
			get  {
				int raw_ret = gtk_icon_view_get_row_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_row_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_column_spacing(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_column_spacing(IntPtr raw, int column_spacing);

		[GLib.Property ("column-spacing")]
		public int ColumnSpacing {
			get  {
				int raw_ret = gtk_icon_view_get_column_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_column_spacing(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_margin(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_margin(IntPtr raw, int margin);

		[GLib.Property ("margin")]
		public new int Margin {
			get  {
				int raw_ret = gtk_icon_view_get_margin(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_margin(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_orientation(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_item_orientation(IntPtr raw, int orientation);

		[GLib.Property ("item-orientation")]
		public Gtk.Orientation ItemOrientation {
			get  {
				int raw_ret = gtk_icon_view_get_item_orientation(Handle);
				Gtk.Orientation ret = (Gtk.Orientation) raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_item_orientation(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_reorderable(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_reorderable(IntPtr raw, bool reorderable);

		[GLib.Property ("reorderable")]
		public bool Reorderable {
			get  {
				bool raw_ret = gtk_icon_view_get_reorderable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_reorderable(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_tooltip_column(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_column(IntPtr raw, int column);

		[GLib.Property ("tooltip-column")]
		public int TooltipColumn {
			get  {
				int raw_ret = gtk_icon_view_get_tooltip_column(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_tooltip_column(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_padding(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_item_padding(IntPtr raw, int item_padding);

		[GLib.Property ("item-padding")]
		public int ItemPadding {
			get  {
				int raw_ret = gtk_icon_view_get_item_padding(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_item_padding(Handle, value);
			}
		}

		[GLib.Property ("cell-area")]
		public Gtk.CellArea CellArea {
			get {
				GLib.Value val = GetProperty ("cell-area");
				Gtk.CellArea ret = (Gtk.CellArea) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_activate_on_single_click(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_activate_on_single_click(IntPtr raw, bool single);

		[GLib.Property ("activate-on-single-click")]
		public bool ActivateOnSingleClick {
			get  {
				bool raw_ret = gtk_icon_view_get_activate_on_single_click(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_icon_view_set_activate_on_single_click(Handle, value);
			}
		}

		[GLib.Property ("selection-box-color")]
		public Gdk.Color SelectionBoxColor {
			get {
				GLib.Value val = GetProperty ("selection-box-color");
				Gdk.Color ret = (Gdk.Color) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Signal("select-all")]
		public event System.EventHandler AllSelected {
			add {
				this.AddSignalHandler ("select-all", value);
			}
			remove {
				this.RemoveSignalHandler ("select-all", value);
			}
		}

		[GLib.Signal("unselect-all")]
		public event System.EventHandler AllUnselected {
			add {
				this.AddSignalHandler ("unselect-all", value);
			}
			remove {
				this.RemoveSignalHandler ("unselect-all", value);
			}
		}

		[GLib.Signal("move-cursor")]
		public event Gtk.MoveCursorHandler MoveCursor {
			add {
				this.AddSignalHandler ("move-cursor", value, typeof (Gtk.MoveCursorArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-cursor", value);
			}
		}

		[GLib.Signal("item-activated")]
		public event Gtk.ItemActivatedHandler ItemActivated {
			add {
				this.AddSignalHandler ("item-activated", value, typeof (Gtk.ItemActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("item-activated", value);
			}
		}

		[GLib.Signal("selection-changed")]
		public event System.EventHandler SelectionChanged {
			add {
				this.AddSignalHandler ("selection-changed", value);
			}
			remove {
				this.RemoveSignalHandler ("selection-changed", value);
			}
		}

		[GLib.Signal("toggle-cursor-item")]
		public event System.EventHandler ToggleCursorItem {
			add {
				this.AddSignalHandler ("toggle-cursor-item", value);
			}
			remove {
				this.RemoveSignalHandler ("toggle-cursor-item", value);
			}
		}

		[GLib.Signal("select-cursor-item")]
		public event System.EventHandler SelectCursorItem {
			add {
				this.AddSignalHandler ("select-cursor-item", value);
			}
			remove {
				this.RemoveSignalHandler ("select-cursor-item", value);
			}
		}

		[GLib.Signal("activate-cursor-item")]
		public event Gtk.ActivateCursorItemHandler ActivateCursorItem {
			add {
				this.AddSignalHandler ("activate-cursor-item", value, typeof (Gtk.ActivateCursorItemArgs));
			}
			remove {
				this.RemoveSignalHandler ("activate-cursor-item", value);
			}
		}

		static ItemActivatedNativeDelegate ItemActivated_cb_delegate;
		static ItemActivatedNativeDelegate ItemActivatedVMCallback {
			get {
				if (ItemActivated_cb_delegate == null)
					ItemActivated_cb_delegate = new ItemActivatedNativeDelegate (ItemActivated_cb);
				return ItemActivated_cb_delegate;
			}
		}

		static void OverrideItemActivated (GLib.GType gtype)
		{
			OverrideItemActivated (gtype, ItemActivatedVMCallback);
		}

		static void OverrideItemActivated (GLib.GType gtype, ItemActivatedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("item_activated"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ItemActivatedNativeDelegate (IntPtr inst, IntPtr path);

		static void ItemActivated_cb (IntPtr inst, IntPtr path)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnItemActivated (path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideItemActivated")]
		protected virtual void OnItemActivated (Gtk.TreePath path)
		{
			InternalItemActivated (path);
		}

		private void InternalItemActivated (Gtk.TreePath path)
		{
			ItemActivatedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("item_activated"));
				unmanaged = (ItemActivatedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ItemActivatedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		static SelectionChangedNativeDelegate SelectionChanged_cb_delegate;
		static SelectionChangedNativeDelegate SelectionChangedVMCallback {
			get {
				if (SelectionChanged_cb_delegate == null)
					SelectionChanged_cb_delegate = new SelectionChangedNativeDelegate (SelectionChanged_cb);
				return SelectionChanged_cb_delegate;
			}
		}

		static void OverrideSelectionChanged (GLib.GType gtype)
		{
			OverrideSelectionChanged (gtype, SelectionChangedVMCallback);
		}

		static void OverrideSelectionChanged (GLib.GType gtype, SelectionChangedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("selection_changed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionChangedNativeDelegate (IntPtr inst);

		static void SelectionChanged_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnSelectionChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideSelectionChanged")]
		protected virtual void OnSelectionChanged ()
		{
			InternalSelectionChanged ();
		}

		private void InternalSelectionChanged ()
		{
			SelectionChangedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("selection_changed"));
				unmanaged = (SelectionChangedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SelectionChangedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static AllSelectedNativeDelegate AllSelected_cb_delegate;
		static AllSelectedNativeDelegate AllSelectedVMCallback {
			get {
				if (AllSelected_cb_delegate == null)
					AllSelected_cb_delegate = new AllSelectedNativeDelegate (AllSelected_cb);
				return AllSelected_cb_delegate;
			}
		}

		static void OverrideAllSelected (GLib.GType gtype)
		{
			OverrideAllSelected (gtype, AllSelectedVMCallback);
		}

		static void OverrideAllSelected (GLib.GType gtype, AllSelectedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("select_all"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllSelectedNativeDelegate (IntPtr inst);

		static void AllSelected_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnAllSelected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideAllSelected")]
		protected virtual void OnAllSelected ()
		{
			InternalAllSelected ();
		}

		private void InternalAllSelected ()
		{
			AllSelectedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("select_all"));
				unmanaged = (AllSelectedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(AllSelectedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static AllUnselectedNativeDelegate AllUnselected_cb_delegate;
		static AllUnselectedNativeDelegate AllUnselectedVMCallback {
			get {
				if (AllUnselected_cb_delegate == null)
					AllUnselected_cb_delegate = new AllUnselectedNativeDelegate (AllUnselected_cb);
				return AllUnselected_cb_delegate;
			}
		}

		static void OverrideAllUnselected (GLib.GType gtype)
		{
			OverrideAllUnselected (gtype, AllUnselectedVMCallback);
		}

		static void OverrideAllUnselected (GLib.GType gtype, AllUnselectedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("unselect_all"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AllUnselectedNativeDelegate (IntPtr inst);

		static void AllUnselected_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnAllUnselected ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideAllUnselected")]
		protected virtual void OnAllUnselected ()
		{
			InternalAllUnselected ();
		}

		private void InternalAllUnselected ()
		{
			AllUnselectedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("unselect_all"));
				unmanaged = (AllUnselectedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(AllUnselectedNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static SelectCursorItemNativeDelegate SelectCursorItem_cb_delegate;
		static SelectCursorItemNativeDelegate SelectCursorItemVMCallback {
			get {
				if (SelectCursorItem_cb_delegate == null)
					SelectCursorItem_cb_delegate = new SelectCursorItemNativeDelegate (SelectCursorItem_cb);
				return SelectCursorItem_cb_delegate;
			}
		}

		static void OverrideSelectCursorItem (GLib.GType gtype)
		{
			OverrideSelectCursorItem (gtype, SelectCursorItemVMCallback);
		}

		static void OverrideSelectCursorItem (GLib.GType gtype, SelectCursorItemNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_item"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectCursorItemNativeDelegate (IntPtr inst);

		static void SelectCursorItem_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnSelectCursorItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideSelectCursorItem")]
		protected virtual void OnSelectCursorItem ()
		{
			InternalSelectCursorItem ();
		}

		private void InternalSelectCursorItem ()
		{
			SelectCursorItemNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("select_cursor_item"));
				unmanaged = (SelectCursorItemNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SelectCursorItemNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ToggleCursorItemNativeDelegate ToggleCursorItem_cb_delegate;
		static ToggleCursorItemNativeDelegate ToggleCursorItemVMCallback {
			get {
				if (ToggleCursorItem_cb_delegate == null)
					ToggleCursorItem_cb_delegate = new ToggleCursorItemNativeDelegate (ToggleCursorItem_cb);
				return ToggleCursorItem_cb_delegate;
			}
		}

		static void OverrideToggleCursorItem (GLib.GType gtype)
		{
			OverrideToggleCursorItem (gtype, ToggleCursorItemVMCallback);
		}

		static void OverrideToggleCursorItem (GLib.GType gtype, ToggleCursorItemNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("toggle_cursor_item"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleCursorItemNativeDelegate (IntPtr inst);

		static void ToggleCursorItem_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				__obj.OnToggleCursorItem ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideToggleCursorItem")]
		protected virtual void OnToggleCursorItem ()
		{
			InternalToggleCursorItem ();
		}

		private void InternalToggleCursorItem ()
		{
			ToggleCursorItemNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("toggle_cursor_item"));
				unmanaged = (ToggleCursorItemNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ToggleCursorItemNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static MoveCursorNativeDelegate MoveCursor_cb_delegate;
		static MoveCursorNativeDelegate MoveCursorVMCallback {
			get {
				if (MoveCursor_cb_delegate == null)
					MoveCursor_cb_delegate = new MoveCursorNativeDelegate (MoveCursor_cb);
				return MoveCursor_cb_delegate;
			}
		}

		static void OverrideMoveCursor (GLib.GType gtype)
		{
			OverrideMoveCursor (gtype, MoveCursorVMCallback);
		}

		static void OverrideMoveCursor (GLib.GType gtype, MoveCursorNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("move_cursor"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MoveCursorNativeDelegate (IntPtr inst, int step, int count);

		static bool MoveCursor_cb (IntPtr inst, int step, int count)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				bool __result;
				__result = __obj.OnMoveCursor ((Gtk.MovementStep) step, count);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideMoveCursor")]
		protected virtual bool OnMoveCursor (Gtk.MovementStep step, int count)
		{
			return InternalMoveCursor (step, count);
		}

		private bool InternalMoveCursor (Gtk.MovementStep step, int count)
		{
			MoveCursorNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("move_cursor"));
				unmanaged = (MoveCursorNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(MoveCursorNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, (int) step, count);
			return __result;
		}

		static ActivateCursorItemNativeDelegate ActivateCursorItem_cb_delegate;
		static ActivateCursorItemNativeDelegate ActivateCursorItemVMCallback {
			get {
				if (ActivateCursorItem_cb_delegate == null)
					ActivateCursorItem_cb_delegate = new ActivateCursorItemNativeDelegate (ActivateCursorItem_cb);
				return ActivateCursorItem_cb_delegate;
			}
		}

		static void OverrideActivateCursorItem (GLib.GType gtype)
		{
			OverrideActivateCursorItem (gtype, ActivateCursorItemVMCallback);
		}

		static void OverrideActivateCursorItem (GLib.GType gtype, ActivateCursorItemNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("activate_cursor_item"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ActivateCursorItemNativeDelegate (IntPtr inst);

		static bool ActivateCursorItem_cb (IntPtr inst)
		{
			try {
				IconView __obj = GLib.Object.GetObject (inst, false) as IconView;
				bool __result;
				__result = __obj.OnActivateCursorItem ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.IconView), ConnectionMethod="OverrideActivateCursorItem")]
		protected virtual bool OnActivateCursorItem ()
		{
			return InternalActivateCursorItem ();
		}

		private bool InternalActivateCursorItem ()
		{
			ActivateCursorItemNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("activate_cursor_item"));
				unmanaged = (ActivateCursorItemNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ActivateCursorItemNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("item_activated"
							, Gtk.Container.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // item_activated
							, null
							, "selection_changed"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("selection_changed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // selection_changed
							, "item_activated"
							, "select_all"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("select_all"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // select_all
							, "selection_changed"
							, "unselect_all"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("unselect_all"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // unselect_all
							, "select_all"
							, "select_cursor_item"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("select_cursor_item"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // select_cursor_item
							, "unselect_all"
							, "toggle_cursor_item"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("toggle_cursor_item"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // toggle_cursor_item
							, "select_cursor_item"
							, "move_cursor"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("move_cursor"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // move_cursor
							, "toggle_cursor_item"
							, "activate_cursor_item"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("activate_cursor_item"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // activate_cursor_item
							, "move_cursor"
							, "_gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, "activate_cursor_item"
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_convert_widget_to_bin_window_coords(IntPtr raw, int wx, int wy, out int bx, out int by);

		public void ConvertWidgetToBinWindowCoords(int wx, int wy, out int bx, out int by) {
			gtk_icon_view_convert_widget_to_bin_window_coords(Handle, wx, wy, out bx, out by);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_create_drag_icon(IntPtr raw, IntPtr path);

		public Cairo.Surface CreateDragIcon(Gtk.TreePath path) {
			IntPtr raw_ret = gtk_icon_view_create_drag_icon(Handle, path == null ? IntPtr.Zero : path.Handle);
			Cairo.Surface ret = Cairo.Surface.Lookup (raw_ret, true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_enable_model_drag_dest(IntPtr raw, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragDest(Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_icon_view_enable_model_drag_dest(Handle, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_enable_model_drag_source(IntPtr raw, int start_button_mask, Gtk.TargetEntry[] targets, int n_targets, int actions);

		public void EnableModelDragSource(Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions) {
			gtk_icon_view_enable_model_drag_source(Handle, (int) start_button_mask, targets, (targets == null ? 0 : targets.Length), (int) actions);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_cell_rect(IntPtr raw, IntPtr path, IntPtr cell, IntPtr rect);

		public bool GetCellRect(Gtk.TreePath path, Gtk.CellRenderer cell, Gdk.Rectangle rect) {
			IntPtr native_rect = GLib.Marshaller.StructureToPtrAlloc (rect);
			bool raw_ret = gtk_icon_view_get_cell_rect(Handle, path == null ? IntPtr.Zero : path.Handle, cell == null ? IntPtr.Zero : cell.Handle, native_rect);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_rect);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_cursor(IntPtr raw, out IntPtr path, out IntPtr cell);

		public bool GetCursor(out Gtk.TreePath path, out Gtk.CellRenderer cell) {
			IntPtr native_path;
			IntPtr native_cell;
			bool raw_ret = gtk_icon_view_get_cursor(Handle, out native_path, out native_cell);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			cell = GLib.Object.GetObject(native_cell) as Gtk.CellRenderer;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_dest_item_at_pos(IntPtr raw, int drag_x, int drag_y, out IntPtr path, out int pos);

		public bool GetDestItemAtPos(int drag_x, int drag_y, out Gtk.TreePath path, out Gtk.IconViewDropPosition pos) {
			IntPtr native_path;
			int native_pos;
			bool raw_ret = gtk_icon_view_get_dest_item_at_pos(Handle, drag_x, drag_y, out native_path, out native_pos);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.IconViewDropPosition) native_pos;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_get_drag_dest_item(IntPtr raw, out IntPtr path, out int pos);

		public void GetDragDestItem(out Gtk.TreePath path, out Gtk.IconViewDropPosition pos) {
			IntPtr native_path;
			int native_pos;
			gtk_icon_view_get_drag_dest_item(Handle, out native_path, out native_pos);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			pos = (Gtk.IconViewDropPosition) native_pos;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_item_at_pos(IntPtr raw, int x, int y, out IntPtr path, out IntPtr cell);

		public bool GetItemAtPos(int x, int y, out Gtk.TreePath path, out Gtk.CellRenderer cell) {
			IntPtr native_path;
			IntPtr native_cell;
			bool raw_ret = gtk_icon_view_get_item_at_pos(Handle, x, y, out native_path, out native_cell);
			bool ret = raw_ret;
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), true);
			cell = GLib.Object.GetObject(native_cell) as Gtk.CellRenderer;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_column(IntPtr raw, IntPtr path);

		public int GetItemColumn(Gtk.TreePath path) {
			int raw_ret = gtk_icon_view_get_item_column(Handle, path == null ? IntPtr.Zero : path.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_icon_view_get_item_row(IntPtr raw, IntPtr path);

		public int GetItemRow(Gtk.TreePath path) {
			int raw_ret = gtk_icon_view_get_item_row(Handle, path == null ? IntPtr.Zero : path.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_path_at_pos(IntPtr raw, int x, int y);

		public Gtk.TreePath GetPathAtPos(int x, int y) {
			IntPtr raw_ret = gtk_icon_view_get_path_at_pos(Handle, x, y);
			Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_selected_items(IntPtr raw);

		public Gtk.TreePath[] SelectedItems { 
			get {
				IntPtr raw_ret = gtk_icon_view_get_selected_items(Handle);
				Gtk.TreePath[] ret = (Gtk.TreePath[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, true, typeof(Gtk.TreePath));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_tooltip_context(IntPtr raw, out int x, out int y, bool keyboard_tip, out IntPtr model, out IntPtr path, IntPtr iter);

		public bool GetTooltipContext(out int x, out int y, bool keyboard_tip, out Gtk.ITreeModel model, out Gtk.TreePath path, out Gtk.TreeIter iter) {
			IntPtr native_model;
			IntPtr native_path;
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TreeIter)));
			bool raw_ret = gtk_icon_view_get_tooltip_context(Handle, out x, out y, keyboard_tip, out native_model, out native_path, native_iter);
			bool ret = raw_ret;
			model = Gtk.TreeModelAdapter.GetObject (native_model, false);
			path = native_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_path, typeof (Gtk.TreePath), false);
			iter = Gtk.TreeIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_icon_view_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_icon_view_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_get_visible_range(IntPtr raw, out IntPtr start_path, out IntPtr end_path);

		public bool GetVisibleRange(out Gtk.TreePath start_path, out Gtk.TreePath end_path) {
			IntPtr native_start_path;
			IntPtr native_end_path;
			bool raw_ret = gtk_icon_view_get_visible_range(Handle, out native_start_path, out native_end_path);
			bool ret = raw_ret;
			start_path = native_start_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_start_path, typeof (Gtk.TreePath), true);
			end_path = native_end_path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (native_end_path, typeof (Gtk.TreePath), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_icon_view_path_is_selected(IntPtr raw, IntPtr path);

		public bool PathIsSelected(Gtk.TreePath path) {
			bool raw_ret = gtk_icon_view_path_is_selected(Handle, path == null ? IntPtr.Zero : path.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_select_all(IntPtr raw);

		public void SelectAll() {
			gtk_icon_view_select_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_select_path(IntPtr raw, IntPtr path);

		public void SelectPath(Gtk.TreePath path) {
			gtk_icon_view_select_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_selected_foreach(IntPtr raw, GtkSharp.IconViewForeachFuncNative func, IntPtr data);

		public void SelectedForeach(Gtk.IconViewForeachFunc func) {
			GtkSharp.IconViewForeachFuncWrapper func_wrapper = new GtkSharp.IconViewForeachFuncWrapper (func);
			gtk_icon_view_selected_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_cursor(IntPtr raw, IntPtr path, IntPtr cell, bool start_editing);

		public void SetCursor(Gtk.TreePath path, Gtk.CellRenderer cell, bool start_editing) {
			gtk_icon_view_set_cursor(Handle, path == null ? IntPtr.Zero : path.Handle, cell == null ? IntPtr.Zero : cell.Handle, start_editing);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_drag_dest_item(IntPtr raw, IntPtr path, int pos);

		public void SetDragDestItem(Gtk.TreePath path, Gtk.IconViewDropPosition pos) {
			gtk_icon_view_set_drag_dest_item(Handle, path == null ? IntPtr.Zero : path.Handle, (int) pos);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_cell(IntPtr raw, IntPtr tooltip, IntPtr path, IntPtr cell);

		public void SetTooltipCell(Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.CellRenderer cell) {
			gtk_icon_view_set_tooltip_cell(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_set_tooltip_item(IntPtr raw, IntPtr tooltip, IntPtr path);

		public void SetTooltipItem(Gtk.Tooltip tooltip, Gtk.TreePath path) {
			gtk_icon_view_set_tooltip_item(Handle, tooltip == null ? IntPtr.Zero : tooltip.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unselect_all(IntPtr raw);

		public void UnselectAll() {
			gtk_icon_view_unselect_all(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unselect_path(IntPtr raw, IntPtr path);

		public void UnselectPath(Gtk.TreePath path) {
			gtk_icon_view_unselect_path(Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unset_model_drag_dest(IntPtr raw);

		public void UnsetModelDragDest() {
			gtk_icon_view_unset_model_drag_dest(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_icon_view_unset_model_drag_source(IntPtr raw);

		public void UnsetModelDragSource() {
			gtk_icon_view_unset_model_drag_source(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_add_attribute(IntPtr raw, IntPtr cell, IntPtr attribute, int column);

		public void AddAttribute(Gtk.CellRenderer cell, string attribute, int column) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			gtk_cell_layout_add_attribute(Handle, cell == null ? IntPtr.Zero : cell.Handle, native_attribute, column);
			GLib.Marshaller.Free (native_attribute);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear(IntPtr raw);

		public void Clear() {
			gtk_cell_layout_clear(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_clear_attributes(IntPtr raw, IntPtr cell);

		public void ClearAttributes(Gtk.CellRenderer cell) {
			gtk_cell_layout_clear_attributes(Handle, cell == null ? IntPtr.Zero : cell.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_area(IntPtr raw);

		public Gtk.CellArea Area { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_area(Handle);
				Gtk.CellArea ret = GLib.Object.GetObject(raw_ret) as Gtk.CellArea;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_cell_layout_get_cells(IntPtr raw);

		public Gtk.CellRenderer[] Cells { 
			get {
				IntPtr raw_ret = gtk_cell_layout_get_cells(Handle);
				Gtk.CellRenderer[] ret = (Gtk.CellRenderer[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Gtk.CellRenderer));
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_end(IntPtr raw, IntPtr cell, bool expand);

		public void PackEnd(Gtk.CellRenderer cell, bool expand) {
			gtk_cell_layout_pack_end(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_pack_start(IntPtr raw, IntPtr cell, bool expand);

		public void PackStart(Gtk.CellRenderer cell, bool expand) {
			gtk_cell_layout_pack_start(Handle, cell == null ? IntPtr.Zero : cell.Handle, expand);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_reorder(IntPtr raw, IntPtr cell, int position);

		public void Reorder(Gtk.CellRenderer cell, int position) {
			gtk_cell_layout_reorder(Handle, cell == null ? IntPtr.Zero : cell.Handle, position);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_cell_layout_set_cell_data_func(IntPtr raw, IntPtr cell, GtkSharp.CellLayoutDataFuncNative func, IntPtr func_data, GLib.DestroyNotify destroy);

		public void SetCellDataFunc(Gtk.CellRenderer cell, Gtk.CellLayoutDataFunc func) {
			GtkSharp.CellLayoutDataFuncWrapper func_wrapper = new GtkSharp.CellLayoutDataFuncWrapper (func);
			IntPtr func_data;
			GLib.DestroyNotify destroy;
			if (func == null) {
				func_data = IntPtr.Zero;
				destroy = null;
			} else {
				func_data = (IntPtr) GCHandle.Alloc (func_wrapper);
				destroy = GLib.DestroyHelper.NotifyHandler;
			}
			gtk_cell_layout_set_cell_data_func(Handle, cell == null ? IntPtr.Zero : cell.Handle, func_wrapper.NativeDelegate, func_data, destroy);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_scrollable_get_border(IntPtr raw, IntPtr border);

		public bool GetBorder(Gtk.Border border) {
			IntPtr native_border = GLib.Marshaller.StructureToPtrAlloc (border);
			bool raw_ret = gtk_scrollable_get_border(Handle, native_border);
			bool ret = raw_ret;
			Marshal.FreeHGlobal (native_border);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_hadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hadjustment(IntPtr raw, IntPtr hadjustment);

		[GLib.Property ("hadjustment")]
		public Gtk.Adjustment Hadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_hadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_hadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_scrollable_get_vadjustment(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vadjustment(IntPtr raw, IntPtr vadjustment);

		[GLib.Property ("vadjustment")]
		public Gtk.Adjustment Vadjustment {
			get  {
				IntPtr raw_ret = gtk_scrollable_get_vadjustment(Handle);
				Gtk.Adjustment ret = GLib.Object.GetObject(raw_ret) as Gtk.Adjustment;
				return ret;
			}
			set  {
				gtk_scrollable_set_vadjustment(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_hscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_hscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("hscroll-policy")]
		public Gtk.ScrollablePolicy HscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_hscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_hscroll_policy(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_scrollable_get_vscroll_policy(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_scrollable_set_vscroll_policy(IntPtr raw, int policy);

		[GLib.Property ("vscroll-policy")]
		public Gtk.ScrollablePolicy VscrollPolicy {
			get  {
				int raw_ret = gtk_scrollable_get_vscroll_policy(Handle);
				Gtk.ScrollablePolicy ret = (Gtk.ScrollablePolicy) raw_ret;
				return ret;
			}
			set  {
				gtk_scrollable_set_vscroll_policy(Handle, (int) value);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gtk.Container.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
