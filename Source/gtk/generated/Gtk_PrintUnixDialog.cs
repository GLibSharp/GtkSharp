// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PrintUnixDialog : Gtk.Dialog {

		public PrintUnixDialog (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_new(IntPtr title, IntPtr parent);

		public PrintUnixDialog (string title, Gtk.Window parent) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PrintUnixDialog)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("title");
				vals.Add (new GLib.Value (title));
				if (parent != null) {
					names.Add ("parent");
					vals.Add (new GLib.Value (parent));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			Raw = gtk_print_unix_dialog_new(native_title, parent == null ? IntPtr.Zero : parent.Handle);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_page_setup(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_page_setup(IntPtr raw, IntPtr page_setup);

		[GLib.Property ("page-setup")]
		public Gtk.PageSetup PageSetup {
			get  {
				IntPtr raw_ret = gtk_print_unix_dialog_get_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_page_setup(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_unix_dialog_get_current_page(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_current_page(IntPtr raw, int current_page);

		[GLib.Property ("current-page")]
		public int CurrentPage {
			get  {
				int raw_ret = gtk_print_unix_dialog_get_current_page(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_current_page(Handle, value);
			}
		}

		[GLib.Property ("print-settings")]
		public Gtk.PrintSettings PrintSettings {
			get {
				GLib.Value val = GetProperty ("print-settings");
				Gtk.PrintSettings ret = (Gtk.PrintSettings) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("print-settings", val);
				val.Dispose ();
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_selected_printer(IntPtr raw);

		[GLib.Property ("selected-printer")]
		public Gtk.Printer SelectedPrinter {
			get  {
				IntPtr raw_ret = gtk_print_unix_dialog_get_selected_printer(Handle);
				Gtk.Printer ret = GLib.Object.GetObject(raw_ret) as Gtk.Printer;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_print_unix_dialog_get_manual_capabilities(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_manual_capabilities(IntPtr raw, int capabilities);

		[GLib.Property ("manual-capabilities")]
		public Gtk.PrintCapabilities ManualCapabilities {
			get  {
				int raw_ret = gtk_print_unix_dialog_get_manual_capabilities(Handle);
				Gtk.PrintCapabilities ret = (Gtk.PrintCapabilities) raw_ret;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_manual_capabilities(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_unix_dialog_get_support_selection(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_support_selection(IntPtr raw, bool support_selection);

		[GLib.Property ("support-selection")]
		public bool SupportSelection {
			get  {
				bool raw_ret = gtk_print_unix_dialog_get_support_selection(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_support_selection(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_unix_dialog_get_has_selection(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_has_selection(IntPtr raw, bool has_selection);

		[GLib.Property ("has-selection")]
		public bool HasSelection {
			get  {
				bool raw_ret = gtk_print_unix_dialog_get_has_selection(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_has_selection(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_unix_dialog_get_embed_page_setup(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_embed_page_setup(IntPtr raw, bool embed);

		[GLib.Property ("embed-page-setup")]
		public bool EmbedPageSetup {
			get  {
				bool raw_ret = gtk_print_unix_dialog_get_embed_page_setup(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_print_unix_dialog_set_embed_page_setup(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_add_custom_tab(IntPtr raw, IntPtr child, IntPtr tab_label);

		public void AddCustomTab(Gtk.Widget child, Gtk.Widget tab_label) {
			gtk_print_unix_dialog_add_custom_tab(Handle, child == null ? IntPtr.Zero : child.Handle, tab_label == null ? IntPtr.Zero : tab_label.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_unix_dialog_get_page_setup_set(IntPtr raw);

		public bool PageSetupSet { 
			get {
				bool raw_ret = gtk_print_unix_dialog_get_page_setup_set(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_settings(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_unix_dialog_set_settings(IntPtr raw, IntPtr settings);

		public Gtk.PrintSettings Settings { 
			get {
				IntPtr raw_ret = gtk_print_unix_dialog_get_settings(Handle);
				Gtk.PrintSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.PrintSettings;
				return ret;
			}
			set {
				gtk_print_unix_dialog_set_settings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_unix_dialog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_print_unix_dialog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
