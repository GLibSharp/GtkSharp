// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Clipboard : GLib.Object {

		public Clipboard (IntPtr raw) : base(raw) {}

		protected Clipboard() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Signal("owner-change")]
		public event Gtk.OwnerChangeHandler OwnerChange {
			add {
				this.AddSignalHandler ("owner-change", value, typeof (Gtk.OwnerChangeArgs));
			}
			remove {
				this.RemoveSignalHandler ("owner-change", value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_clear(IntPtr raw);

		public void Clear() {
			gtk_clipboard_clear(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get(IntPtr selection);

		public static Gtk.Clipboard Get(Gdk.Atom selection) {
			IntPtr raw_ret = gtk_clipboard_get(selection == null ? IntPtr.Zero : selection.Handle);
			Gtk.Clipboard ret = GLib.Object.GetObject(raw_ret) as Gtk.Clipboard;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_default(IntPtr display);

		public static Gtk.Clipboard GetDefault(Gdk.Display display) {
			IntPtr raw_ret = gtk_clipboard_get_default(display == null ? IntPtr.Zero : display.Handle);
			Gtk.Clipboard ret = GLib.Object.GetObject(raw_ret) as Gtk.Clipboard;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_display(IntPtr raw);

		public Gdk.Display Display { 
			get {
				IntPtr raw_ret = gtk_clipboard_get_display(Handle);
				Gdk.Display ret = GLib.Object.GetObject(raw_ret) as Gdk.Display;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_for_display(IntPtr display, IntPtr selection);

		public static Gtk.Clipboard GetForDisplay(Gdk.Display display, Gdk.Atom selection) {
			IntPtr raw_ret = gtk_clipboard_get_for_display(display == null ? IntPtr.Zero : display.Handle, selection == null ? IntPtr.Zero : selection.Handle);
			Gtk.Clipboard ret = GLib.Object.GetObject(raw_ret) as Gtk.Clipboard;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_owner(IntPtr raw);

		public GLib.Object Owner { 
			get {
				IntPtr raw_ret = gtk_clipboard_get_owner(Handle);
				GLib.Object ret = GLib.Object.GetObject (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_selection(IntPtr raw);

		public Gdk.Atom Selection { 
			get {
				IntPtr raw_ret = gtk_clipboard_get_selection(Handle);
				Gdk.Atom ret = raw_ret == IntPtr.Zero ? null : (Gdk.Atom) GLib.Opaque.GetOpaque (raw_ret, typeof (Gdk.Atom), false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_clipboard_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_request_contents(IntPtr raw, IntPtr target, GtkSharp.ClipboardReceivedFuncNative cb, IntPtr user_data);

		public void RequestContents(Gdk.Atom target, Gtk.ClipboardReceivedFunc cb) {
			GtkSharp.ClipboardReceivedFuncWrapper cb_wrapper = new GtkSharp.ClipboardReceivedFuncWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_clipboard_request_contents(Handle, target == null ? IntPtr.Zero : target.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_request_image(IntPtr raw, GtkSharp.ClipboardImageReceivedFuncNative cb, IntPtr user_data);

		public void RequestImage(Gtk.ClipboardImageReceivedFunc cb) {
			GtkSharp.ClipboardImageReceivedFuncWrapper cb_wrapper = new GtkSharp.ClipboardImageReceivedFuncWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_clipboard_request_image(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_request_targets(IntPtr raw, GtkSharp.ClipboardTargetsReceivedFuncNative cb, IntPtr user_data);

		public void RequestTargets(Gtk.ClipboardTargetsReceivedFunc cb) {
			GtkSharp.ClipboardTargetsReceivedFuncWrapper cb_wrapper = new GtkSharp.ClipboardTargetsReceivedFuncWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_clipboard_request_targets(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_request_text(IntPtr raw, GtkSharp.ClipboardTextReceivedFuncNative cb, IntPtr user_data);

		public void RequestText(Gtk.ClipboardTextReceivedFunc cb) {
			GtkSharp.ClipboardTextReceivedFuncWrapper cb_wrapper = new GtkSharp.ClipboardTextReceivedFuncWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_clipboard_request_text(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_request_uris(IntPtr raw, GtkSharp.ClipboardURIReceivedFuncNative cb, IntPtr user_data);

		public void RequestUris(Gtk.ClipboardURIReceivedFunc cb) {
			GtkSharp.ClipboardURIReceivedFuncWrapper cb_wrapper = new GtkSharp.ClipboardURIReceivedFuncWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			gtk_clipboard_request_uris(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_set_can_store(IntPtr raw, IntPtr targets, int n_targets);

		public void SetCanStore(Gtk.TargetEntry targets, int n_targets) {
			IntPtr native_targets = GLib.Marshaller.StructureToPtrAlloc (targets);
			gtk_clipboard_set_can_store(Handle, native_targets, n_targets);
			Marshal.FreeHGlobal (native_targets);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_set_image(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf Image { 
			set {
				gtk_clipboard_set_image(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_set_text(IntPtr raw, IntPtr text, int len);

		public string Text { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_clipboard_set_text(Handle, native_value, System.Text.Encoding.UTF8.GetByteCount (value));
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_clipboard_store(IntPtr raw);

		public void Store() {
			gtk_clipboard_store(Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_wait_for_contents(IntPtr raw, IntPtr target);

		public Gtk.SelectionData WaitForContents(Gdk.Atom target) {
			IntPtr raw_ret = gtk_clipboard_wait_for_contents(Handle, target == null ? IntPtr.Zero : target.Handle);
			Gtk.SelectionData ret = raw_ret == IntPtr.Zero ? null : (Gtk.SelectionData) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SelectionData), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_wait_for_image(IntPtr raw);

		public Gdk.Pixbuf WaitForImage() {
			IntPtr raw_ret = gtk_clipboard_wait_for_image(Handle);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_for_targets(IntPtr raw, IntPtr targets, out int n_targets);

		public bool WaitForTargets(Gdk.Atom targets, out int n_targets) {
			bool raw_ret = gtk_clipboard_wait_for_targets(Handle, targets == null ? IntPtr.Zero : targets.Handle, out n_targets);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_wait_for_text(IntPtr raw);

		public string WaitForText() {
			IntPtr raw_ret = gtk_clipboard_wait_for_text(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_clipboard_wait_for_uris(IntPtr raw);

		public string WaitForUris() {
			IntPtr raw_ret = gtk_clipboard_wait_for_uris(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_is_image_available(IntPtr raw);

		public bool WaitIsImageAvailable() {
			bool raw_ret = gtk_clipboard_wait_is_image_available(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_is_rich_text_available(IntPtr raw, IntPtr buffer);

		public bool WaitIsRichTextAvailable(Gtk.TextBuffer buffer) {
			bool raw_ret = gtk_clipboard_wait_is_rich_text_available(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_is_target_available(IntPtr raw, IntPtr target);

		public bool WaitIsTargetAvailable(Gdk.Atom target) {
			bool raw_ret = gtk_clipboard_wait_is_target_available(Handle, target == null ? IntPtr.Zero : target.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_is_text_available(IntPtr raw);

		public bool WaitIsTextAvailable() {
			bool raw_ret = gtk_clipboard_wait_is_text_available(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_clipboard_wait_is_uris_available(IntPtr raw);

		public bool WaitIsUrisAvailable() {
			bool raw_ret = gtk_clipboard_wait_is_uris_available(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
