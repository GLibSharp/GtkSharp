// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate int KeySnoopFuncNative(IntPtr grab_widget, IntPtr evnt, IntPtr func_data);

	internal class KeySnoopFuncInvoker {

		KeySnoopFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~KeySnoopFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal KeySnoopFuncInvoker (KeySnoopFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal KeySnoopFuncInvoker (KeySnoopFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal KeySnoopFuncInvoker (KeySnoopFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.KeySnoopFunc Handler {
			get {
				return new Gtk.KeySnoopFunc(InvokeNative);
			}
		}

		int InvokeNative (Gtk.Widget grab_widget, Gdk.EventKey evnt)
		{
			int __result = native_cb (grab_widget == null ? IntPtr.Zero : grab_widget.Handle, evnt == null ? IntPtr.Zero : evnt.Handle, __data);
			return __result;
		}
	}

	internal class KeySnoopFuncWrapper {

		public int NativeCallback (IntPtr grab_widget, IntPtr evnt, IntPtr func_data)
		{
			try {
				int __ret = managed (GLib.Object.GetObject(grab_widget) as Gtk.Widget, new Gdk.EventKey(evnt));
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal KeySnoopFuncNative NativeDelegate;
		Gtk.KeySnoopFunc managed;

		public KeySnoopFuncWrapper (Gtk.KeySnoopFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new KeySnoopFuncNative (NativeCallback);
		}

		public static Gtk.KeySnoopFunc GetManagedDelegate (KeySnoopFuncNative native)
		{
			if (native == null)
				return null;
			KeySnoopFuncWrapper wrapper = (KeySnoopFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
