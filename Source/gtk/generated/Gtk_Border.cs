// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Border : IEquatable<Border> {

		public short Left;
		public short Right;
		public short Top;
		public short Bottom;

		public static Gtk.Border Zero = new Gtk.Border ();

		public static Gtk.Border New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.Border.Zero;
			return (Gtk.Border) Marshal.PtrToStructure (raw, typeof (Gtk.Border));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_border_new();

		public static Border New()
		{
			Border result = Border.New (gtk_border_new());
			return result;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_border_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_border_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (Border other)
		{
			return true && Left.Equals (other.Left) && Right.Equals (other.Right) && Top.Equals (other.Top) && Bottom.Equals (other.Bottom);
		}

		public override bool Equals (object other)
		{
			return other is Border && Equals ((Border) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Left.GetHashCode () ^ Right.GetHashCode () ^ Top.GetHashCode () ^ Bottom.GetHashCode ();
		}

		public static explicit operator GLib.Value (Gtk.Border boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Gtk.Border.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Gtk.Border (GLib.Value val)
		{
			return (Gtk.Border) val.Val;
		}
#endregion
	}
}
