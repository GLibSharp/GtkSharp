// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class StatusIcon : GLib.Object {

		public StatusIcon (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new();

		public StatusIcon () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StatusIcon)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_status_icon_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new_from_file(IntPtr filename);

		public StatusIcon (string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StatusIcon)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			Raw = gtk_status_icon_new_from_file(native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new_from_gicon(IntPtr icon);

		public StatusIcon (GLib.IIcon icon) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StatusIcon)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (icon != null) {
					names.Add ("icon");
					vals.Add (new GLib.Value (icon));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_status_icon_new_from_gicon(icon == null ? IntPtr.Zero : ((icon is GLib.Object) ? (icon as GLib.Object).Handle : (icon as GLib.IconAdapter).Handle));
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new_from_icon_name(IntPtr icon_name);

		public static StatusIcon NewFromIconName(string icon_name)
		{
			IntPtr native_icon_name = GLib.Marshaller.StringToPtrGStrdup (icon_name);
			StatusIcon result = new StatusIcon (gtk_status_icon_new_from_icon_name(native_icon_name));
			GLib.Marshaller.Free (native_icon_name);
			return result;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new_from_pixbuf(IntPtr pixbuf);

		public StatusIcon (Gdk.Pixbuf pixbuf) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StatusIcon)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (pixbuf != null) {
					names.Add ("pixbuf");
					vals.Add (new GLib.Value (pixbuf));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_status_icon_new_from_pixbuf(pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_new_from_stock(IntPtr stock_id);

		public static StatusIcon NewFromStock(string stock_id)
		{
			IntPtr native_stock_id = GLib.Marshaller.StringToPtrGStrdup (stock_id);
			StatusIcon result = new StatusIcon (gtk_status_icon_new_from_stock(native_stock_id));
			GLib.Marshaller.Free (native_stock_id);
			return result;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_pixbuf(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_from_pixbuf(IntPtr raw, IntPtr pixbuf);

		[Obsolete]
		[GLib.Property ("pixbuf")]
		public Gdk.Pixbuf Pixbuf {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set  {
				gtk_status_icon_set_from_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_from_file(IntPtr raw, IntPtr filename);

		[Obsolete]
		[GLib.Property ("file")]
		public string File {
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_from_file(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_stock(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_from_stock(IntPtr raw, IntPtr stock_id);

		[Obsolete]
		[GLib.Property ("stock")]
		public string Stock {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_stock(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_from_stock(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_icon_name(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_from_icon_name(IntPtr raw, IntPtr icon_name);

		[Obsolete]
		[GLib.Property ("icon-name")]
		public string IconName {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_from_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_gicon(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_from_gicon(IntPtr raw, IntPtr icon);

		[Obsolete]
		[GLib.Property ("gicon")]
		public GLib.IIcon Icon {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_gicon(Handle);
				GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				gtk_status_icon_set_from_gicon(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as GLib.IconAdapter).Handle));
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_status_icon_get_storage_type(IntPtr raw);

		[Obsolete]
		[GLib.Property ("storage-type")]
		public Gtk.ImageType StorageType {
			get  {
				int raw_ret = gtk_status_icon_get_storage_type(Handle);
				Gtk.ImageType ret = (Gtk.ImageType) raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_status_icon_get_size(IntPtr raw);

		[Obsolete]
		[GLib.Property ("size")]
		public int Size {
			get  {
				int raw_ret = gtk_status_icon_get_size(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_screen(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_screen(IntPtr raw, IntPtr screen);

		[Obsolete]
		[GLib.Property ("screen")]
		public Gdk.Screen Screen {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
			set  {
				gtk_status_icon_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_status_icon_get_visible(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_visible(IntPtr raw, bool visible);

		[Obsolete]
		[GLib.Property ("visible")]
		public bool Visible {
			get  {
				bool raw_ret = gtk_status_icon_get_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_status_icon_set_visible(Handle, value);
			}
		}

		[GLib.Property ("embedded")]
		public bool Embedded {
			get {
				GLib.Value val = GetProperty ("embedded");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("orientation")]
		public Gtk.Orientation Orientation {
			get {
				GLib.Value val = GetProperty ("orientation");
				Gtk.Orientation ret = (Gtk.Orientation) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_status_icon_get_has_tooltip(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_has_tooltip(IntPtr raw, bool has_tooltip);

		[Obsolete]
		[GLib.Property ("has-tooltip")]
		public bool HasTooltip {
			get  {
				bool raw_ret = gtk_status_icon_get_has_tooltip(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_status_icon_set_has_tooltip(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_tooltip_text(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_tooltip_text(IntPtr raw, IntPtr text);

		[Obsolete]
		[GLib.Property ("tooltip-text")]
		public string TooltipText {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_tooltip_text(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_tooltip_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_tooltip_markup(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_tooltip_markup(IntPtr raw, IntPtr markup);

		[Obsolete]
		[GLib.Property ("tooltip-markup")]
		public string TooltipMarkup {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_tooltip_markup(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_tooltip_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_title(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_title(IntPtr raw, IntPtr title);

		[Obsolete]
		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gtk_status_icon_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Signal("popup-menu")]
		public event Gtk.PopupMenuHandler PopupMenu {
			add {
				this.AddSignalHandler ("popup-menu", value, typeof (Gtk.PopupMenuArgs));
			}
			remove {
				this.RemoveSignalHandler ("popup-menu", value);
			}
		}

		[GLib.Signal("size-changed")]
		public event Gtk.SizeChangedHandler SizeChanged {
			add {
				this.AddSignalHandler ("size-changed", value, typeof (Gtk.SizeChangedArgs));
			}
			remove {
				this.RemoveSignalHandler ("size-changed", value);
			}
		}

		[GLib.Signal("button_release_event")]
		public event Gtk.ButtonReleaseEventHandler ButtonReleaseEvent {
			add {
				this.AddSignalHandler ("button_release_event", value, typeof (Gtk.ButtonReleaseEventArgs));
			}
			remove {
				this.RemoveSignalHandler ("button_release_event", value);
			}
		}

		[GLib.Signal("button_press_event")]
		public event Gtk.ButtonPressEventHandler ButtonPressEvent {
			add {
				this.AddSignalHandler ("button_press_event", value, typeof (Gtk.ButtonPressEventArgs));
			}
			remove {
				this.RemoveSignalHandler ("button_press_event", value);
			}
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activate {
			add {
				this.AddSignalHandler ("activate", value);
			}
			remove {
				this.RemoveSignalHandler ("activate", value);
			}
		}

		[GLib.Signal("query_tooltip")]
		public event Gtk.QueryTooltipHandler QueryTooltip {
			add {
				this.AddSignalHandler ("query_tooltip", value, typeof (Gtk.QueryTooltipArgs));
			}
			remove {
				this.RemoveSignalHandler ("query_tooltip", value);
			}
		}

		[GLib.Signal("scroll_event")]
		public event Gtk.ScrollEventHandler ScrollEvent {
			add {
				this.AddSignalHandler ("scroll_event", value, typeof (Gtk.ScrollEventArgs));
			}
			remove {
				this.RemoveSignalHandler ("scroll_event", value);
			}
		}

		static ActivateNativeDelegate Activate_cb_delegate;
		static ActivateNativeDelegate ActivateVMCallback {
			get {
				if (Activate_cb_delegate == null)
					Activate_cb_delegate = new ActivateNativeDelegate (Activate_cb);
				return Activate_cb_delegate;
			}
		}

		static void OverrideActivate (GLib.GType gtype)
		{
			OverrideActivate (gtype, ActivateVMCallback);
		}

		static void OverrideActivate (GLib.GType gtype, ActivateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("activate"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateNativeDelegate (IntPtr inst);

		static void Activate_cb (IntPtr inst)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				__obj.OnActivate ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideActivate")]
		protected virtual void OnActivate ()
		{
			InternalActivate ();
		}

		private void InternalActivate ()
		{
			ActivateNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("activate"));
				unmanaged = (ActivateNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ActivateNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PopupMenuNativeDelegate PopupMenu_cb_delegate;
		static PopupMenuNativeDelegate PopupMenuVMCallback {
			get {
				if (PopupMenu_cb_delegate == null)
					PopupMenu_cb_delegate = new PopupMenuNativeDelegate (PopupMenu_cb);
				return PopupMenu_cb_delegate;
			}
		}

		static void OverridePopupMenu (GLib.GType gtype)
		{
			OverridePopupMenu (gtype, PopupMenuVMCallback);
		}

		static void OverridePopupMenu (GLib.GType gtype, PopupMenuNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("popup_menu"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopupMenuNativeDelegate (IntPtr inst, uint button, uint activate_time);

		static void PopupMenu_cb (IntPtr inst, uint button, uint activate_time)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				__obj.OnPopupMenu (button, activate_time);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverridePopupMenu")]
		protected virtual void OnPopupMenu (uint button, uint activate_time)
		{
			InternalPopupMenu (button, activate_time);
		}

		private void InternalPopupMenu (uint button, uint activate_time)
		{
			PopupMenuNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("popup_menu"));
				unmanaged = (PopupMenuNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(PopupMenuNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle, button, activate_time);
		}

		static SizeChangedNativeDelegate SizeChanged_cb_delegate;
		static SizeChangedNativeDelegate SizeChangedVMCallback {
			get {
				if (SizeChanged_cb_delegate == null)
					SizeChanged_cb_delegate = new SizeChangedNativeDelegate (SizeChanged_cb);
				return SizeChanged_cb_delegate;
			}
		}

		static void OverrideSizeChanged (GLib.GType gtype)
		{
			OverrideSizeChanged (gtype, SizeChangedVMCallback);
		}

		static void OverrideSizeChanged (GLib.GType gtype, SizeChangedNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("size_changed"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool SizeChangedNativeDelegate (IntPtr inst, int size);

		static bool SizeChanged_cb (IntPtr inst, int size)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				bool __result;
				__result = __obj.OnSizeChanged (size);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideSizeChanged")]
		protected virtual bool OnSizeChanged (int size)
		{
			return InternalSizeChanged (size);
		}

		private bool InternalSizeChanged (int size)
		{
			SizeChangedNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("size_changed"));
				unmanaged = (SizeChangedNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(SizeChangedNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, size);
			return __result;
		}

		static ButtonPressEventNativeDelegate ButtonPressEvent_cb_delegate;
		static ButtonPressEventNativeDelegate ButtonPressEventVMCallback {
			get {
				if (ButtonPressEvent_cb_delegate == null)
					ButtonPressEvent_cb_delegate = new ButtonPressEventNativeDelegate (ButtonPressEvent_cb);
				return ButtonPressEvent_cb_delegate;
			}
		}

		static void OverrideButtonPressEvent (GLib.GType gtype)
		{
			OverrideButtonPressEvent (gtype, ButtonPressEventVMCallback);
		}

		static void OverrideButtonPressEvent (GLib.GType gtype, ButtonPressEventNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("button_press_event"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ButtonPressEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool ButtonPressEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				bool __result;
				__result = __obj.OnButtonPressEvent (new Gdk.EventButton(evnt));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideButtonPressEvent")]
		protected virtual bool OnButtonPressEvent (Gdk.EventButton evnt)
		{
			return InternalButtonPressEvent (evnt);
		}

		private bool InternalButtonPressEvent (Gdk.EventButton evnt)
		{
			ButtonPressEventNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("button_press_event"));
				unmanaged = (ButtonPressEventNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ButtonPressEventNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static ButtonReleaseEventNativeDelegate ButtonReleaseEvent_cb_delegate;
		static ButtonReleaseEventNativeDelegate ButtonReleaseEventVMCallback {
			get {
				if (ButtonReleaseEvent_cb_delegate == null)
					ButtonReleaseEvent_cb_delegate = new ButtonReleaseEventNativeDelegate (ButtonReleaseEvent_cb);
				return ButtonReleaseEvent_cb_delegate;
			}
		}

		static void OverrideButtonReleaseEvent (GLib.GType gtype)
		{
			OverrideButtonReleaseEvent (gtype, ButtonReleaseEventVMCallback);
		}

		static void OverrideButtonReleaseEvent (GLib.GType gtype, ButtonReleaseEventNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("button_release_event"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ButtonReleaseEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool ButtonReleaseEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				bool __result;
				__result = __obj.OnButtonReleaseEvent (new Gdk.EventButton(evnt));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideButtonReleaseEvent")]
		protected virtual bool OnButtonReleaseEvent (Gdk.EventButton evnt)
		{
			return InternalButtonReleaseEvent (evnt);
		}

		private bool InternalButtonReleaseEvent (Gdk.EventButton evnt)
		{
			ButtonReleaseEventNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("button_release_event"));
				unmanaged = (ButtonReleaseEventNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ButtonReleaseEventNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static ScrollEventNativeDelegate ScrollEvent_cb_delegate;
		static ScrollEventNativeDelegate ScrollEventVMCallback {
			get {
				if (ScrollEvent_cb_delegate == null)
					ScrollEvent_cb_delegate = new ScrollEventNativeDelegate (ScrollEvent_cb);
				return ScrollEvent_cb_delegate;
			}
		}

		static void OverrideScrollEvent (GLib.GType gtype)
		{
			OverrideScrollEvent (gtype, ScrollEventVMCallback);
		}

		static void OverrideScrollEvent (GLib.GType gtype, ScrollEventNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("scroll_event"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ScrollEventNativeDelegate (IntPtr inst, IntPtr evnt);

		static bool ScrollEvent_cb (IntPtr inst, IntPtr evnt)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				bool __result;
				__result = __obj.OnScrollEvent (new Gdk.EventScroll(evnt));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideScrollEvent")]
		protected virtual bool OnScrollEvent (Gdk.EventScroll evnt)
		{
			return InternalScrollEvent (evnt);
		}

		private bool InternalScrollEvent (Gdk.EventScroll evnt)
		{
			ScrollEventNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("scroll_event"));
				unmanaged = (ScrollEventNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ScrollEventNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, evnt == null ? IntPtr.Zero : evnt.Handle);
			return __result;
		}

		static QueryTooltipNativeDelegate QueryTooltip_cb_delegate;
		static QueryTooltipNativeDelegate QueryTooltipVMCallback {
			get {
				if (QueryTooltip_cb_delegate == null)
					QueryTooltip_cb_delegate = new QueryTooltipNativeDelegate (QueryTooltip_cb);
				return QueryTooltip_cb_delegate;
			}
		}

		static void OverrideQueryTooltip (GLib.GType gtype)
		{
			OverrideQueryTooltip (gtype, QueryTooltipVMCallback);
		}

		static void OverrideQueryTooltip (GLib.GType gtype, QueryTooltipNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("query_tooltip"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool QueryTooltipNativeDelegate (IntPtr inst, int x, int y, bool keyboard_mode, IntPtr tooltip);

		static bool QueryTooltip_cb (IntPtr inst, int x, int y, bool keyboard_mode, IntPtr tooltip)
		{
			try {
				StatusIcon __obj = GLib.Object.GetObject (inst, false) as StatusIcon;
				bool __result;
				__result = __obj.OnQueryTooltip (x, y, keyboard_mode, GLib.Object.GetObject(tooltip) as Gtk.Tooltip);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.StatusIcon), ConnectionMethod="OverrideQueryTooltip")]
		protected virtual bool OnQueryTooltip (int x, int y, bool keyboard_mode, Gtk.Tooltip tooltip)
		{
			return InternalQueryTooltip (x, y, keyboard_mode, tooltip);
		}

		private bool InternalQueryTooltip (int x, int y, bool keyboard_mode, Gtk.Tooltip tooltip)
		{
			QueryTooltipNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("query_tooltip"));
				unmanaged = (QueryTooltipNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(QueryTooltipNativeDelegate));
			}
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, x, y, keyboard_mode, tooltip == null ? IntPtr.Zero : tooltip.Handle);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("activate"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // activate
							, null
							, "popup_menu"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("popup_menu"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // popup_menu
							, "activate"
							, "size_changed"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("size_changed"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // size_changed
							, "popup_menu"
							, "button_press_event"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("button_press_event"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // button_press_event
							, "size_changed"
							, "button_release_event"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("button_release_event"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // button_release_event
							, "button_press_event"
							, "scroll_event"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("scroll_event"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // scroll_event
							, "button_release_event"
							, "query_tooltip"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("query_tooltip"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // query_tooltip
							, "scroll_event"
							, "__gtk_reserved1"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__gtk_reserved1"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // __gtk_reserved1
							, "query_tooltip"
							, "__gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // __gtk_reserved2
							, "__gtk_reserved1"
							, "__gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // __gtk_reserved3
							, "__gtk_reserved2"
							, "__gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // __gtk_reserved4
							, "__gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_status_icon_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_status_icon_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_status_icon_get_x11_window_id(IntPtr raw);

		[Obsolete]
		public uint X11WindowId { 
			get {
				uint raw_ret = gtk_status_icon_get_x11_window_id(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_status_icon_is_embedded(IntPtr raw);

		[Obsolete]
		public bool IsEmbedded { 
			get {
				bool raw_ret = gtk_status_icon_is_embedded(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_position_menu(IntPtr menu, out int x, out int y, out bool push_in, IntPtr user_data);

		[Obsolete]
		public static void PositionMenu(Gtk.Menu menu, out int x, out int y, out bool push_in, IntPtr user_data) {
			gtk_status_icon_position_menu(menu == null ? IntPtr.Zero : menu.Handle, out x, out y, out push_in, user_data);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_status_icon_set_name(IntPtr raw, IntPtr name);

		[Obsolete]
		public string Name { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_status_icon_set_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
