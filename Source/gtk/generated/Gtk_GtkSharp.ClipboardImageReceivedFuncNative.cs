// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void ClipboardImageReceivedFuncNative(IntPtr clipboard, IntPtr pixbuf, IntPtr data);

	internal class ClipboardImageReceivedFuncInvoker {

		ClipboardImageReceivedFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~ClipboardImageReceivedFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal ClipboardImageReceivedFuncInvoker (ClipboardImageReceivedFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal ClipboardImageReceivedFuncInvoker (ClipboardImageReceivedFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal ClipboardImageReceivedFuncInvoker (ClipboardImageReceivedFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.ClipboardImageReceivedFunc Handler {
			get {
				return new Gtk.ClipboardImageReceivedFunc(InvokeNative);
			}
		}

		void InvokeNative (Gtk.Clipboard clipboard, Gdk.Pixbuf pixbuf)
		{
			native_cb (clipboard == null ? IntPtr.Zero : clipboard.Handle, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, __data);
		}
	}

	internal class ClipboardImageReceivedFuncWrapper {

		public void NativeCallback (IntPtr clipboard, IntPtr pixbuf, IntPtr data)
		{
			try {
				managed (GLib.Object.GetObject(clipboard) as Gtk.Clipboard, GLib.Object.GetObject(pixbuf) as Gdk.Pixbuf);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ClipboardImageReceivedFuncNative NativeDelegate;
		Gtk.ClipboardImageReceivedFunc managed;

		public ClipboardImageReceivedFuncWrapper (Gtk.ClipboardImageReceivedFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ClipboardImageReceivedFuncNative (NativeCallback);
		}

		public static Gtk.ClipboardImageReceivedFunc GetManagedDelegate (ClipboardImageReceivedFuncNative native)
		{
			if (native == null)
				return null;
			ClipboardImageReceivedFuncWrapper wrapper = (ClipboardImageReceivedFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
