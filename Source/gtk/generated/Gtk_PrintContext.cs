// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class PrintContext : GLib.Object {

		public PrintContext (IntPtr raw) : base(raw) {}

		protected PrintContext() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_create_pango_context(IntPtr raw);

		public Pango.Context CreatePangoContext() {
			IntPtr raw_ret = gtk_print_context_create_pango_context(Handle);
			Pango.Context ret = GLib.Object.GetObject(raw_ret) as Pango.Context;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_create_pango_layout(IntPtr raw);

		public Pango.Layout CreatePangoLayout() {
			IntPtr raw_ret = gtk_print_context_create_pango_layout(Handle);
			Pango.Layout ret = GLib.Object.GetObject(raw_ret) as Pango.Layout;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_cairo_context(IntPtr raw);

		public Cairo.Context CairoContext { 
			get {
				IntPtr raw_ret = gtk_print_context_get_cairo_context(Handle);
				Cairo.Context ret = new Cairo.Context (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_dpi_x(IntPtr raw);

		public double DpiX { 
			get {
				double raw_ret = gtk_print_context_get_dpi_x(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_dpi_y(IntPtr raw);

		public double DpiY { 
			get {
				double raw_ret = gtk_print_context_get_dpi_y(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_print_context_get_hard_margins(IntPtr raw, out double top, out double bottom, out double left, out double right);

		public bool GetHardMargins(out double top, out double bottom, out double left, out double right) {
			bool raw_ret = gtk_print_context_get_hard_margins(Handle, out top, out bottom, out left, out right);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_height(IntPtr raw);

		public double Height { 
			get {
				double raw_ret = gtk_print_context_get_height(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_page_setup(IntPtr raw);

		public Gtk.PageSetup PageSetup { 
			get {
				IntPtr raw_ret = gtk_print_context_get_page_setup(Handle);
				Gtk.PageSetup ret = GLib.Object.GetObject(raw_ret) as Gtk.PageSetup;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_pango_fontmap(IntPtr raw);

		public Pango.FontMap PangoFontmap { 
			get {
				IntPtr raw_ret = gtk_print_context_get_pango_fontmap(Handle);
				Pango.FontMap ret = GLib.Object.GetObject(raw_ret) as Pango.FontMap;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_print_context_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_print_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_print_context_get_width(IntPtr raw);

		public double Width { 
			get {
				double raw_ret = gtk_print_context_get_width(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_print_context_set_cairo_context(IntPtr raw, IntPtr cr, double dpi_x, double dpi_y);

		public void SetCairoContext(Cairo.Context cr, double dpi_x, double dpi_y) {
			gtk_print_context_set_cairo_context(Handle, cr == null ? IntPtr.Zero : cr.Handle, dpi_x, dpi_y);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
