// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void TreeSelectionForeachFuncNative(IntPtr model, IntPtr path, IntPtr iter, IntPtr data);

	internal class TreeSelectionForeachFuncInvoker {

		TreeSelectionForeachFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TreeSelectionForeachFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TreeSelectionForeachFuncInvoker (TreeSelectionForeachFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TreeSelectionForeachFuncInvoker (TreeSelectionForeachFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TreeSelectionForeachFuncInvoker (TreeSelectionForeachFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.TreeSelectionForeachFunc Handler {
			get {
				return new Gtk.TreeSelectionForeachFunc(InvokeNative);
			}
		}

		void InvokeNative (Gtk.ITreeModel model, Gtk.TreePath path, Gtk.TreeIter iter)
		{
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			native_cb (model == null ? IntPtr.Zero : ((model is GLib.Object) ? (model as GLib.Object).Handle : (model as Gtk.TreeModelAdapter).Handle), path == null ? IntPtr.Zero : path.Handle, native_iter, __data);
			Marshal.FreeHGlobal (native_iter);
		}
	}

	internal class TreeSelectionForeachFuncWrapper {

		public void NativeCallback (IntPtr model, IntPtr path, IntPtr iter, IntPtr data)
		{
			try {
				managed (Gtk.TreeModelAdapter.GetObject (model, false), path == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (path, typeof (Gtk.TreePath), false), Gtk.TreeIter.New (iter));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TreeSelectionForeachFuncNative NativeDelegate;
		Gtk.TreeSelectionForeachFunc managed;

		public TreeSelectionForeachFuncWrapper (Gtk.TreeSelectionForeachFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TreeSelectionForeachFuncNative (NativeCallback);
		}

		public static Gtk.TreeSelectionForeachFunc GetManagedDelegate (TreeSelectionForeachFuncNative native)
		{
			if (native == null)
				return null;
			TreeSelectionForeachFuncWrapper wrapper = (TreeSelectionForeachFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
