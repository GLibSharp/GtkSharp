// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RecentInfo : GLib.Opaque {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gtk_recent_info_create_app_info(IntPtr raw, IntPtr app_name, out IntPtr error);

		public unsafe GLib.IAppInfo CreateAppInfo(string app_name) {
			IntPtr native_app_name = GLib.Marshaller.StringToPtrGStrdup (app_name);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = gtk_recent_info_create_app_info(Handle, native_app_name, out error);
			GLib.IAppInfo ret = GLib.AppInfoAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_app_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_exists(IntPtr raw);

		public bool Exists() {
			bool raw_ret = gtk_recent_info_exists(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_added(IntPtr raw);

		public System.DateTime Added { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_added(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_recent_info_get_age(IntPtr raw);

		public int Age { 
			get {
				int raw_ret = gtk_recent_info_get_age(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_get_application_info(IntPtr raw, IntPtr app_name, out IntPtr app_exec, out uint count, out IntPtr time_);

		public bool GetApplicationInfo(string app_name, out string app_exec, out uint count, out System.DateTime time_) {
			IntPtr native_app_name = GLib.Marshaller.StringToPtrGStrdup (app_name);
			IntPtr native_app_exec;
			IntPtr native_time_;
			bool raw_ret = gtk_recent_info_get_application_info(Handle, native_app_name, out native_app_exec, out count, out native_time_);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_name);
			app_exec = GLib.Marshaller.Utf8PtrToString (native_app_exec);
			time_ = GLib.Marshaller.time_tToDateTime (native_time_);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_applications(IntPtr raw, out UIntPtr length);

		public string GetApplications(out ulong length) {
			UIntPtr native_length;
			IntPtr raw_ret = gtk_recent_info_get_applications(Handle, out native_length);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			length = (ulong) native_length;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_description(IntPtr raw);

		public string Description { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_display_name(IntPtr raw);

		public string DisplayName { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_display_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_gicon(IntPtr raw);

		public GLib.IIcon Gicon { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_gicon(Handle);
				GLib.IIcon ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_groups(IntPtr raw, out UIntPtr length);

		public string GetGroups(out ulong length) {
			UIntPtr native_length;
			IntPtr raw_ret = gtk_recent_info_get_groups(Handle, out native_length);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			length = (ulong) native_length;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_icon(IntPtr raw, int size);

		public Gdk.Pixbuf GetIcon(int size) {
			IntPtr raw_ret = gtk_recent_info_get_icon(Handle, size);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_mime_type(IntPtr raw);

		public string MimeType { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_mime_type(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_modified(IntPtr raw);

		public System.DateTime Modified { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_modified(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_get_private_hint(IntPtr raw);

		public bool PrivateHint { 
			get {
				bool raw_ret = gtk_recent_info_get_private_hint(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_short_name(IntPtr raw);

		public string ShortName { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_short_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_uri(IntPtr raw);

		public string Uri { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_uri_display(IntPtr raw);

		public string UriDisplay { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_uri_display(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_get_visited(IntPtr raw);

		public System.DateTime Visited { 
			get {
				IntPtr raw_ret = gtk_recent_info_get_visited(Handle);
				System.DateTime ret = GLib.Marshaller.time_tToDateTime (raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_has_application(IntPtr raw, IntPtr app_name);

		public bool HasApplication(string app_name) {
			IntPtr native_app_name = GLib.Marshaller.StringToPtrGStrdup (app_name);
			bool raw_ret = gtk_recent_info_has_application(Handle, native_app_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_has_group(IntPtr raw, IntPtr group_name);

		public bool HasGroup(string group_name) {
			IntPtr native_group_name = GLib.Marshaller.StringToPtrGStrdup (group_name);
			bool raw_ret = gtk_recent_info_has_group(Handle, native_group_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_group_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_is_local(IntPtr raw);

		public bool IsLocal { 
			get {
				bool raw_ret = gtk_recent_info_is_local(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_last_application(IntPtr raw);

		public string LastApplication() {
			IntPtr raw_ret = gtk_recent_info_last_application(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_recent_info_match(IntPtr raw, IntPtr info_b);

		public bool Match(Gtk.RecentInfo info_b) {
			bool raw_ret = gtk_recent_info_match(Handle, info_b == null ? IntPtr.Zero : info_b.Handle);
			bool ret = raw_ret;
			return ret;
		}

		public RecentInfo(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_recent_info_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gtk_recent_info_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_recent_info_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gtk_recent_info_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_recent_info_unref (handle);
				return false;
			}
		}

		~RecentInfo ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
