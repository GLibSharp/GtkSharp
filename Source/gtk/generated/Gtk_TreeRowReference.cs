// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class TreeRowReference : GLib.Opaque {

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_copy(IntPtr raw);

		public Gtk.TreeRowReference Copy() {
			IntPtr raw_ret = gtk_tree_row_reference_copy(Handle);
			Gtk.TreeRowReference ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreeRowReference) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreeRowReference), true);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_deleted(IntPtr proxy, IntPtr path);

		public static void Deleted(GLib.Object proxy, Gtk.TreePath path) {
			gtk_tree_row_reference_deleted(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_model(IntPtr raw);

		public Gtk.ITreeModel Model { 
			get {
				IntPtr raw_ret = gtk_tree_row_reference_get_model(Handle);
				Gtk.ITreeModel ret = Gtk.TreeModelAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_path(IntPtr raw);

		public Gtk.TreePath Path { 
			get {
				IntPtr raw_ret = gtk_tree_row_reference_get_path(Handle);
				Gtk.TreePath ret = raw_ret == IntPtr.Zero ? null : (Gtk.TreePath) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.TreePath), true);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_tree_row_reference_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_inserted(IntPtr proxy, IntPtr path);

		public static void Inserted(GLib.Object proxy, Gtk.TreePath path) {
			gtk_tree_row_reference_inserted(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_reordered(IntPtr proxy, IntPtr path, IntPtr iter, out int new_order);

		public static int Reordered(GLib.Object proxy, Gtk.TreePath path, Gtk.TreeIter iter) {
			int new_order;
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			gtk_tree_row_reference_reordered(proxy == null ? IntPtr.Zero : proxy.Handle, path == null ? IntPtr.Zero : path.Handle, native_iter, out new_order);
			Marshal.FreeHGlobal (native_iter);
			return new_order;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_tree_row_reference_valid(IntPtr raw);

		public bool Valid() {
			bool raw_ret = gtk_tree_row_reference_valid(Handle);
			bool ret = raw_ret;
			return ret;
		}

		public TreeRowReference(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_new(IntPtr model, IntPtr path);

		public TreeRowReference (Gtk.ITreeModel model, Gtk.TreePath path) 
		{
			Raw = gtk_tree_row_reference_new(model == null ? IntPtr.Zero : ((model is GLib.Object) ? (model as GLib.Object).Handle : (model as Gtk.TreeModelAdapter).Handle), path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_tree_row_reference_new_proxy(IntPtr proxy, IntPtr model, IntPtr path);

		public TreeRowReference (GLib.Object proxy, Gtk.ITreeModel model, Gtk.TreePath path) 
		{
			Raw = gtk_tree_row_reference_new_proxy(proxy == null ? IntPtr.Zero : proxy.Handle, model == null ? IntPtr.Zero : ((model is GLib.Object) ? (model as GLib.Object).Handle : (model as Gtk.TreeModelAdapter).Handle), path == null ? IntPtr.Zero : path.Handle);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_tree_row_reference_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_tree_row_reference_free (raw);
		}

		[Obsolete("Gtk.TreeRowReference is now freed automatically")]
		public void Free () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_tree_row_reference_free (handle);
				return false;
			}
		}

		~TreeRowReference ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
