// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Stack : Gtk.Container {

		public Stack (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_stack_new();

		public Stack () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Stack)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_stack_new();
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_stack_get_homogeneous(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_homogeneous(IntPtr raw, bool homogeneous);

		[GLib.Property ("homogeneous")]
		public bool Homogeneous {
			get  {
				bool raw_ret = gtk_stack_get_homogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_homogeneous(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_stack_get_hhomogeneous(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_hhomogeneous(IntPtr raw, bool hhomogeneous);

		[GLib.Property ("hhomogeneous")]
		public bool Hhomogeneous {
			get  {
				bool raw_ret = gtk_stack_get_hhomogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_hhomogeneous(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_stack_get_vhomogeneous(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_vhomogeneous(IntPtr raw, bool vhomogeneous);

		[GLib.Property ("vhomogeneous")]
		public bool Vhomogeneous {
			get  {
				bool raw_ret = gtk_stack_get_vhomogeneous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_vhomogeneous(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_stack_get_visible_child(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_visible_child(IntPtr raw, IntPtr child);

		[GLib.Property ("visible-child")]
		public Gtk.Widget VisibleChild {
			get  {
				IntPtr raw_ret = gtk_stack_get_visible_child(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
			set  {
				gtk_stack_set_visible_child(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_stack_get_visible_child_name(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_visible_child_name(IntPtr raw, IntPtr name);

		[GLib.Property ("visible-child-name")]
		public string VisibleChildName {
			get  {
				IntPtr raw_ret = gtk_stack_get_visible_child_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_stack_set_visible_child_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_stack_get_transition_duration(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_transition_duration(IntPtr raw, uint duration);

		[GLib.Property ("transition-duration")]
		public uint TransitionDuration {
			get  {
				uint raw_ret = gtk_stack_get_transition_duration(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_transition_duration(Handle, value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_stack_get_transition_type(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_transition_type(IntPtr raw, int transition);

		[GLib.Property ("transition-type")]
		public Gtk.StackTransitionType TransitionType {
			get  {
				int raw_ret = gtk_stack_get_transition_type(Handle);
				Gtk.StackTransitionType ret = (Gtk.StackTransitionType) raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_transition_type(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_stack_get_transition_running(IntPtr raw);

		[GLib.Property ("transition-running")]
		public bool TransitionRunning {
			get  {
				bool raw_ret = gtk_stack_get_transition_running(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_stack_get_interpolate_size(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_interpolate_size(IntPtr raw, bool interpolate_size);

		[GLib.Property ("interpolate-size")]
		public bool InterpolateSize {
			get  {
				bool raw_ret = gtk_stack_get_interpolate_size(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_stack_set_interpolate_size(Handle, value);
			}
		}

		[GLib.Property ("name")]
		public new string Name {
			get {
				GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("title")]
		public string Title {
			get {
				GLib.Value val = GetProperty ("title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("title", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("icon-name")]
		public string IconName {
			get {
				GLib.Value val = GetProperty ("icon-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("icon-name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("position")]
		public int Position {
			get {
				GLib.Value val = GetProperty ("position");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("position", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("needs-attention")]
		public bool NeedsAttention {
			get {
				GLib.Value val = GetProperty ("needs-attention");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("needs-attention", val);
				val.Dispose ();
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (Gtk.Container.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_add_named(IntPtr raw, IntPtr child, IntPtr name);

		public void AddNamed(Gtk.Widget child, string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_stack_add_named(Handle, child == null ? IntPtr.Zero : child.Handle, native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_add_titled(IntPtr raw, IntPtr child, IntPtr name, IntPtr title);

		public void AddTitled(Gtk.Widget child, string name, string title) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			gtk_stack_add_titled(Handle, child == null ? IntPtr.Zero : child.Handle, native_name, native_title);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_stack_get_child_by_name(IntPtr raw, IntPtr name);

		public Gtk.Widget GetChildByName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_stack_get_child_by_name(Handle, native_name);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_stack_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_stack_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_stack_set_visible_child_full(IntPtr raw, IntPtr name, int transition);

		public void SetVisibleChildFull(string name, Gtk.StackTransitionType transition) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			gtk_stack_set_visible_child_full(Handle, native_name, (int) transition);
			GLib.Marshaller.Free (native_name);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gtk.Container.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
