// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Bookmark : IEquatable<Bookmark> {

		private IntPtr _file;
		public GLib.IFile File {
			get {
				return GLib.FileAdapter.GetObject (_file, false);
			}
			set {
				_file = value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as GLib.FileAdapter).Handle);
			}
		}
		public string Label;

		public static Gtk.Bookmark Zero = new Gtk.Bookmark ();

		public static Gtk.Bookmark New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.Bookmark.Zero;
			return (Gtk.Bookmark) Marshal.PtrToStructure (raw, typeof (Gtk.Bookmark));
		}

		public bool Equals (Bookmark other)
		{
			return true && File.Equals (other.File) && Label.Equals (other.Label);
		}

		public override bool Equals (object other)
		{
			return other is Bookmark && Equals ((Bookmark) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ File.GetHashCode () ^ Label.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
