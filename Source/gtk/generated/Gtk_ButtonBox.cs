// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ButtonBox : Gtk.Box {

		public ButtonBox (IntPtr raw) : base(raw) {}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_button_box_new(int orientation);

		public ButtonBox (Gtk.Orientation orientation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ButtonBox)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_button_box_new((int) orientation);
		}

		[GLib.Property ("child-min-width")]
		public int ChildMinWidth {
			get {
				GLib.Value val = GetProperty ("child-min-width");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("child-min-height")]
		public int ChildMinHeight {
			get {
				GLib.Value val = GetProperty ("child-min-height");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("child-internal-pad-x")]
		public int ChildInternalPadX {
			get {
				GLib.Value val = GetProperty ("child-internal-pad-x");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("child-internal-pad-y")]
		public int ChildInternalPadY {
			get {
				GLib.Value val = GetProperty ("child-internal-pad-y");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("layout-style")]
		public Gtk.ButtonBoxStyle LayoutStyle {
			get {
				GLib.Value val = GetProperty ("layout-style");
				Gtk.ButtonBoxStyle ret = (Gtk.ButtonBoxStyle) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("layout-style", val);
				val.Dispose ();
			}
		}

		public class ButtonBoxChild : Gtk.Container.ContainerChild {
			protected internal ButtonBoxChild (Gtk.Container parent, Gtk.Widget child) : base (parent, child) {}

			[Gtk.ChildProperty ("secondary")]
			public bool Secondary {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "secondary");
					bool ret = (bool) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "secondary", val);
					val.Dispose ();
				}
			}

			[Gtk.ChildProperty ("non-homogeneous")]
			public bool NonHomogeneous {
				get {
					GLib.Value val = parent.ChildGetProperty (child, "non-homogeneous");
					bool ret = (bool) val;
					val.Dispose ();
					return ret;
				}
				set {
					GLib.Value val = new GLib.Value(value);
					parent.ChildSetProperty(child, "non-homogeneous", val);
					val.Dispose ();
				}
			}

		}

		public override Gtk.Container.ContainerChild this [Gtk.Widget child] {
			get {
				return new ButtonBoxChild (this, child);
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gtk_reserved1"
							, Gtk.Box.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved1
							, null
							, "_gtk_reserved2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved2
							, "_gtk_reserved1"
							, "_gtk_reserved3"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved3"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved3
							, "_gtk_reserved2"
							, "_gtk_reserved4"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gtk_reserved4"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // _gtk_reserved4
							, "_gtk_reserved3"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_button_box_get_child_non_homogeneous(IntPtr raw, IntPtr child);

		public bool GetChildNonHomogeneous(Gtk.Widget child) {
			bool raw_ret = gtk_button_box_get_child_non_homogeneous(Handle, child == null ? IntPtr.Zero : child.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_button_box_get_child_secondary(IntPtr raw, IntPtr child);

		public bool GetChildSecondary(Gtk.Widget child) {
			bool raw_ret = gtk_button_box_get_child_secondary(Handle, child == null ? IntPtr.Zero : child.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_button_box_get_layout(IntPtr raw);

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_layout(IntPtr raw, int layout_style);

		public Gtk.ButtonBoxStyle Layout { 
			get {
				int raw_ret = gtk_button_box_get_layout(Handle);
				Gtk.ButtonBoxStyle ret = (Gtk.ButtonBoxStyle) raw_ret;
				return ret;
			}
			set {
				gtk_button_box_set_layout(Handle, (int) value);
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_button_box_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_button_box_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_child_non_homogeneous(IntPtr raw, IntPtr child, bool non_homogeneous);

		public void SetChildNonHomogeneous(Gtk.Widget child, bool non_homogeneous) {
			gtk_button_box_set_child_non_homogeneous(Handle, child == null ? IntPtr.Zero : child.Handle, non_homogeneous);
		}

		[DllImport("libgtk-3-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_button_box_set_child_secondary(IntPtr raw, IntPtr child, bool is_secondary);

		public void SetChildSecondary(Gtk.Widget child, bool is_secondary) {
			gtk_button_box_set_child_secondary(Handle, child == null ? IntPtr.Zero : child.Handle, is_secondary);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gtk.Box.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
