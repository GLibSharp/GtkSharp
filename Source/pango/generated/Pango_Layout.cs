// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Layout : GLib.Object {

		public Layout (IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_new(IntPtr context);

		public Layout (Pango.Context context) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Layout)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = pango_layout_new(context == null ? IntPtr.Zero : context.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_context_changed(IntPtr raw);

		public void ContextChanged() {
			pango_layout_context_changed(Handle);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_copy(IntPtr raw);

		public Pango.Layout Copy() {
			IntPtr raw_ret = pango_layout_copy(Handle);
			Pango.Layout ret = GLib.Object.GetObject(raw_ret, true) as Pango.Layout;
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_alignment(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_alignment(IntPtr raw, int alignment);

		public Pango.Alignment Alignment { 
			get {
				int raw_ret = pango_layout_get_alignment(Handle);
				Pango.Alignment ret = (Pango.Alignment) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_alignment(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_attributes(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_attributes(IntPtr raw, IntPtr attrs);

		public Pango.AttrList Attributes { 
			get {
				IntPtr raw_ret = pango_layout_get_attributes(Handle);
				Pango.AttrList ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrList) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrList), false);
				return ret;
			}
			set {
				pango_layout_set_attributes(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_auto_dir(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_auto_dir(IntPtr raw, bool auto_dir);

		public bool AutoDir { 
			get {
				bool raw_ret = pango_layout_get_auto_dir(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_auto_dir(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_baseline(IntPtr raw);

		public int Baseline { 
			get {
				int raw_ret = pango_layout_get_baseline(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_character_count(IntPtr raw);

		public int CharacterCount { 
			get {
				int raw_ret = pango_layout_get_character_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_context(IntPtr raw);

		public Pango.Context Context { 
			get {
				IntPtr raw_ret = pango_layout_get_context(Handle);
				Pango.Context ret = GLib.Object.GetObject(raw_ret) as Pango.Context;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_cursor_pos(IntPtr raw, int index_, IntPtr strong_pos, IntPtr weak_pos);

		public void GetCursorPos(int index_, out Pango.Rectangle strong_pos, out Pango.Rectangle weak_pos) {
			IntPtr native_strong_pos = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			IntPtr native_weak_pos = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			pango_layout_get_cursor_pos(Handle, index_, native_strong_pos, native_weak_pos);
			strong_pos = Pango.Rectangle.New (native_strong_pos);
			Marshal.FreeHGlobal (native_strong_pos);
			weak_pos = Pango.Rectangle.New (native_weak_pos);
			Marshal.FreeHGlobal (native_weak_pos);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_ellipsize(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_ellipsize(IntPtr raw, int ellipsize);

		public Pango.EllipsizeMode Ellipsize { 
			get {
				int raw_ret = pango_layout_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_ellipsize(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_extents(IntPtr raw, IntPtr ink_rect, IntPtr logical_rect);

		public void GetExtents(out Pango.Rectangle ink_rect, out Pango.Rectangle logical_rect) {
			IntPtr native_ink_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			IntPtr native_logical_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			pango_layout_get_extents(Handle, native_ink_rect, native_logical_rect);
			ink_rect = Pango.Rectangle.New (native_ink_rect);
			Marshal.FreeHGlobal (native_ink_rect);
			logical_rect = Pango.Rectangle.New (native_logical_rect);
			Marshal.FreeHGlobal (native_logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_font_description(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_font_description(IntPtr raw, IntPtr desc);

		public Pango.FontDescription FontDescription { 
			get {
				IntPtr raw_ret = pango_layout_get_font_description(Handle);
				Pango.FontDescription ret = raw_ret == IntPtr.Zero ? null : (Pango.FontDescription) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.FontDescription), false);
				return ret;
			}
			set {
				pango_layout_set_font_description(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_height(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_height(IntPtr raw, int height);

		public int Height { 
			get {
				int raw_ret = pango_layout_get_height(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_height(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_indent(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_indent(IntPtr raw, int indent);

		public int Indent { 
			get {
				int raw_ret = pango_layout_get_indent(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_indent(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_iter(IntPtr raw);

		public Pango.LayoutIter Iter { 
			get {
				IntPtr raw_ret = pango_layout_get_iter(Handle);
				Pango.LayoutIter ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutIter), true);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_justify(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_justify(IntPtr raw, bool justify);

		public bool Justify { 
			get {
				bool raw_ret = pango_layout_get_justify(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_justify(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_line(IntPtr raw, int line);

		public Pango.LayoutLine GetLine(int line) {
			IntPtr raw_ret = pango_layout_get_line(Handle, line);
			Pango.LayoutLine ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutLine) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutLine), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_line_count(IntPtr raw);

		public int LineCount { 
			get {
				int raw_ret = pango_layout_get_line_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_line_readonly(IntPtr raw, int line);

		public Pango.LayoutLine GetLineReadonly(int line) {
			IntPtr raw_ret = pango_layout_get_line_readonly(Handle, line);
			Pango.LayoutLine ret = raw_ret == IntPtr.Zero ? null : (Pango.LayoutLine) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.LayoutLine), false);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_lines_readonly(IntPtr raw);

		public Pango.LayoutLine[] LinesReadOnly { 
			get {
				IntPtr raw_ret = pango_layout_get_lines_readonly(Handle);
				Pango.LayoutLine[] ret = (Pango.LayoutLine[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Pango.LayoutLine));
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_log_attrs_readonly(IntPtr raw, out int n_attrs);

		public Pango.LogAttr GetLogAttrsReadonly(out int n_attrs) {
			IntPtr raw_ret = pango_layout_get_log_attrs_readonly(Handle, out n_attrs);
			Pango.LogAttr ret = Pango.LogAttr.New (raw_ret);
			return ret;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_pixel_extents(IntPtr raw, IntPtr ink_rect, IntPtr logical_rect);

		public void GetPixelExtents(out Pango.Rectangle ink_rect, out Pango.Rectangle logical_rect) {
			IntPtr native_ink_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			IntPtr native_logical_rect = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			pango_layout_get_pixel_extents(Handle, native_ink_rect, native_logical_rect);
			ink_rect = Pango.Rectangle.New (native_ink_rect);
			Marshal.FreeHGlobal (native_ink_rect);
			logical_rect = Pango.Rectangle.New (native_logical_rect);
			Marshal.FreeHGlobal (native_logical_rect);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_pixel_size(IntPtr raw, out int width, out int height);

		public void GetPixelSize(out int width, out int height) {
			pango_layout_get_pixel_size(Handle, out width, out height);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern uint pango_layout_get_serial(IntPtr raw);

		public uint Serial { 
			get {
				uint raw_ret = pango_layout_get_serial(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_get_single_paragraph_mode(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_single_paragraph_mode(IntPtr raw, bool setting);

		public bool SingleParagraphMode { 
			get {
				bool raw_ret = pango_layout_get_single_paragraph_mode(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_single_paragraph_mode(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			pango_layout_get_size(Handle, out width, out height);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_spacing(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_spacing(IntPtr raw, int spacing);

		public int Spacing { 
			get {
				int raw_ret = pango_layout_get_spacing(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_spacing(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_tabs(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_tabs(IntPtr raw, IntPtr tabs);

		public Pango.TabArray Tabs { 
			get {
				IntPtr raw_ret = pango_layout_get_tabs(Handle);
				Pango.TabArray ret = raw_ret == IntPtr.Zero ? null : (Pango.TabArray) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.TabArray), true);
				return ret;
			}
			set {
				pango_layout_set_tabs(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_text(IntPtr raw);

		public string Text { 
			get {
				IntPtr raw_ret = pango_layout_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_layout_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_unknown_glyphs_count(IntPtr raw);

		public int UnknownGlyphsCount { 
			get {
				int raw_ret = pango_layout_get_unknown_glyphs_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_width(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_width(IntPtr raw, int width);

		public int Width { 
			get {
				int raw_ret = pango_layout_get_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				pango_layout_set_width(Handle, value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_layout_get_wrap(IntPtr raw);

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_set_wrap(IntPtr raw, int wrap);

		public Pango.WrapMode Wrap { 
			get {
				int raw_ret = pango_layout_get_wrap(Handle);
				Pango.WrapMode ret = (Pango.WrapMode) raw_ret;
				return ret;
			}
			set {
				pango_layout_set_wrap(Handle, (int) value);
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_index_to_line_x(IntPtr raw, int index_, bool trailing, out int line, out int x_pos);

		public void IndexToLineX(int index_, bool trailing, out int line, out int x_pos) {
			pango_layout_index_to_line_x(Handle, index_, trailing, out line, out x_pos);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_index_to_pos(IntPtr raw, int index_, IntPtr pos);

		public Pango.Rectangle IndexToPos(int index_) {
			Pango.Rectangle pos;
			IntPtr native_pos = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Pango.Rectangle)));
			pango_layout_index_to_pos(Handle, index_, native_pos);
			pos = Pango.Rectangle.New (native_pos);
			Marshal.FreeHGlobal (native_pos);
			return pos;
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_is_ellipsized(IntPtr raw);

		public bool IsEllipsized { 
			get {
				bool raw_ret = pango_layout_is_ellipsized(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_is_wrapped(IntPtr raw);

		public bool IsWrapped { 
			get {
				bool raw_ret = pango_layout_is_wrapped(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_move_cursor_visually(IntPtr raw, bool strong, int old_index, int old_trailing, int direction, out int new_index, out int new_trailing);

		public void MoveCursorVisually(bool strong, int old_index, int old_trailing, int direction, out int new_index, out int new_trailing) {
			pango_layout_move_cursor_visually(Handle, strong, old_index, old_trailing, direction, out new_index, out new_trailing);
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_xy_to_index(IntPtr raw, int x, int y, out int index_, out int trailing);

		public bool XyToIndex(int x, int y, out int index_, out int trailing) {
			bool raw_ret = pango_layout_xy_to_index(Handle, x, y, out index_, out trailing);
			bool ret = raw_ret;
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
