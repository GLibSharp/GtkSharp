// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class FontMetrics : GLib.Opaque {

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_approximate_char_width(IntPtr raw);

		public int ApproximateCharWidth { 
			get {
				int raw_ret = pango_font_metrics_get_approximate_char_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_approximate_digit_width(IntPtr raw);

		public int ApproximateDigitWidth { 
			get {
				int raw_ret = pango_font_metrics_get_approximate_digit_width(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_ascent(IntPtr raw);

		public int Ascent { 
			get {
				int raw_ret = pango_font_metrics_get_ascent(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_descent(IntPtr raw);

		public int Descent { 
			get {
				int raw_ret = pango_font_metrics_get_descent(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_strikethrough_position(IntPtr raw);

		public int StrikethroughPosition { 
			get {
				int raw_ret = pango_font_metrics_get_strikethrough_position(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_strikethrough_thickness(IntPtr raw);

		public int StrikethroughThickness { 
			get {
				int raw_ret = pango_font_metrics_get_strikethrough_thickness(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_metrics_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_font_metrics_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_underline_position(IntPtr raw);

		public int UnderlinePosition { 
			get {
				int raw_ret = pango_font_metrics_get_underline_position(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int pango_font_metrics_get_underline_thickness(IntPtr raw);

		public int UnderlineThickness { 
			get {
				int raw_ret = pango_font_metrics_get_underline_thickness(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		public FontMetrics(IntPtr raw) : base(raw) {}

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_font_metrics_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				pango_font_metrics_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Pango.FontMetrics is now refcounted automatically")]
		public FontMetrics Ref () { return this; }

		[DllImport("libpango-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_font_metrics_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				pango_font_metrics_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Pango.FontMetrics is now refcounted automatically")]
		public void Unref () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				pango_font_metrics_unref (handle);
				return false;
			}
		}

		~FontMetrics ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
