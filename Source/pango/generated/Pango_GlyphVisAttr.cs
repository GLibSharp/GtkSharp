// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct GlyphVisAttr : IEquatable<GlyphVisAttr> {

		private uint _bitfield0;

		[DllImport ("pango-sharp-glue")]
		extern static bool pangosharp_pango_glyphvisattr_get_is_cluster_start (IntPtr raw);
		[DllImport ("pango-sharp-glue")]
		extern static void pangosharp_pango_glyphvisattr_set_is_cluster_start (IntPtr raw, bool value);
		public bool IsClusterStart {
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool result = pangosharp_pango_glyphvisattr_get_is_cluster_start (this_as_native);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return result;
			}
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				pangosharp_pango_glyphvisattr_set_is_cluster_start (this_as_native, value);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			}
		}


		public static Pango.GlyphVisAttr Zero = new Pango.GlyphVisAttr ();

		public static Pango.GlyphVisAttr New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Pango.GlyphVisAttr.Zero;
			return (Pango.GlyphVisAttr) Marshal.PtrToStructure (raw, typeof (Pango.GlyphVisAttr));
		}

		static void ReadNative (IntPtr native, ref Pango.GlyphVisAttr target)
		{
			target = New (native);
		}

		public bool Equals (GlyphVisAttr other)
		{
			return true && _bitfield0.Equals (other._bitfield0);
		}

		public override bool Equals (object other)
		{
			return other is GlyphVisAttr && Equals ((GlyphVisAttr) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _bitfield0.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
