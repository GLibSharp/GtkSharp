// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RelationSet : GLib.Object {

		public RelationSet (IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_new();

		public RelationSet () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RelationSet)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = atk_relation_set_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("pad1"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // pad1
							, null
							, "pad2"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("pad2"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // pad2
							, "pad1"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add(IntPtr raw, IntPtr relation);

		public void Add(Atk.Relation relation) {
			atk_relation_set_add(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_add_relation_by_type(IntPtr raw, int relationship, IntPtr target);

		public void AddRelationByType(Atk.RelationType relationship, Atk.Object target) {
			atk_relation_set_add_relation_by_type(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_relation_set_contains(IntPtr raw, int relationship);

		public bool Contains(Atk.RelationType relationship) {
			bool raw_ret = atk_relation_set_contains(Handle, (int) relationship);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_relation_set_contains_target(IntPtr raw, int relationship, IntPtr target);

		public bool ContainsTarget(Atk.RelationType relationship, Atk.Object target) {
			bool raw_ret = atk_relation_set_contains_target(Handle, (int) relationship, target == null ? IntPtr.Zero : target.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_set_get_n_relations(IntPtr raw);

		public int NRelations { 
			get {
				int raw_ret = atk_relation_set_get_n_relations(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation(IntPtr raw, int i);

		public Atk.Relation GetRelation(int i) {
			IntPtr raw_ret = atk_relation_set_get_relation(Handle, i);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_relation_by_type(IntPtr raw, int relationship);

		public Atk.Relation GetRelationByType(Atk.RelationType relationship) {
			IntPtr raw_ret = atk_relation_set_get_relation_by_type(Handle, (int) relationship);
			Atk.Relation ret = GLib.Object.GetObject(raw_ret) as Atk.Relation;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_set_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_relation_set_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_set_remove(IntPtr raw, IntPtr relation);

		public void Remove(Atk.Relation relation) {
			atk_relation_set_remove(Handle, relation == null ? IntPtr.Zero : relation.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("relations"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // relations
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
