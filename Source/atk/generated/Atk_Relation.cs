// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Relation : GLib.Object {

		public Relation (IntPtr raw) : base(raw) {}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_new(IntPtr[] targets, int n_targets, int relationship);

		public Relation (Atk.Object[] targets, Atk.RelationType relationship) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Relation)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			int cnt_targets = targets == null ? 0 : targets.Length;
			IntPtr[] native_targets = new IntPtr [cnt_targets];
			for (int i = 0; i < cnt_targets; i++)
				native_targets [i] = targets[i] == null ? IntPtr.Zero : targets[i].Handle;
			Raw = atk_relation_new(native_targets, (targets == null ? 0 : targets.Length), (int) relationship);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_get_relation_type(IntPtr raw);

		[GLib.Property ("relation_type")]
		public Atk.RelationType RelationType {
			get  {
				int raw_ret = atk_relation_get_relation_type(Handle);
				Atk.RelationType ret = (Atk.RelationType) raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("relation_type", val);
				val.Dispose ();
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_get_target(IntPtr raw);

		public Atk.Object[] Target {
			get  {
				IntPtr raw_ret = atk_relation_get_target(Handle);
				Atk.Object[] ret = (Atk.Object[]) GLib.Marshaller.PtrArrayToArray (raw_ret, false, false, typeof(Atk.Object));
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_relation_add_target(IntPtr raw, IntPtr target);

		public void AddTarget(Atk.Object target) {
			atk_relation_add_target(Handle, target == null ? IntPtr.Zero : target.Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_relation_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool atk_relation_remove_target(IntPtr raw, IntPtr target);

		public bool RemoveTarget(Atk.Object target) {
			bool raw_ret = atk_relation_remove_target(Handle, target == null ? IntPtr.Zero : target.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_type_for_name(IntPtr name);

		public static Atk.RelationType TypeForName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_relation_type_for_name(native_name);
			Atk.RelationType ret = (Atk.RelationType) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_relation_type_get_name(int type);

		public static string TypeGetName(Atk.RelationType type) {
			IntPtr raw_ret = atk_relation_type_get_name((int) type);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int atk_relation_type_register(IntPtr name);

		public static Atk.RelationType TypeRegister(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = atk_relation_type_register(native_name);
			Atk.RelationType ret = (Atk.RelationType) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("target"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // target
							, null
							, "relationship"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("relationship"
							, -1
							, (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(Atk.RelationType))) // relationship
							, "target"
							, null
							, (long) Marshal.OffsetOf(typeof(AtkRelation_relationshipAlign), "relationship")
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct AtkRelation_relationshipAlign
		{
			sbyte f1;
			private Atk.RelationType relationship;
		}


		// End of the ABI representation.

#endregion
	}
}
