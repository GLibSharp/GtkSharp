// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Misc : GLib.Object {

		public Misc (IntPtr raw) : base(raw) {}

		protected Misc() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		static ThreadsEnterNativeDelegate ThreadsEnter_cb_delegate;
		static ThreadsEnterNativeDelegate ThreadsEnterVMCallback {
			get {
				if (ThreadsEnter_cb_delegate == null)
					ThreadsEnter_cb_delegate = new ThreadsEnterNativeDelegate (ThreadsEnter_cb);
				return ThreadsEnter_cb_delegate;
			}
		}

		static void OverrideThreadsEnter (GLib.GType gtype)
		{
			OverrideThreadsEnter (gtype, ThreadsEnterVMCallback);
		}

		static void OverrideThreadsEnter (GLib.GType gtype, ThreadsEnterNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("threads_enter"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ThreadsEnterNativeDelegate (IntPtr inst);

		static void ThreadsEnter_cb (IntPtr inst)
		{
			try {
				Misc __obj = GLib.Object.GetObject (inst, false) as Misc;
				__obj.OnThreadsEnter ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Misc), ConnectionMethod="OverrideThreadsEnter")]
		protected virtual void OnThreadsEnter ()
		{
			InternalThreadsEnter ();
		}

		private void InternalThreadsEnter ()
		{
			ThreadsEnterNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("threads_enter"));
				unmanaged = (ThreadsEnterNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ThreadsEnterNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static ThreadsLeaveNativeDelegate ThreadsLeave_cb_delegate;
		static ThreadsLeaveNativeDelegate ThreadsLeaveVMCallback {
			get {
				if (ThreadsLeave_cb_delegate == null)
					ThreadsLeave_cb_delegate = new ThreadsLeaveNativeDelegate (ThreadsLeave_cb);
				return ThreadsLeave_cb_delegate;
			}
		}

		static void OverrideThreadsLeave (GLib.GType gtype)
		{
			OverrideThreadsLeave (gtype, ThreadsLeaveVMCallback);
		}

		static void OverrideThreadsLeave (GLib.GType gtype, ThreadsLeaveNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("threads_leave"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ThreadsLeaveNativeDelegate (IntPtr inst);

		static void ThreadsLeave_cb (IntPtr inst)
		{
			try {
				Misc __obj = GLib.Object.GetObject (inst, false) as Misc;
				__obj.OnThreadsLeave ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Atk.Misc), ConnectionMethod="OverrideThreadsLeave")]
		protected virtual void OnThreadsLeave ()
		{
			InternalThreadsLeave ();
		}

		private void InternalThreadsLeave ()
		{
			ThreadsLeaveNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("threads_leave"));
				unmanaged = (ThreadsLeaveNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(ThreadsLeaveNativeDelegate));
			}
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("threads_enter"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // threads_enter
							, null
							, "threads_leave"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("threads_leave"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // threads_leave
							, "threads_enter"
							, "vfuncs"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("vfuncs"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 32 // vfuncs
							, "threads_leave"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_misc_get_instance();

		[Obsolete]
		public static Atk.Misc Instance { 
			get {
				IntPtr raw_ret = atk_misc_get_instance();
				Atk.Misc ret = GLib.Object.GetObject(raw_ret) as Atk.Misc;
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_misc_get_type();

		[Obsolete]
		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_misc_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_misc_threads_enter(IntPtr raw);

		[Obsolete]
		public void ThreadsEnter() {
			atk_misc_threads_enter(Handle);
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_misc_threads_leave(IntPtr raw);

		[Obsolete]
		public void ThreadsLeave() {
			atk_misc_threads_leave(Handle);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (GLib.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
