// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct TextRange : IEquatable<TextRange> {

		public Atk.TextRectangle Bounds;
		public int StartOffset;
		public int EndOffset;
		public string Content;

		public static Atk.TextRange Zero = new Atk.TextRange ();

		public static Atk.TextRange New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Atk.TextRange.Zero;
			return (Atk.TextRange) Marshal.PtrToStructure (raw, typeof (Atk.TextRange));
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_text_range_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_text_range_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (TextRange other)
		{
			return true && Bounds.Equals (other.Bounds) && StartOffset.Equals (other.StartOffset) && EndOffset.Equals (other.EndOffset) && Content.Equals (other.Content);
		}

		public override bool Equals (object other)
		{
			return other is TextRange && Equals ((TextRange) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Bounds.GetHashCode () ^ StartOffset.GetHashCode () ^ EndOffset.GetHashCode () ^ Content.GetHashCode ();
		}

		public static explicit operator GLib.Value (Atk.TextRange boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Atk.TextRange.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Atk.TextRange (GLib.Value val)
		{
			return (Atk.TextRange) val.Val;
		}
#endregion
	}
}
