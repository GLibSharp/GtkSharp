// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct PropertyValues : IEquatable<PropertyValues> {

		public string PropertyName;
		public GLib.Value OldValue;
		public GLib.Value NewValue;

		public static Atk.PropertyValues Zero = new Atk.PropertyValues ();

		public static Atk.PropertyValues New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Atk.PropertyValues.Zero;
			return (Atk.PropertyValues) Marshal.PtrToStructure (raw, typeof (Atk.PropertyValues));
		}

		public bool Equals (PropertyValues other)
		{
			return true && PropertyName.Equals (other.PropertyName) && OldValue.Equals (other.OldValue) && NewValue.Equals (other.NewValue);
		}

		public override bool Equals (object other)
		{
			return other is PropertyValues && Equals ((PropertyValues) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ PropertyName.GetHashCode () ^ OldValue.GetHashCode () ^ NewValue.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
