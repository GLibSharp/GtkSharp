// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Registry : GLib.Object {

		public Registry (IntPtr raw) : base(raw) {}

		protected Registry() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (GLib.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_factory(IntPtr raw, IntPtr type);

		public Atk.ObjectFactory GetFactory(GLib.GType type) {
			IntPtr raw_ret = atk_registry_get_factory(Handle, type.Val);
			Atk.ObjectFactory ret = GLib.Object.GetObject(raw_ret) as Atk.ObjectFactory;
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_factory_type(IntPtr raw, IntPtr type);

		public GLib.GType GetFactoryType(GLib.GType type) {
			IntPtr raw_ret = atk_registry_get_factory_type(Handle, type.Val);
			GLib.GType ret = new GLib.GType(raw_ret);
			return ret;
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_registry_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_registry_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void atk_registry_set_factory_type(IntPtr raw, IntPtr type, IntPtr factory_type);

		public void SetFactoryType(GLib.GType type, GLib.GType factory_type) {
			atk_registry_set_factory_type(Handle, type.Val, factory_type.Val);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("factory_type_registry"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // factory_type_registry
							, null
							, "factory_singleton_cache"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("factory_singleton_cache"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // factory_singleton_cache
							, "factory_type_registry"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
