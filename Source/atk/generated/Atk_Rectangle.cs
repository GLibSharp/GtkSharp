// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Rectangle : IEquatable<Rectangle> {

		public int X;
		public int Y;
		public int Width;
		public int Height;

		public static Atk.Rectangle Zero = new Atk.Rectangle ();

		public static Atk.Rectangle New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Atk.Rectangle.Zero;
			return (Atk.Rectangle) Marshal.PtrToStructure (raw, typeof (Atk.Rectangle));
		}

		[DllImport("libatk-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr atk_rectangle_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = atk_rectangle_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public bool Equals (Rectangle other)
		{
			return true && X.Equals (other.X) && Y.Equals (other.Y) && Width.Equals (other.Width) && Height.Equals (other.Height);
		}

		public override bool Equals (object other)
		{
			return other is Rectangle && Equals ((Rectangle) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ X.GetHashCode () ^ Y.GetHashCode () ^ Width.GetHashCode () ^ Height.GetHashCode ();
		}

		public static explicit operator GLib.Value (Atk.Rectangle boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Atk.Rectangle.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator Atk.Rectangle (GLib.Value val)
		{
			return (Atk.Rectangle) val.Val;
		}
#endregion
	}
}
