// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Atk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct KeyEventStruct : IEquatable<KeyEventStruct> {

		public int Type;
		public uint State;
		public uint Keyval;
		public int Length;
		public string String;
		public ushort Keycode;
		public uint Timestamp;

		public static Atk.KeyEventStruct Zero = new Atk.KeyEventStruct ();

		public static Atk.KeyEventStruct New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Atk.KeyEventStruct.Zero;
			return (Atk.KeyEventStruct) Marshal.PtrToStructure (raw, typeof (Atk.KeyEventStruct));
		}

		public bool Equals (KeyEventStruct other)
		{
			return true && Type.Equals (other.Type) && State.Equals (other.State) && Keyval.Equals (other.Keyval) && Length.Equals (other.Length) && String.Equals (other.String) && Keycode.Equals (other.Keycode) && Timestamp.Equals (other.Timestamp);
		}

		public override bool Equals (object other)
		{
			return other is KeyEventStruct && Equals ((KeyEventStruct) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Type.GetHashCode () ^ State.GetHashCode () ^ Keyval.GetHashCode () ^ Length.GetHashCode () ^ String.GetHashCode () ^ Keycode.GetHashCode () ^ Timestamp.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
